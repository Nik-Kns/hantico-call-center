'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Play, 
  Pause, 
  RotateCcw, 
  CheckCircle, 
  AlertTriangle, 
  Phone, 
  MessageSquare, 
  User,
  FileText,
  TrendingUp
} from 'lucide-react';

interface DemoStep {
  id: string;
  title: string;
  description: string;
  duration: number;
  status: 'pending' | 'running' | 'completed' | 'error';
  details?: string[];
  metrics?: { [key: string]: string | number };
}

const DEMO_SCENARIO: DemoStep[] = [
  {
    id: 'import',
    title: '–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
    description: '–ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª —Å 500 –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏',
    duration: 2000,
    status: 'pending',
    details: [
      '–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª contacts_500.csv',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö',
      '–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
      '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤'
    ],
    metrics: {
      '–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π': 500,
      '–í–∞–ª–∏–¥–Ω—ã—Ö': 487,
      '–î—É–±–ª–∏–∫–∞—Ç–æ–≤': 13,
      '–ì–æ—Ç–æ–≤–æ –∫ –æ–±–∑–≤–æ–Ω—É': 487
    }
  },
  {
    id: 'campaign',
    title: '–ó–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏',
    description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∫–∞–º–ø–∞–Ω–∏–∏ &quot;–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–∑–∏–Ω–æ&quot;',
    duration: 1500,
    status: 'pending',
    details: [
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞',
      '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ø—ã—Ç–æ–∫',
      '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS —à–∞–±–ª–æ–Ω–æ–≤',
      '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞–º–ø–∞–Ω–∏–∏'
    ],
    metrics: {
      '–°–∫—Ä–∏–ø—Ç': 'Casino Registration v2.1',
      '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å': 5,
      '–ú–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫': 3,
      'SMS —Å–æ–≥–ª–∞—Å–∏–µ': '–í–∫–ª—é—á–µ–Ω–æ'
    }
  },
  {
    id: 'monitoring',
    title: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤–æ–Ω–∫–æ–≤',
    description: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
    duration: 3000,
    status: 'pending',
    details: [
      '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π',
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
      '–§–∏–∫—Å–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–≤–æ–Ω–∫–æ–≤',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    ],
    metrics: {
      '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤': 5,
      '–î–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å': 23,
      '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª–∏': 12,
      '–ó–∞–Ω—è—Ç–æ': 8
    }
  },
  {
    id: 'cdr_success',
    title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞',
    description: 'CDR: –û—Ç–≤–µ—Ç + —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ SMS',
    duration: 2500,
    status: 'pending',
    details: [
      '–ó–≤–æ–Ω–æ–∫: +7 (999) 123-45-67',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç–≤–µ—Ç–∏–ª, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω',
      'SMS —Å–æ–≥–ª–∞—Å–∏–µ: –ü–æ–ª—É—á–µ–Ω–æ',
      '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS'
    ],
    metrics: {
      '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': '2:34',
      '–ò—Å—Ö–æ–¥': 'answer_success',
      'SMS —Å–æ–≥–ª–∞—Å–∏–µ': '–î–∞',
      'SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
    }
  },
  {
    id: 'cdr_retry',
    title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ–∑–≤–æ–Ω–∞',
    description: 'CDR: –ù–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–≤–æ–Ω–æ–∫',
    duration: 1800,
    status: 'pending',
    details: [
      '–ó–≤–æ–Ω–æ–∫: +7 (999) 876-54-32',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–µ –æ—Ç–≤–µ—Ç–∏–ª',
      '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫'
    ],
    metrics: {
      '–ò—Å—Ö–æ–¥': 'no_answer',
      '–ü–æ–ø—ã—Ç–∫–∞': '1 –∏–∑ 3',
      '–°–ª–µ–¥—É—é—â–∏–π –∑–≤–æ–Ω–æ–∫': '–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': '–°—Ä–µ–¥–Ω–∏–π'
    }
  },
  {
    id: 'cdr_refuse',
    title: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞',
    description: 'CDR: –û—Ç–∫–∞–∑ ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É',
    duration: 2000,
    status: 'pending',
    details: [
      '–ó–≤–æ–Ω–æ–∫: +7 (999) 555-11-22',
      '–†–µ–∑—É–ª—å—Ç–∞—Ç: –û—Ç–∫–∞–∑–∞–ª—Å—è, –ø—Ä–æ—Å–∏—Ç –Ω–µ –∑–≤–æ–Ω–∏—Ç—å',
      '–ü—Ä–∏—á–∏–Ω–∞: &quot;–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ&quot;',
      '–ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É'
    ],
    metrics: {
      '–ò—Å—Ö–æ–¥': 'answer_refuse',
      '–ü—Ä–∏—á–∏–Ω–∞': '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
      '–ó–∞–¥–∞—á–∞': '–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è Manager_01',
      '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': '–í—ã—Å–æ–∫–∏–π'
    }
  },
  {
    id: 'task_complete',
    title: '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º',
    description: '–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–¥–∞—á—É –∏ –∑–∞–∫—Ä—ã–ª –ª–∏–¥–∞',
    duration: 1500,
    status: 'pending',
    details: [
      '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª CDR',
      '–î–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      '–ü–æ–º–µ—Ç–∏–ª –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é',
      '–õ–∏–¥ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å &quot;–æ—Ç–∫–∞–∑&quot;'
    ],
    metrics: {
      '–ó–∞–¥–∞—á–∞': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
      '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏': '15 –º–∏–Ω—É—Ç',
      '–°—Ç–∞—Ç—É—Å –ª–∏–¥–∞': 'refused',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': '–î–æ–±–∞–≤–ª–µ–Ω'
    }
  },
  {
    id: 'registration',
    title: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞',
    description: '–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ SMS —Å—Å—ã–ª–∫–µ',
    duration: 2200,
    status: 'pending',
    details: [
      '–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ SMS —Å—Å—ã–ª–∫–µ',
      '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email',
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ CRM'
    ],
    metrics: {
      '–õ–∏–¥ ID': 'L_00123',
      '–°—Ç–∞—Ç—É—Å': 'registered',
      '–ò—Å—Ç–æ—á–Ω–∏–∫': 'SMS campaign',
      '–ö–æ–Ω–≤–µ—Ä—Å–∏—è': '+1'
    }
  },
  {
    id: 'dashboard',
    title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞',
    description: '–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏',
    duration: 1000,
    status: 'pending',
    details: [
      '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI –∫–∞—Ä—Ç–æ—á–µ–∫',
      '–ü–µ—Ä–µ—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏',
      '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤',
      '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö'
    ],
    metrics: {
      '–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤': 487,
      '–î–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å': 156,
      '–°–æ–≥–ª–∞—Å–∏–µ SMS': 43,
      '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π': 12,
      '–ö–æ–Ω–≤–µ—Ä—Å–∏—è': '2.5%'
    }
  }
];

export default function Demo1Page() {
  const [steps, setSteps] = useState<DemoStep[]>(DEMO_SCENARIO);
  const [isRunning, setIsRunning] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [progress, setProgress] = useState(0);

  const resetDemo = () => {
    setSteps(DEMO_SCENARIO.map(step => ({ ...step, status: 'pending' })));
    setCurrentStep(0);
    setProgress(0);
    setIsRunning(false);
  };

  const runStep = async (stepIndex: number) => {
    const step = steps[stepIndex];
    
    // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞
    setSteps(prev => prev.map((s, i) => 
      i === stepIndex ? { ...s, status: 'running' } : s
    ));

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const duration = step.duration;
    const interval = 50;
    const increment = 100 / (duration / interval);
    let currentProgress = 0;

    const progressInterval = setInterval(() => {
      currentProgress += increment;
      setProgress(Math.min(currentProgress, 100));
    }, interval);

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await new Promise(resolve => setTimeout(resolve, duration));
    
    clearInterval(progressInterval);
    setProgress(100);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —à–∞–≥
    setSteps(prev => prev.map((s, i) => 
      i === stepIndex ? { ...s, status: 'completed' } : s
    ));

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —à–∞–≥–æ–º
    await new Promise(resolve => setTimeout(resolve, 500));
    setProgress(0);
  };

  const runDemo = async () => {
    setIsRunning(true);
    
    for (let i = 0; i < steps.length; i++) {
      setCurrentStep(i);
      await runStep(i);
    }
    
    setIsRunning(false);
    setCurrentStep(-1);
  };

  const getStatusIcon = (status: DemoStep['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'running':
        return <div className="h-5 w-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin" />;
      case 'error':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      default:
        return <div className="h-5 w-5 border-2 border-gray-300 rounded-full" />;
    }
  };

  const getStepIcon = (stepId: string) => {
    const iconMap = {
      'import': FileText,
      'campaign': Play,
      'monitoring': TrendingUp,
      'cdr_success': CheckCircle,
      'cdr_retry': RotateCcw,
      'cdr_refuse': AlertTriangle,
      'task_complete': User,
      'registration': CheckCircle,
      'dashboard': TrendingUp
    };
    const Icon = iconMap[stepId as keyof typeof iconMap] || Phone;
    return <Icon className="h-6 w-6" />;
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          üéØ –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π: Hantico Call Center
        </h1>
        <p className="text-lg text-gray-600 mb-6">
          –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–±–∑–≤–æ–Ω–∞
        </p>
        
        <div className="flex gap-4 mb-6">
          <Button 
            onClick={runDemo} 
            disabled={isRunning}
            className="flex items-center gap-2"
          >
            {isRunning ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
            {isRunning ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ'}
          </Button>
          
          <Button 
            onClick={resetDemo} 
            variant="outline"
            disabled={isRunning}
            className="flex items-center gap-2"
          >
            <RotateCcw className="h-4 w-4" />
            –°–±—Ä–æ—Å–∏—Ç—å
          </Button>
        </div>

        {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</span>
            <span className="text-sm text-gray-500">
              {steps.filter(s => s.status === 'completed').length} / {steps.length}
            </span>
          </div>
          <Progress 
            value={(steps.filter(s => s.status === 'completed').length / steps.length) * 100} 
            className="h-2"
          />
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ */}
      <div className="grid gap-6">
        {steps.map((step, index) => (
          <Card 
            key={step.id} 
            className={`transition-all duration-300 ${
              currentStep === index ? 'ring-2 ring-blue-500 shadow-lg' : ''
            } ${step.status === 'completed' ? 'bg-green-50' : ''}`}
          >
            <CardHeader className="pb-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {getStepIcon(step.id)}
                  <div>
                    <CardTitle className="text-lg flex items-center gap-2">
                      {step.title}
                      {getStatusIcon(step.status)}
                    </CardTitle>
                    <CardDescription>{step.description}</CardDescription>
                  </div>
                </div>
                <Badge variant={step.status === 'completed' ? 'default' : 'secondary'}>
                  {index + 1}
                </Badge>
              </div>
              
              {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ */}
              {currentStep === index && step.status === 'running' && (
                <div className="mt-3">
                  <Progress value={progress} className="h-1" />
                </div>
              )}
            </CardHeader>

            <CardContent>
              {/* –î–µ—Ç–∞–ª–∏ */}
              {step.details && (
                <div className="mb-4">
                  <h4 className="font-medium mb-2">–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</h4>
                  <ul className="space-y-1">
                    {step.details.map((detail, i) => (
                      <li key={i} className="text-sm text-gray-600 flex items-center gap-2">
                        {step.status === 'completed' ? (
                          <CheckCircle className="h-3 w-3 text-green-500" />
                        ) : (
                          <div className="h-3 w-3 border border-gray-300 rounded-full" />
                        )}
                        {detail}
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
              {step.metrics && (
                <div>
                  <h4 className="font-medium mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                    {Object.entries(step.metrics).map(([key, value]) => (
                      <div key={key} className="bg-gray-50 p-2 rounded">
                        <div className="text-xs text-gray-500">{key}</div>
                        <div className="font-medium">{value}</div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        ))}
      </div>

      {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {steps.every(s => s.status === 'completed') && (
        <Card className="mt-8 bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
          <CardHeader>
            <CardTitle className="text-xl text-green-800 flex items-center gap-2">
              <CheckCircle className="h-6 w-6" />
              üéâ –î–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
            </CardTitle>
            <CardDescription>
              –°–∏—Å—Ç–µ–º–∞ –æ–±–∑–≤–æ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞ –≤–µ—Å—å —Ü–∏–∫–ª –æ—Ç –∏–º–ø–æ—Ä—Ç–∞ –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                <div className="text-2xl font-bold text-blue-600">487</div>
                <div className="text-sm text-gray-600">–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
              </div>
              <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                <div className="text-2xl font-bold text-green-600">156</div>
                <div className="text-sm text-gray-600">–î–æ–∑–≤–æ–Ω–∏–ª–∏—Å—å</div>
              </div>
              <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                <div className="text-2xl font-bold text-purple-600">43</div>
                <div className="text-sm text-gray-600">SMS —Å–æ–≥–ª–∞—Å–∏–π</div>
              </div>
              <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                <div className="text-2xl font-bold text-orange-600">12</div>
                <div className="text-sm text-gray-600">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π</div>
              </div>
              <div className="text-center p-3 bg-white rounded-lg shadow-sm">
                <div className="text-2xl font-bold text-red-600">2.5%</div>
                <div className="text-sm text-gray-600">–ö–æ–Ω–≤–µ—Ä—Å–∏—è</div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
