import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { format, formatDistanceToNow, isToday, isYesterday } from 'date-fns'
import { ru } from 'date-fns/locale'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
export function formatTime(date: Date): string {
  return format(date, 'HH:mm', { locale: ru })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export function formatDate(date: Date): string {
  if (isToday(date)) {
    return `–°–µ–≥–æ–¥–Ω—è, ${formatTime(date)}`
  }
  
  if (isYesterday(date)) {
    return `–í—á–µ—Ä–∞, ${formatTime(date)}`
  }
  
  return format(date, 'dd.MM.yyyy HH:mm', { locale: ru })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
export function formatRelativeTime(date: Date): string {
  return formatDistanceToNow(date, { 
    addSuffix: true, 
    locale: ru 
  })
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
export function formatCallDuration(seconds: number): string {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  
  if (minutes === 0) {
    return `${remainingSeconds}—Å`
  }
  
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export function formatPhoneNumber(phone: string): string {
  // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
  if (phone.startsWith('+7')) {
    const digits = phone.slice(2)
    if (digits.length === 10) {
      return `+7 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6, 8)}-${digits.slice(8)}`
    }
  }
  return phone
}

// –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export function maskPhoneNumber(phone: string): string {
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
  const cleaned = phone.replace(/[^\d+]/g, '')
  
  if (cleaned.startsWith('+7') && cleaned.length >= 11) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä: +7 (9XX) XXX-XX-XX -> +7 (9‚Ä¢‚Ä¢) ‚Ä¢‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-12
    const digits = cleaned.slice(2)
    const lastTwo = digits.slice(-2)
    return `+7 (${digits[0]}‚Ä¢‚Ä¢) ‚Ä¢‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-${lastTwo}`
  } else if (cleaned.startsWith('8') && cleaned.length >= 10) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä —Å 8: 8 9XX XXX XX XX -> 8 (9‚Ä¢‚Ä¢) ‚Ä¢‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-12
    const digits = cleaned.slice(1)
    const lastTwo = digits.slice(-2)
    return `8 (${digits[0]}‚Ä¢‚Ä¢) ‚Ä¢‚Ä¢‚Ä¢-‚Ä¢‚Ä¢-${lastTwo}`
  } else if (cleaned.length >= 10) {
    // –û–±—â–∏–π —Å–ª—É—á–∞–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2-3 —Ü–∏—Ñ—Ä—ã –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2
    const firstPart = cleaned.slice(0, 3)
    const lastTwo = cleaned.slice(-2)
    const middleLength = cleaned.length - 5
    const middle = '‚Ä¢'.repeat(middleLength)
    return `${firstPart}${middle}${lastTwo}`
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –º–∞—Å–∫–∏—Ä—É–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É
  if (cleaned.length >= 4) {
    const first = cleaned[0]
    const last = cleaned.slice(-1)
    const middleLength = cleaned.length - 2
    const middle = '‚Ä¢'.repeat(middleLength)
    return `${first}${middle}${last}`
  }
  
  // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä - –ø–æ–ª–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞
  return '‚Ä¢'.repeat(cleaned.length)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
export function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    // –°—Ç–∞—Ç—É—Å—ã –ª–∏–¥–æ–≤
    'new': 'bg-blue-100 text-blue-800',
    'in_queue': 'bg-yellow-100 text-yellow-800',
    'calling': 'bg-orange-100 text-orange-800',
    'called': 'bg-gray-100 text-gray-800',
    'success': 'bg-green-100 text-green-800',
    'refused': 'bg-red-100 text-red-800',
    'blacklisted': 'bg-black text-white',
    'registered': 'bg-emerald-100 text-emerald-800',
    
    // –ò—Å—Ö–æ–¥—ã –∑–≤–æ–Ω–∫–æ–≤
    'answer_success': 'bg-green-100 text-green-800',
    'answer_refuse': 'bg-red-100 text-red-800',
    'no_answer': 'bg-yellow-100 text-yellow-800',
    'busy': 'bg-orange-100 text-orange-800',
    'voicemail': 'bg-purple-100 text-purple-800',
    'robot_voicemail': 'bg-indigo-100 text-indigo-800',
    'invalid': 'bg-gray-100 text-gray-800',
    'blacklist': 'bg-black text-white',
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
    'running': 'bg-green-100 text-green-800',
    'paused': 'bg-yellow-100 text-yellow-800',
    'stopped': 'bg-red-100 text-red-800',
    'draft': 'bg-gray-100 text-gray-800',
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
    'low': 'bg-blue-100 text-blue-800',
    'medium': 'bg-yellow-100 text-yellow-800',
    'high': 'bg-orange-100 text-orange-800',
    'urgent': 'bg-red-100 text-red-800',
    
    // –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
    'pending': 'bg-yellow-100 text-yellow-800',
    'in_progress': 'bg-blue-100 text-blue-800',
    'completed': 'bg-green-100 text-green-800',
    'cancelled': 'bg-gray-100 text-gray-800',
    
    // –°—Ç–∞—Ç—É—Å—ã SMS
    'sent': 'bg-blue-100 text-blue-800',
    'delivered': 'bg-green-100 text-green-800',
    'failed': 'bg-red-100 text-red-800',
  }
  
  return colors[status] || 'bg-gray-100 text-gray-800'
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
export function getStatusText(status: string): string {
  const texts: Record<string, string> = {
    // –°—Ç–∞—Ç—É—Å—ã –ª–∏–¥–æ–≤
    'new': '–ù–æ–≤—ã–π',
    'in_queue': '–í –æ—á–µ—Ä–µ–¥–∏',
    'calling': '–ó–≤–æ–Ω–∏–º',
    'called': '–û–±–∑–≤–æ–Ω–µ–Ω',
    'success': '–£—Å–ø–µ—Ö',
    'refused': '–û—Ç–∫–∞–∑',
    'blacklisted': '–ß–°',
    'registered': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
    
    // –ò—Å—Ö–æ–¥—ã –∑–≤–æ–Ω–∫–æ–≤
    'answer_success': '–£—Å–ø–µ—à–Ω–æ',
    'answer_refuse': '–û—Ç–∫–∞–∑',
    'no_answer': '–ù–µ –æ—Ç–≤–µ—Ç–∏–ª',
    'busy': '–ó–∞–Ω—è—Ç–æ',
    'voicemail': '–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫',
    'robot_voicemail': '–†–æ–±–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫',
    'invalid': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
    'blacklist': '–ß–°',
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
    'running': '–ó–∞–ø—É—â–µ–Ω–∞',
    'paused': '–ü–∞—É–∑–∞',
    'stopped': '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
    'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
    'low': '–ù–∏–∑–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'high': '–í—ã—Å–æ–∫–∏–π',
    'urgent': '–°—Ä–æ—á–Ω–æ',
    
    // –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
    'pending': '–û–∂–∏–¥–∞–µ—Ç',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ',
    
    // –°—Ç–∞—Ç—É—Å—ã SMS
    'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
    'failed': '–û—à–∏–±–∫–∞',
  }
  
  return texts[status] || status
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
export function getStatusIcon(status: string): string {
  const icons: Record<string, string> = {
    // –°—Ç–∞—Ç—É—Å—ã –ª–∏–¥–æ–≤
    'new': 'üÜï',
    'in_queue': '‚è≥',
    'calling': 'üìû',
    'called': '‚úÖ',
    'success': 'üéâ',
    'refused': '‚ùå',
    'blacklisted': 'üö´',
    'registered': 'üéØ',
    
    // –ò—Å—Ö–æ–¥—ã –∑–≤–æ–Ω–∫–æ–≤
    'answer_success': '‚úÖ',
    'answer_refuse': '‚ùå',
    'no_answer': 'üìµ',
    'busy': 'üì±',
    'voicemail': 'üìß',
    'robot_voicemail': 'ü§ñ',
    'invalid': '‚ö†Ô∏è',
    'blacklist': 'üö´',
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
    'running': '‚ñ∂Ô∏è',
    'paused': '‚è∏Ô∏è',
    'stopped': '‚èπÔ∏è',
    'draft': 'üìù',
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
    'low': 'üîµ',
    'medium': 'üü°',
    'high': 'üü†',
    'urgent': 'üî¥',
    
    // –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
    'pending': '‚è≥',
    'in_progress': 'üîÑ',
    'completed': '‚úÖ',
    'cancelled': '‚ùå',
    
    // –°—Ç–∞—Ç—É—Å—ã SMS
    'sent': 'üì§',
    'delivered': '‚úÖ',
    'failed': '‚ùå',
  }
  
  return icons[status] || '‚ùì'
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
export function calculatePercentage(value: number, total: number): number {
  if (total === 0) return 0
  return Math.round((value / total) * 100)
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
export function generateId(prefix: string = ''): string {
  const timestamp = Date.now().toString(36)
  const random = Math.random().toString(36).substr(2, 5)
  return prefix ? `${prefix}-${timestamp}-${random}` : `${timestamp}-${random}`
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
export function isValidPhoneNumber(phone: string): boolean {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/
  return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''))
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
export function exportToCSV(data: any[], filename: string): void {
  if (data.length === 0) return
  
  const headers = Object.keys(data[0])
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        let value = row[header]
        if (typeof value === 'string' && /\+?\d[\d\s\-\(\)]{6,}/.test(value)) {
          value = maskPhoneNumber(value)
        }
        if (typeof value === 'string' && value.includes(',')) {
          return `"${value}"`
        }
        return value
      }).join(',')
    )
  ].join('\n')
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', filename)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
}

// –î–µ–±–∞—É–Ω—Å —Ñ—É–Ω–∫—Ü–∏—è
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
export function hasPermission(
  userPermissions: any,
  resource: string,
  action: string
): boolean {
  return userPermissions?.[resource]?.[action] === true
}

// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
export const storage = {
  get: <T>(key: string, defaultValue: T): T => {
    if (typeof window === 'undefined') return defaultValue
    
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : defaultValue
    } catch {
      return defaultValue
    }
  },
  
  set: (key: string, value: any): void => {
    if (typeof window === 'undefined') return
    
    try {
      window.localStorage.setItem(key, JSON.stringify(value))
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏
    }
  },
  
  remove: (key: string): void => {
    if (typeof window === 'undefined') return
    
    try {
      window.localStorage.removeItem(key)
    } catch {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
  }
}
