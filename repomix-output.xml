This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.claude/
  claude.md
  settings.local.json
scripts/
  dev.js
src/
  app/
    agents/
      [id]/
        ab-tests/
          new/
            page.tsx
          page.tsx
        test/
          page.tsx
        page.tsx
      new/
        page.tsx
      page.tsx
    companies/
      [id]/
        ab-tests/
          page.tsx
        page.tsx
      ab-tests/
        page.tsx
      new/
        page.tsx
      page.tsx
    obzvoni/
      [id]/
        page.tsx
      ab-tests/
        page.tsx
      monitor/
        page.tsx
      new/
        page.tsx
      page.tsx
    settings/
      aggregators/
        page.tsx
      consent/
        page.tsx
      dnc/
        page.tsx
      integrations/
        page.tsx
      knowledge/
        page.tsx
      notifications/
        page.tsx
      tasks/
        page.tsx
      webhooks/
        page.tsx
      layout.tsx
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    dashboard/
      campaign-card.tsx
    layout/
      main-layout.tsx
    ui/
      alert.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      card.tsx
      checkbox.tsx
      date-filter.tsx
      dialog.tsx
      dropdown-menu.tsx
      input.tsx
      label.tsx
      popover.tsx
      progress.tsx
      select.tsx
      separator.tsx
      slider.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
    call-test-modal.tsx
  lib/
    mock-data.ts
    types.ts
    utils.ts
.eslintrc.json
.gitignore
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".claude/settings.local.json">
{
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npm run dev:*)",
      "Bash(mkdir:*)",
      "Bash(git push:*)",
      "Bash(npm run build:*)",
      "Bash(NEXT_IGNORE_ESLINT=true npm run build)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(npm install:*)",
      "Bash(open http://localhost:3000)",
      "Bash(open http://localhost:3001)",
      "Bash(open http://localhost:3001/companies/new)",
      "Bash(npm cache clean:*)",
      "Bash(lsof:*)",
      "Bash(open http://localhost:3000/companies/new)",
      "Bash(npx tsx:*)",
      "Bash(npx tsc:*)",
      "Bash(sed:*)"
    ],
    "deny": [],
    "ask": []
  }
}
</file>

<file path=".claude/claude.md">
тебя зовут ЙОЛО
</file>

<file path="scripts/dev.js">
#!/usr/bin/env node

const { spawn } = require('child_process');

// Start Next.js development server
const nextDev = spawn('npx', ['next', 'dev'], {
  stdio: 'inherit',
  shell: true
});

nextDev.on('close', (code) => {
  console.log(`Next.js dev server exited with code ${code}`);
});

process.on('SIGINT', () => {
  nextDev.kill('SIGINT');
  process.exit(0);
});
</file>

<file path="src/app/agents/[id]/ab-tests/new/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Save,
  Play,
  Settings,
  GitBranch,
  Target,
  Users,
  Clock,
  TrendingUp,
  AlertCircle,
  Plus,
  Trash2
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { mockAgents, mockAgentVersions } from '@/lib/mock-data'
import { ABTestSettings, ABTestVariant } from '@/lib/types'

interface ABTestForm {
  name: string
  description: string
  variants: ABTestVariant[]
  settings: ABTestSettings
}

const primaryMetrics = [
  { id: 'conversion_rate', name: 'Конверсия', description: 'Процент успешных звонков' },
  { id: 'success_rate', name: 'Успешность', description: 'Общий процент успеха' },
  { id: 'avg_call_duration', name: 'Длительность звонка', description: 'Среднее время разговора' },
  { id: 'sms_consent_rate', name: 'Согласие на SMS', description: 'Процент согласий на SMS' }
]

const secondaryMetrics = [
  'conversion_rate',
  'success_rate', 
  'avg_call_duration',
  'sms_consent_rate',
  'rejection_rate',
  'callback_requests'
]

export default function NewABTestPage() {
  const router = useRouter()
  const params = useParams()
  const agentId = params.id as string
  
  const agent = mockAgents.find(a => a.id === agentId)
  const versions = mockAgentVersions.filter(v => v.agentId === agentId)
  
  const [form, setForm] = useState<ABTestForm>({
    name: '',
    description: '',
    variants: [
      {
        id: 'variant-a',
        name: 'A (Контроль)',
        versionId: '',
        trafficAllocation: 50,
        isControl: true
      },
      {
        id: 'variant-b', 
        name: 'B',
        versionId: '',
        trafficAllocation: 50
      }
    ],
    settings: {
      duration: 14,
      minSampleSize: 1000,
      confidenceLevel: 95,
      primaryMetric: 'conversion_rate',
      secondaryMetrics: ['sms_consent_rate'],
      autoStop: true,
      trafficRampUp: {
        enabled: false,
        startPercent: 10,
        rampUpDays: 3
      }
    }
  })
  
  const [isLoading, setIsLoading] = useState(false)

  if (!agent) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Агент не найден</p>
        <Button className="mt-4" onClick={() => router.back()}>
          Назад к списку агентов
        </Button>
      </div>
    )
  }

  const handleSave = async (startTest = false) => {
    setIsLoading(true)
    
    // Валидация
    if (!form.name.trim()) {
      alert('Введите название теста')
      setIsLoading(false)
      return
    }
    
    if (form.variants.some(v => !v.versionId)) {
      alert('Выберите версии для всех вариантов')
      setIsLoading(false)
      return
    }
    
    const totalTraffic = form.variants.reduce((sum, v) => sum + v.trafficAllocation, 0)
    if (totalTraffic !== 100) {
      alert('Сумма распределения трафика должна быть 100%')
      setIsLoading(false)
      return
    }
    
    // Имитация сохранения
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    console.log('Creating AB test:', {
      ...form,
      agentId,
      status: startTest ? 'running' : 'draft'
    })
    
    setIsLoading(false)
    router.push(`/agents/${agentId}/ab-tests`)
  }

  const handleVariantChange = (index: number, field: keyof ABTestVariant, value: any) => {
    setForm(prev => ({
      ...prev,
      variants: prev.variants.map((v, i) => 
        i === index ? { ...v, [field]: value } : v
      )
    }))
  }

  const addVariant = () => {
    const newVariant: ABTestVariant = {
      id: `variant-${String.fromCharCode(65 + form.variants.length)}`.toLowerCase(),
      name: String.fromCharCode(65 + form.variants.length),
      versionId: '',
      trafficAllocation: 0
    }
    
    setForm(prev => ({
      ...prev,
      variants: [...prev.variants, newVariant]
    }))
  }

  const removeVariant = (index: number) => {
    if (form.variants.length <= 2) return
    
    setForm(prev => ({
      ...prev,
      variants: prev.variants.filter((_, i) => i !== index)
    }))
  }

  const redistributeTraffic = () => {
    const equalShare = Math.floor(100 / form.variants.length)
    const remainder = 100 - (equalShare * form.variants.length)
    
    setForm(prev => ({
      ...prev,
      variants: prev.variants.map((v, i) => ({
        ...v,
        trafficAllocation: equalShare + (i === 0 ? remainder : 0)
      }))
    }))
  }

  const getVersionName = (versionId: string) => {
    const version = versions.find(v => v.id === versionId)
    return version ? `v${version.version} - ${version.name}` : 'Выберите версию'
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Создание A/B теста
            </h1>
            <p className="text-gray-600">
              {agent.name} • Настройка эксперимента
            </p>
          </div>
        </div>
        
        <div className="flex space-x-3">
          <Button variant="outline" onClick={() => handleSave(false)} disabled={isLoading}>
            <Save className="h-4 w-4 mr-2" />
            Сохранить как черновик
          </Button>
          <Button onClick={() => handleSave(true)} disabled={isLoading}>
            <Play className="h-4 w-4 mr-2" />
            Создать и запустить
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Основная форма */}
        <div className="lg:col-span-2 space-y-6">
          {/* Основная информация */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <GitBranch className="h-5 w-5 mr-2" />
                Основная информация
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="name">Название теста *</Label>
                <Input
                  id="name"
                  placeholder="Например: Персонализация vs Стандарт"
                  value={form.name}
                  onChange={(e) => setForm(prev => ({ ...prev, name: e.target.value }))}
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="description">Описание</Label>
                <Textarea
                  id="description"
                  placeholder="Опишите цель и гипотезу теста..."
                  value={form.description}
                  onChange={(e) => setForm(prev => ({ ...prev, description: e.target.value }))}
                  className="mt-1"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>

          {/* Варианты теста */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center">
                  <Users className="h-5 w-5 mr-2" />
                  Варианты теста
                </CardTitle>
                <div className="flex space-x-2">
                  <Button size="sm" variant="outline" onClick={redistributeTraffic}>
                    Равномерно
                  </Button>
                  <Button size="sm" variant="outline" onClick={addVariant}>
                    <Plus className="h-4 w-4 mr-1" />
                    Вариант
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {form.variants.map((variant, index) => (
                <div key={variant.id} className="p-4 border rounded-lg">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <h4 className="font-medium">Вариант {variant.name}</h4>
                      {variant.isControl && (
                        <Badge className="bg-blue-100 text-blue-800 text-xs">
                          Контроль
                        </Badge>
                      )}
                    </div>
                    {form.variants.length > 2 && (
                      <Button size="sm" variant="outline" onClick={() => removeVariant(index)}>
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Версия агента *</Label>
                      <Select 
                        value={variant.versionId} 
                        onValueChange={(value) => handleVariantChange(index, 'versionId', value)}
                      >
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Выберите версию" />
                        </SelectTrigger>
                        <SelectContent>
                          {versions.map((version) => (
                            <SelectItem key={version.id} value={version.id}>
                              <div>
                                <div className="font-medium">v{version.version} - {version.name}</div>
                                <div className="text-xs text-gray-500">{version.description}</div>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label>Доля трафика (%)</Label>
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        value={variant.trafficAllocation}
                        onChange={(e) => handleVariantChange(index, 'trafficAllocation', parseInt(e.target.value) || 0)}
                        className="mt-1"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              <div className="p-3 bg-gray-50 rounded-lg">
                <div className="flex justify-between text-sm">
                  <span>Общее распределение:</span>
                  <span className={`font-medium ${
                    form.variants.reduce((sum, v) => sum + v.trafficAllocation, 0) === 100 
                      ? 'text-green-600' 
                      : 'text-red-600'
                  }`}>
                    {form.variants.reduce((sum, v) => sum + v.trafficAllocation, 0)}%
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Настройки теста */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="h-5 w-5 mr-2" />
                Настройки теста
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="duration">Длительность (дни)</Label>
                  <Input
                    id="duration"
                    type="number"
                    min="1"
                    max="90"
                    value={form.settings.duration}
                    onChange={(e) => setForm(prev => ({
                      ...prev,
                      settings: { ...prev.settings, duration: parseInt(e.target.value) || 14 }
                    }))}
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="minSample">Минимальная выборка</Label>
                  <Input
                    id="minSample"
                    type="number"
                    min="100"
                    value={form.settings.minSampleSize}
                    onChange={(e) => setForm(prev => ({
                      ...prev,
                      settings: { ...prev.settings, minSampleSize: parseInt(e.target.value) || 1000 }
                    }))}
                    className="mt-1"
                  />
                </div>
              </div>

              <div>
                <Label>Основная метрика *</Label>
                <Select 
                  value={form.settings.primaryMetric} 
                  onValueChange={(value: any) => setForm(prev => ({
                    ...prev,
                    settings: { ...prev.settings, primaryMetric: value }
                  }))}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {primaryMetrics.map((metric) => (
                      <SelectItem key={metric.id} value={metric.id}>
                        <div>
                          <div className="font-medium">{metric.name}</div>
                          <div className="text-xs text-gray-500">{metric.description}</div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label>Уровень доверия (%)</Label>
                <Select 
                  value={form.settings.confidenceLevel.toString()} 
                  onValueChange={(value) => setForm(prev => ({
                    ...prev,
                    settings: { ...prev.settings, confidenceLevel: parseInt(value) }
                  }))}
                >
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="90">90%</SelectItem>
                    <SelectItem value="95">95%</SelectItem>
                    <SelectItem value="99">99%</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex items-center justify-between">
                <div>
                  <Label>Автоматическая остановка</Label>
                  <p className="text-sm text-gray-600">
                    Остановить тест при достижении статистической значимости
                  </p>
                </div>
                <Switch
                  checked={form.settings.autoStop}
                  onCheckedChange={(checked) => setForm(prev => ({
                    ...prev,
                    settings: { ...prev.settings, autoStop: checked }
                  }))}
                />
              </div>

              <Separator />

              <div>
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <Label>Плавный запуск трафика</Label>
                    <p className="text-sm text-gray-600">
                      Постепенное увеличение доли трафика в тесте
                    </p>
                  </div>
                  <Switch
                    checked={form.settings.trafficRampUp.enabled}
                    onCheckedChange={(checked) => setForm(prev => ({
                      ...prev,
                      settings: { 
                        ...prev.settings, 
                        trafficRampUp: { ...prev.settings.trafficRampUp, enabled: checked }
                      }
                    }))}
                  />
                </div>

                {form.settings.trafficRampUp.enabled && (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pl-6">
                    <div>
                      <Label>Начальный процент (%)</Label>
                      <Input
                        type="number"
                        min="1"
                        max="50"
                        value={form.settings.trafficRampUp.startPercent}
                        onChange={(e) => setForm(prev => ({
                          ...prev,
                          settings: { 
                            ...prev.settings, 
                            trafficRampUp: { 
                              ...prev.settings.trafficRampUp, 
                              startPercent: parseInt(e.target.value) || 10 
                            }
                          }
                        }))}
                        className="mt-1"
                      />
                    </div>
                    
                    <div>
                      <Label>Дни развертывания</Label>
                      <Input
                        type="number"
                        min="1"
                        max="14"
                        value={form.settings.trafficRampUp.rampUpDays}
                        onChange={(e) => setForm(prev => ({
                          ...prev,
                          settings: { 
                            ...prev.settings, 
                            trafficRampUp: { 
                              ...prev.settings.trafficRampUp, 
                              rampUpDays: parseInt(e.target.value) || 3 
                            }
                          }
                        }))}
                        className="mt-1"
                      />
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Предпросмотр */}
        <div className="lg:col-span-1">
          <Card className="sticky top-6">
            <CardHeader>
              <CardTitle>Предпросмотр теста</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm text-gray-600">Название</p>
                <p className="font-medium">{form.name || 'Без названия'}</p>
              </div>

              <div>
                <p className="text-sm text-gray-600">Варианты</p>
                <div className="space-y-2">
                  {form.variants.map((variant) => (
                    <div key={variant.id} className="flex items-center justify-between text-sm">
                      <span>{variant.name}</span>
                      <span>{variant.trafficAllocation}%</span>
                    </div>
                  ))}
                </div>
              </div>

              <Separator />

              <div className="space-y-2">
                <h4 className="font-medium">Настройки</h4>
                <div className="text-sm space-y-1">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Длительность:</span>
                    <span>{form.settings.duration} дней</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Мин. выборка:</span>
                    <span>{form.settings.minSampleSize.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Уровень доверия:</span>
                    <span>{form.settings.confidenceLevel}%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Автостоп:</span>
                    <span>{form.settings.autoStop ? 'Да' : 'Нет'}</span>
                  </div>
                </div>
              </div>

              <div className="p-3 bg-blue-50 rounded-lg">
                <div className="flex">
                  <AlertCircle className="h-4 w-4 text-blue-400 mr-2 flex-shrink-0 mt-0.5" />
                  <div>
                    <h4 className="text-sm font-medium text-blue-900">Совет</h4>
                    <p className="text-sm text-blue-700 mt-1">
                      Убедитесь, что у вас достаточно трафика для получения 
                      статистически значимых результатов
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/agents/[id]/ab-tests/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Plus,
  Play,
  Pause,
  Square,
  BarChart3,
  TrendingUp,
  TrendingDown,
  Target,
  Users,
  Clock,
  CheckCircle,
  AlertTriangle,
  Settings,
  GitBranch
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { mockAgents, mockABTests, mockAgentVersions } from '@/lib/mock-data'
import { ABTest } from '@/lib/types'

export default function AgentABTestsPage() {
  const router = useRouter()
  const params = useParams()
  const agentId = params.id as string
  
  const agent = mockAgents.find(a => a.id === agentId)
  const abTests = mockABTests.filter(t => t.agentId === agentId)
  const versions = mockAgentVersions.filter(v => v.agentId === agentId)
  
  if (!agent) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Агент не найден</p>
        <Button className="mt-4" onClick={() => router.back()}>
          Назад к списку агентов
        </Button>
      </div>
    )
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'running':
        return <Badge className="bg-green-100 text-green-800">Активен</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершён</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getMetricIcon = (metric: string) => {
    switch (metric) {
      case 'conversion_rate':
        return <Target className="h-4 w-4" />
      case 'success_rate':
        return <CheckCircle className="h-4 w-4" />
      case 'avg_call_duration':
        return <Clock className="h-4 w-4" />
      case 'sms_consent_rate':
        return <Users className="h-4 w-4" />
      default:
        return <BarChart3 className="h-4 w-4" />
    }
  }

  const getMetricName = (metric: string) => {
    const names: Record<string, string> = {
      'conversion_rate': 'Конверсия',
      'success_rate': 'Успешность',
      'avg_call_duration': 'Длительность звонка',
      'sms_consent_rate': 'Согласие на SMS'
    }
    return names[metric] || metric
  }

  const handleCreateABTest = () => {
    router.push(`/agents/${agentId}/ab-tests/new`)
  }

  const handleViewABTest = (testId: string) => {
    router.push(`/agents/${agentId}/ab-tests/${testId}`)
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              A/B тестирование
            </h1>
            <p className="text-gray-600">
              {agent.name} • Оптимизация агента
            </p>
          </div>
        </div>
        
        <Button onClick={handleCreateABTest}>
          <Plus className="h-4 w-4 mr-2" />
          Создать A/B тест
        </Button>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <GitBranch className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего тестов</p>
                <p className="text-2xl font-bold text-gray-900">{abTests.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'running').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Завершённые</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'completed').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <TrendingUp className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Версий</p>
                <p className="text-2xl font-bold text-gray-900">{versions.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Список A/B тестов */}
      <div className="space-y-6">
        {abTests.length > 0 ? (
          abTests.map((test) => (
            <Card key={test.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="text-lg">{test.name}</CardTitle>
                    <p className="text-sm text-gray-600 mt-1">{test.description}</p>
                  </div>
                  <div className="flex items-center space-x-3">
                    {getStatusBadge(test.status)}
                    <Button size="sm" variant="outline" onClick={() => handleViewABTest(test.id)}>
                      Подробнее
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="overview" className="space-y-4">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="overview">Обзор</TabsTrigger>
                    <TabsTrigger value="variants">Варианты</TabsTrigger>
                    <TabsTrigger value="results">Результаты</TabsTrigger>
                  </TabsList>

                  <TabsContent value="overview" className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          {getMetricIcon(test.settings.primaryMetric)}
                          <span className="text-sm font-medium">Основная метрика</span>
                        </div>
                        <p className="text-lg font-bold">
                          {getMetricName(test.settings.primaryMetric)}
                        </p>
                      </div>
                      
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Clock className="h-4 w-4" />
                          <span className="text-sm font-medium">Длительность</span>
                        </div>
                        <p className="text-lg font-bold">{test.settings.duration} дней</p>
                      </div>
                      
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Users className="h-4 w-4" />
                          <span className="text-sm font-medium">Звонков</span>
                        </div>
                        <p className="text-lg font-bold">{test.metrics.totalCalls.toLocaleString()}</p>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="variants" className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {test.variants.map((variant) => {
                        const metrics = test.metrics.variantMetrics[variant.id]
                        const significance = test.metrics.statisticalSignificance[variant.id]
                        
                        return (
                          <Card key={variant.id} className={`${variant.isControl ? 'ring-2 ring-blue-200' : ''}`}>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between mb-3">
                                <h4 className="font-medium">{variant.name}</h4>
                                <div className="flex items-center space-x-2">
                                  {variant.isControl && (
                                    <Badge className="bg-blue-100 text-blue-800 text-xs">
                                      Контроль
                                    </Badge>
                                  )}
                                  <Badge variant="outline" className="text-xs">
                                    {variant.trafficAllocation}%
                                  </Badge>
                                </div>
                              </div>
                              
                              {metrics && (
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Звонков:</span>
                                    <span className="font-medium">{metrics.calls}</span>
                                  </div>
                                  <div className="flex justify-between text-sm">
                                    <span>Конверсия:</span>
                                    <span className="font-medium">{metrics.conversionRate}%</span>
                                  </div>
                                  <div className="flex justify-between text-sm">
                                    <span>SMS согласие:</span>
                                    <span className="font-medium">{metrics.smsConsentRate}%</span>
                                  </div>
                                  
                                  {significance && (
                                    <div className={`p-2 rounded text-xs ${
                                      significance.isSignificant 
                                        ? 'bg-green-50 text-green-800' 
                                        : 'bg-gray-50 text-gray-600'
                                    }`}>
                                      {significance.isSignificant ? (
                                        <div className="flex items-center space-x-1">
                                          <CheckCircle className="h-3 w-3" />
                                          <span>Статистически значим</span>
                                          <span className="font-medium">
                                            {significance.uplift > 0 ? '+' : ''}{significance.uplift}%
                                          </span>
                                        </div>
                                      ) : (
                                        <div className="flex items-center space-x-1">
                                          <AlertTriangle className="h-3 w-3" />
                                          <span>Недостаточно данных</span>
                                        </div>
                                      )}
                                    </div>
                                  )}
                                </div>
                              )}
                            </CardContent>
                          </Card>
                        )
                      })}
                    </div>
                  </TabsContent>

                  <TabsContent value="results" className="space-y-4">
                    {test.metrics.winner ? (
                      <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <CheckCircle className="h-5 w-5 text-green-600" />
                          <h4 className="font-medium text-green-900">Найден победитель!</h4>
                        </div>
                        <p className="text-sm text-green-800">
                          Вариант {test.variants.find(v => v.id === test.metrics.winner)?.name} 
                          показал лучшие результаты с улучшением на{' '}
                          <span className="font-medium">
                            {test.metrics.statisticalSignificance[test.metrics.winner]?.uplift}%
                          </span>
                        </p>
                      </div>
                    ) : (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Clock className="h-5 w-5 text-yellow-600" />
                          <h4 className="font-medium text-yellow-900">Тест продолжается</h4>
                        </div>
                        <p className="text-sm text-yellow-800">
                          Необходимо больше данных для определения статистически значимого результата
                        </p>
                      </div>
                    )}

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Card>
                        <CardHeader>
                          <CardTitle className="text-sm">Прогресс теста</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-3">
                            <div>
                              <div className="flex justify-between text-sm mb-1">
                                <span>Размер выборки</span>
                                <span>{test.metrics.totalCalls} / {test.settings.minSampleSize}</span>
                              </div>
                              <Progress 
                                value={Math.min(100, (test.metrics.totalCalls / test.settings.minSampleSize) * 100)} 
                                className="h-2"
                              />
                            </div>
                            
                            {test.startedAt && (
                              <div>
                                <div className="flex justify-between text-sm mb-1">
                                  <span>Время выполнения</span>
                                  <span>
                                    {Math.ceil((Date.now() - test.startedAt.getTime()) / (1000 * 60 * 60 * 24))} / {test.settings.duration} дней
                                  </span>
                                </div>
                                <Progress 
                                  value={Math.min(100, ((Date.now() - test.startedAt.getTime()) / (1000 * 60 * 60 * 24 * test.settings.duration)) * 100)} 
                                  className="h-2"
                                />
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>

                      <Card>
                        <CardHeader>
                          <CardTitle className="text-sm">Настройки теста</CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span>Уровень доверия:</span>
                              <span>{test.settings.confidenceLevel}%</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Автостоп:</span>
                              <span>{test.settings.autoStop ? 'Включён' : 'Отключён'}</span>
                            </div>
                            <div className="flex justify-between">
                              <span>Плавный запуск:</span>
                              <span>{test.settings.trafficRampUp.enabled ? 'Включён' : 'Отключён'}</span>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="py-12">
              <div className="text-center">
                <GitBranch className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Нет A/B тестов
                </h3>
                <p className="text-gray-500 mb-6">
                  Создайте первый A/B тест для оптимизации агента
                </p>
                <Button onClick={handleCreateABTest}>
                  <Plus className="h-4 w-4 mr-2" />
                  Создать A/B тест
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/agents/[id]/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Edit,
  Copy,
  Play,
  Pause,
  Archive,
  Settings,
  Volume2,
  MessageSquare,
  Phone,
  Clock,
  TrendingUp,
  Calendar,
  Users,
  BarChart,
  CheckCircle,
  XCircle,
  AlertCircle,
  Download,
  Upload,
  FileText,
  FlaskConical
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Progress } from '@/components/ui/progress'
import { Separator } from '@/components/ui/separator'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { mockAgents, mockVoices } from '@/lib/mock-data'
import { BaseType } from '@/lib/types'

interface CampaignHistory {
  id: string
  name: string
  baseType: BaseType
  startDate: Date
  endDate?: Date
  status: 'active' | 'completed' | 'paused'
  totalCalls: number
  successfulCalls: number
  conversionRate: number
  avgCallDuration: number
}

const mockCampaignHistory: CampaignHistory[] = [
  {
    id: 'camp-1',
    name: 'Новогодняя акция 2025',
    baseType: 'registration',
    startDate: new Date('2025-01-01'),
    endDate: new Date('2025-01-15'),
    status: 'completed',
    totalCalls: 5432,
    successfulCalls: 2105,
    conversionRate: 38.7,
    avgCallDuration: 180
  },
  {
    id: 'camp-2',
    name: 'Реактивация клиентов Q4',
    baseType: 'reactivation',
    startDate: new Date('2024-12-01'),
    status: 'active',
    totalCalls: 3210,
    successfulCalls: 987,
    conversionRate: 30.7,
    avgCallDuration: 145
  },
  {
    id: 'camp-3',
    name: 'Работа с недозвонами',
    baseType: 'no_answer',
    startDate: new Date('2024-11-15'),
    endDate: new Date('2024-12-30'),
    status: 'completed',
    totalCalls: 8765,
    successfulCalls: 3506,
    conversionRate: 40.0,
    avgCallDuration: 210
  }
]

export default function AgentDetailsPage() {
  const router = useRouter()
  const params = useParams()
  const agentId = params.id as string
  
  const agent = mockAgents.find(a => a.id === agentId) || mockAgents[0]
  const voice = mockVoices.find(v => v.id === agent.voiceId)
  
  const [activeTab, setActiveTab] = useState('overview')
  const [isEditing, setIsEditing] = useState(false)
  const [agentPrompt, setAgentPrompt] = useState(agent.prompts[0]?.prompt || '')
  
  const totalCalls = mockCampaignHistory.reduce((sum, c) => sum + c.totalCalls, 0)
  const totalSuccess = mockCampaignHistory.reduce((sum, c) => sum + c.successfulCalls, 0)
  const avgConversion = totalCalls > 0 ? (totalSuccess / totalCalls * 100).toFixed(1) : '0'
  const activeCampaigns = mockCampaignHistory.filter(c => c.status === 'active').length
  
  const getBaseTypeBadge = (baseType: BaseType) => {
    switch (baseType) {
      case 'registration':
        return <Badge className="bg-blue-100 text-blue-800">Регистрация</Badge>
      case 'no_answer':
        return <Badge className="bg-orange-100 text-orange-800">Недозвон</Badge>
      case 'refusals':
        return <Badge className="bg-red-100 text-red-800">Отказники</Badge>
      case 'reactivation':
        return <Badge className="bg-purple-100 text-purple-800">Реактивация</Badge>
      default:
        return <Badge>{baseType}</Badge>
    }
  }

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <div className="flex items-center space-x-3">
              <h1 className="text-2xl font-bold text-gray-900">{agent.name}</h1>
              {getBaseTypeBadge(agent.baseType)}
              <Badge className={agent.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}>
                {agent.status === 'active' ? 'Активен' : 'Неактивен'}
              </Badge>
            </div>
            <p className="text-gray-600 mt-1">{agent.description}</p>
          </div>
        </div>
        
        <div className="flex space-x-3">
          <Button variant="outline" onClick={() => router.push(`/agents/${agentId}/test`)}>
            <Phone className="h-4 w-4 mr-2" />
            Тестировать
          </Button>
          <Button variant="outline" onClick={() => router.push(`/agents/${agentId}/prompts`)}>
            <Edit className="h-4 w-4 mr-2" />
            Редактировать промты
          </Button>
          <Button variant="outline">
            <Archive className="h-4 w-4 mr-2" />
            Архивировать
          </Button>
        </div>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <BarChart className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего кампаний</p>
                <p className="text-2xl font-bold text-gray-900">{mockCampaignHistory.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные</p>
                <p className="text-2xl font-bold text-gray-900">{activeCampaigns}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <Phone className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего звонков</p>
                <p className="text-2xl font-bold text-gray-900">{totalCalls.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Успешных</p>
                <p className="text-2xl font-bold text-gray-900">{totalSuccess.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <TrendingUp className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Конверсия</p>
                <p className="text-2xl font-bold text-gray-900">{avgConversion}%</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Табы */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="overview">Обзор</TabsTrigger>
          <TabsTrigger value="history">История кампаний</TabsTrigger>
          <TabsTrigger value="prompts">Промты и инструкции</TabsTrigger>
          <TabsTrigger value="ab-tests">A/B тесты</TabsTrigger>
          <TabsTrigger value="settings">Настройки</TabsTrigger>
        </TabsList>

        {/* Обзор */}
        <TabsContent value="overview">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Информация об агенте</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label className="text-sm text-gray-600">ID агента</Label>
                  <p className="font-mono font-medium">{agent.id}</p>
                </div>
                <div>
                  <Label className="text-sm text-gray-600">Версия</Label>
                  <p className="font-medium">v{agent.version}</p>
                </div>
                <div>
                  <Label className="text-sm text-gray-600">Голос</Label>
                  <div className="flex items-center space-x-2 mt-1">
                    <Volume2 className="h-4 w-4 text-gray-400" />
                    <span className="font-medium">{voice?.name || 'Не назначен'}</span>
                  </div>
                </div>
                <div>
                  <Label className="text-sm text-gray-600">Роль</Label>
                  <p className="font-medium">
                    {agent.role === 'registration_agent' ? 'Агент регистрации' :
                     agent.role === 'reactivation_agent' ? 'Агент реактивации' :
                     agent.role === 'cold_calling_agent' ? 'Холодные звонки' : agent.role}
                  </p>
                </div>
                <div>
                  <Label className="text-sm text-gray-600">Количество промтов</Label>
                  <p className="font-medium">{agent.prompts.length}</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Производительность</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between mb-2">
                    <span className="text-sm text-gray-600">Средняя конверсия</span>
                    <span className="font-medium">{avgConversion}%</span>
                  </div>
                  <Progress value={parseFloat(avgConversion)} className="h-2" />
                </div>
                
                <div>
                  <div className="flex justify-between mb-2">
                    <span className="text-sm text-gray-600">Средняя длительность</span>
                    <span className="font-medium">3:25</span>
                  </div>
                  <Progress value={65} className="h-2" />
                </div>

                <div>
                  <div className="flex justify-between mb-2">
                    <span className="text-sm text-gray-600">Успешность дозвона</span>
                    <span className="font-medium">72%</span>
                  </div>
                  <Progress value={72} className="h-2" />
                </div>

                <Separator />

                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Лучший результат</span>
                    <span className="font-medium text-green-600">45.2%</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">Худший результат</span>
                    <span className="font-medium text-red-600">28.5%</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* История кампаний */}
        <TabsContent value="history">
          <Card>
            <CardHeader>
              <CardTitle>История использования в кампаниях</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Кампания
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Тип базы
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Период
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Статус
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Звонков
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Конверсия
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ср. длительность
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Действия
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {mockCampaignHistory.map((campaign) => (
                      <tr key={campaign.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {campaign.name}
                            </div>
                            <div className="text-xs text-gray-500">
                              ID: {campaign.id}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {getBaseTypeBadge(campaign.baseType)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {campaign.startDate.toLocaleDateString()}
                          </div>
                          <div className="text-xs text-gray-500">
                            {campaign.endDate ? `до ${campaign.endDate.toLocaleDateString()}` : 'В процессе'}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <Badge className={
                            campaign.status === 'active' ? 'bg-green-100 text-green-800' :
                            campaign.status === 'completed' ? 'bg-blue-100 text-blue-800' :
                            'bg-yellow-100 text-yellow-800'
                          }>
                            {campaign.status === 'active' ? 'Активна' :
                             campaign.status === 'completed' ? 'Завершена' : 'Пауза'}
                          </Badge>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">
                            {campaign.totalCalls.toLocaleString()}
                          </div>
                          <div className="text-xs text-gray-500">
                            {campaign.successfulCalls.toLocaleString()} успешных
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <span className="text-sm font-medium text-gray-900">
                              {campaign.conversionRate}%
                            </span>
                            {campaign.conversionRate > 35 ? (
                              <TrendingUp className="h-4 w-4 text-green-500 ml-2" />
                            ) : (
                              <AlertCircle className="h-4 w-4 text-yellow-500 ml-2" />
                            )}
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {formatDuration(campaign.avgCallDuration)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => router.push(`/companies/${campaign.id}`)}
                          >
                            Открыть
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Промты и инструкции */}
        <TabsContent value="prompts">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Системный промт агента</CardTitle>
                <div className="flex space-x-2">
                  <Button variant="outline" size="sm">
                    <Download className="h-4 w-4 mr-2" />
                    Экспорт
                  </Button>
                  <Button variant="outline" size="sm">
                    <Upload className="h-4 w-4 mr-2" />
                    Импорт
                  </Button>
                  <Button 
                    size="sm"
                    onClick={() => setIsEditing(!isEditing)}
                  >
                    {isEditing ? (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Сохранить
                      </>
                    ) : (
                      <>
                        <Edit className="h-4 w-4 mr-2" />
                        Редактировать
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="agent-prompt">Основная инструкция</Label>
                <Textarea
                  id="agent-prompt"
                  value={agentPrompt}
                  onChange={(e) => setAgentPrompt(e.target.value)}
                  disabled={!isEditing}
                  className="mt-2 min-h-[400px] font-mono text-sm"
                  placeholder="Введите инструкции для агента..."
                />
              </div>
              
              {agent.prompts.length > 1 && (
                <>
                  <Separator />
                  <div>
                    <Label>Дополнительные промты</Label>
                    <div className="space-y-2 mt-2">
                      {agent.prompts.slice(1).map((prompt, index) => (
                        <div key={index} className="p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium text-sm">Промт {index + 2}</span>
                            <Button variant="ghost" size="sm">
                              <Edit className="h-3 w-3" />
                            </Button>
                          </div>
                          <p className="text-sm text-gray-600 line-clamp-2">
                            {prompt.prompt}
                          </p>
                        </div>
                      ))}
                    </div>
                  </div>
                </>
              )}

              <div className="flex items-center space-x-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <AlertCircle className="h-4 w-4 text-blue-600" />
                <p className="text-sm text-blue-700">
                  Изменения в промтах применятся только к новым кампаниям
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* A/B тесты */}
        <TabsContent value="ab-tests">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>A/B тесты с участием агента</CardTitle>
                <Button>
                  <FlaskConical className="h-4 w-4 mr-2" />
                  Создать тест
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="p-4 border rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <h4 className="font-medium">Тест приветствия v2</h4>
                      <p className="text-sm text-gray-600 mt-1">
                        Сравнение стандартного и персонализированного приветствия
                      </p>
                    </div>
                    <Badge className="bg-green-100 text-green-800">Активен</Badge>
                  </div>
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">Кампаний:</span>
                      <p className="font-medium">3</p>
                    </div>
                    <div>
                      <span className="text-gray-600">Звонков:</span>
                      <p className="font-medium">1,234</p>
                    </div>
                    <div>
                      <span className="text-gray-600">Победитель:</span>
                      <p className="font-medium text-green-600">Вариант B (+12%)</p>
                    </div>
                  </div>
                </div>

                <div className="p-4 border rounded-lg">
                  <div className="flex items-center justify-between mb-3">
                    <div>
                      <h4 className="font-medium">Тест голосов</h4>
                      <p className="text-sm text-gray-600 mt-1">
                        Мужской vs женский голос для целевой аудитории
                      </p>
                    </div>
                    <Badge className="bg-blue-100 text-blue-800">Завершен</Badge>
                  </div>
                  <div className="grid grid-cols-3 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">Кампаний:</span>
                      <p className="font-medium">2</p>
                    </div>
                    <div>
                      <span className="text-gray-600">Звонков:</span>
                      <p className="font-medium">892</p>
                    </div>
                    <div>
                      <span className="text-gray-600">Победитель:</span>
                      <p className="font-medium text-green-600">Вариант A (+8%)</p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Настройки */}
        <TabsContent value="settings">
          <Card>
            <CardHeader>
              <CardTitle>Настройки агента</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">Автоматическое обучение</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Агент будет автоматически улучшаться на основе результатов
                    </p>
                  </div>
                  <Button variant="outline" size="sm">
                    Включено
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">Запись разговоров</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Сохранять аудиозаписи для анализа качества
                    </p>
                  </div>
                  <Button variant="outline" size="sm">
                    Включено
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">Транскрибация</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Автоматически преобразовывать речь в текст
                    </p>
                  </div>
                  <Button variant="outline" size="sm">
                    Включено
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div>
                    <h4 className="font-medium">Уведомления об ошибках</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Получать оповещения о проблемах с агентом
                    </p>
                  </div>
                  <Button variant="outline" size="sm">
                    Настроить
                  </Button>
                </div>
              </div>

              <Separator />

              <div className="flex justify-end space-x-3">
                <Button variant="outline">Отмена</Button>
                <Button>Сохранить изменения</Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="src/app/settings/consent/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  ArrowLeft,
  FileCheck,
  CheckCircle,
  XCircle,
  AlertCircle,
  Download,
  Upload,
  Search,
  Filter,
  Calendar,
  Shield,
  FileText,
  User,
  Clock,
  Eye
} from 'lucide-react'

interface ConsentRecord {
  id: string
  phone: string
  name: string
  consentSms: boolean
  consentCall: boolean
  consentData: boolean
  scriptVersion: string
  offertaVersion: string
  timestamp: string
  campaign: string
  source: 'call' | 'sms' | 'web' | 'import'
  ipAddress?: string
  userAgent?: string
}

const mockConsents: ConsentRecord[] = [
  {
    id: 'cns_1',
    phone: '+7 (900) 123-45-67',
    name: 'Иванов Иван Иванович',
    consentSms: true,
    consentCall: true,
    consentData: true,
    scriptVersion: 'v2.1',
    offertaVersion: 'Оферта от 01.01.2024',
    timestamp: '2024-01-09 10:45:23',
    campaign: 'Новогодняя кампания',
    source: 'call',
    ipAddress: '192.168.1.1'
  },
  {
    id: 'cns_2',
    phone: '+7 (900) 234-56-78',
    name: 'Петрова Мария Сергеевна',
    consentSms: true,
    consentCall: false,
    consentData: true,
    scriptVersion: 'v2.1',
    offertaVersion: 'Оферта от 01.01.2024',
    timestamp: '2024-01-09 09:30:15',
    campaign: 'Реактивация клиентов',
    source: 'sms',
    ipAddress: '10.0.0.5'
  },
  {
    id: 'cns_3',
    phone: '+7 (900) 345-67-89',
    name: 'Сидоров Алексей Петрович',
    consentSms: false,
    consentCall: true,
    consentData: true,
    scriptVersion: 'v1.9',
    offertaVersion: 'Оферта от 15.12.2023',
    timestamp: '2024-01-08 18:20:00',
    campaign: 'Обзвон базы',
    source: 'call'
  },
  {
    id: 'cns_4',
    phone: '+7 (900) 456-78-90',
    name: 'Козлова Елена Викторовна',
    consentSms: true,
    consentCall: true,
    consentData: true,
    scriptVersion: 'v2.1',
    offertaVersion: 'Оферта от 01.01.2024',
    timestamp: '2024-01-08 14:15:30',
    campaign: 'VIP сегмент',
    source: 'web',
    userAgent: 'Mozilla/5.0...'
  },
  {
    id: 'cns_5',
    phone: '+7 (900) 567-89-01',
    name: 'Новиков Дмитрий Андреевич',
    consentSms: false,
    consentCall: false,
    consentData: false,
    scriptVersion: 'v2.0',
    offertaVersion: 'Оферта от 01.01.2024',
    timestamp: '2024-01-08 11:00:00',
    campaign: 'Холодные звонки',
    source: 'call'
  }
]

const stats = {
  total: 12456,
  withSmsConsent: 8934,
  withCallConsent: 10234,
  withDataConsent: 11890,
  todayAdded: 234
}

export default function ConsentPage() {
  const router = useRouter()
  const [consents, setConsents] = useState<ConsentRecord[]>(mockConsents)
  const [searchQuery, setSearchQuery] = useState('')
  const [filterConsent, setFilterConsent] = useState<string>('all')
  const [filterSource, setFilterSource] = useState<string>('all')
  const [selectedConsents, setSelectedConsents] = useState<string[]>([])

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedConsents(consents.map(c => c.id))
    } else {
      setSelectedConsents([])
    }
  }

  const handleSelectConsent = (id: string, checked: boolean) => {
    if (checked) {
      setSelectedConsents([...selectedConsents, id])
    } else {
      setSelectedConsents(selectedConsents.filter(cId => cId !== id))
    }
  }

  const getConsentBadges = (consent: ConsentRecord) => {
    return (
      <div className="flex space-x-1">
        {consent.consentSms && (
          <Badge className="bg-green-100 text-green-800 text-xs">SMS</Badge>
        )}
        {consent.consentCall && (
          <Badge className="bg-blue-100 text-blue-800 text-xs">Звонки</Badge>
        )}
        {consent.consentData && (
          <Badge className="bg-purple-100 text-purple-800 text-xs">Данные</Badge>
        )}
        {!consent.consentSms && !consent.consentCall && !consent.consentData && (
          <Badge className="bg-gray-100 text-gray-800 text-xs">Нет согласий</Badge>
        )}
      </div>
    )
  }

  const getSourceIcon = (source: string) => {
    switch (source) {
      case 'call':
        return <Badge variant="outline" className="text-xs"><User className="h-3 w-3 mr-1" />Звонок</Badge>
      case 'sms':
        return <Badge variant="outline" className="text-xs"><FileText className="h-3 w-3 mr-1" />SMS</Badge>
      case 'web':
        return <Badge variant="outline" className="text-xs"><Shield className="h-3 w-3 mr-1" />Web</Badge>
      case 'import':
        return <Badge variant="outline" className="text-xs"><Upload className="h-3 w-3 mr-1" />Импорт</Badge>
      default:
        return <Badge variant="outline" className="text-xs">{source}</Badge>
    }
  }

  const filteredConsents = consents.filter(consent => {
    if (searchQuery && !consent.phone.includes(searchQuery) && !consent.name.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false
    }
    if (filterConsent === 'with_sms' && !consent.consentSms) return false
    if (filterConsent === 'without_sms' && consent.consentSms) return false
    if (filterConsent === 'no_consent' && (consent.consentSms || consent.consentCall || consent.consentData)) return false
    if (filterSource !== 'all' && consent.source !== filterSource) return false
    return true
  })

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Реестр согласий</h1>
            <p className="text-gray-600">
              Управление согласиями на обработку данных и коммуникации
            </p>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline">
              <Upload className="h-4 w-4 mr-2" />
              Импорт
            </Button>
            <Button variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Экспорт
            </Button>
          </div>
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Всего записей</p>
                <p className="text-2xl font-bold">{stats.total.toLocaleString()}</p>
              </div>
              <FileCheck className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">SMS согласия</p>
                <p className="text-2xl font-bold text-green-600">{stats.withSmsConsent.toLocaleString()}</p>
                <p className="text-xs text-gray-500">{Math.round(stats.withSmsConsent / stats.total * 100)}%</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Звонки</p>
                <p className="text-2xl font-bold text-blue-600">{stats.withCallConsent.toLocaleString()}</p>
                <p className="text-xs text-gray-500">{Math.round(stats.withCallConsent / stats.total * 100)}%</p>
              </div>
              <CheckCircle className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Данные</p>
                <p className="text-2xl font-bold text-purple-600">{stats.withDataConsent.toLocaleString()}</p>
                <p className="text-xs text-gray-500">{Math.round(stats.withDataConsent / stats.total * 100)}%</p>
              </div>
              <CheckCircle className="h-8 w-8 text-purple-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Сегодня</p>
                <p className="text-2xl font-bold">+{stats.todayAdded}</p>
              </div>
              <Calendar className="h-8 w-8 text-emerald-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg">Фильтры</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label htmlFor="search">Поиск</Label>
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="search"
                  placeholder="Телефон или имя..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <div>
              <Label htmlFor="consent-filter">Согласия</Label>
              <Select value={filterConsent} onValueChange={setFilterConsent}>
                <SelectTrigger id="consent-filter">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все записи</SelectItem>
                  <SelectItem value="with_sms">Есть SMS согласие</SelectItem>
                  <SelectItem value="without_sms">Нет SMS согласия</SelectItem>
                  <SelectItem value="no_consent">Нет согласий</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="source-filter">Источник</Label>
              <Select value={filterSource} onValueChange={setFilterSource}>
                <SelectTrigger id="source-filter">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все источники</SelectItem>
                  <SelectItem value="call">Звонок</SelectItem>
                  <SelectItem value="sms">SMS</SelectItem>
                  <SelectItem value="web">Web форма</SelectItem>
                  <SelectItem value="import">Импорт</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Consents Table */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Записи согласий</CardTitle>
            <div className="flex items-center space-x-2">
              {selectedConsents.length > 0 && (
                <>
                  <Badge variant="outline">{selectedConsents.length} выбрано</Badge>
                  <Button variant="outline" size="sm">
                    Экспортировать выбранные
                  </Button>
                </>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedConsents.length === filteredConsents.length && filteredConsents.length > 0}
                    onCheckedChange={handleSelectAll}
                  />
                </TableHead>
                <TableHead>Телефон</TableHead>
                <TableHead>Имя</TableHead>
                <TableHead>Согласия</TableHead>
                <TableHead>Версии документов</TableHead>
                <TableHead>Источник</TableHead>
                <TableHead>Кампания</TableHead>
                <TableHead>Дата и время</TableHead>
                <TableHead className="text-right">Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredConsents.map((consent) => (
                <TableRow key={consent.id}>
                  <TableCell>
                    <Checkbox
                      checked={selectedConsents.includes(consent.id)}
                      onCheckedChange={(checked) => handleSelectConsent(consent.id, checked as boolean)}
                    />
                  </TableCell>
                  <TableCell className="font-mono">{consent.phone}</TableCell>
                  <TableCell>{consent.name}</TableCell>
                  <TableCell>{getConsentBadges(consent)}</TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      <div className="text-xs text-gray-600">Скрипт: {consent.scriptVersion}</div>
                      <div className="text-xs text-gray-600">{consent.offertaVersion}</div>
                    </div>
                  </TableCell>
                  <TableCell>{getSourceIcon(consent.source)}</TableCell>
                  <TableCell>{consent.campaign}</TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1">
                      <Clock className="h-3 w-3 text-gray-400" />
                      <span className="text-sm">{consent.timestamp}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="ghost" size="sm">
                      <Eye className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/settings/dnc/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'
import { Switch } from '@/components/ui/switch'
import { Textarea } from '@/components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog'
import {
  ArrowLeft,
  Ban,
  Upload,
  Download,
  Search,
  Plus,
  Trash2,
  AlertTriangle,
  Shield,
  Globe,
  Building,
  Clock,
  UserX
} from 'lucide-react'

interface DNCRecord {
  id: string
  phone: string
  reason: 'user_refuse' | 'complaint' | 'invalid' | 'spam_risk' | 'regulatory'
  scope: 'global' | 'campaign'
  campaign?: string
  addedDate: string
  addedBy: string
  comment?: string
  expiresAt?: string
}

const mockDNCRecords: DNCRecord[] = [
  {
    id: 'dnc_1',
    phone: '+7 (900) 111-22-33',
    reason: 'user_refuse',
    scope: 'global',
    addedDate: '2024-01-09 10:00:00',
    addedBy: 'Система',
    comment: 'Клиент попросил не звонить'
  },
  {
    id: 'dnc_2',
    phone: '+7 (900) 222-33-44',
    reason: 'complaint',
    scope: 'global',
    addedDate: '2024-01-08 15:30:00',
    addedBy: 'Иванов И.И.',
    comment: 'Жалоба в Роскомнадзор'
  },
  {
    id: 'dnc_3',
    phone: '+7 (900) 333-44-55',
    reason: 'invalid',
    scope: 'campaign',
    campaign: 'Новогодняя кампания',
    addedDate: '2024-01-07 12:00:00',
    addedBy: 'Система',
    comment: 'Несуществующий номер'
  },
  {
    id: 'dnc_4',
    phone: '+7 (900) 444-55-66',
    reason: 'spam_risk',
    scope: 'global',
    addedDate: '2024-01-06 09:00:00',
    addedBy: 'AI анализатор',
    comment: 'Высокий риск спам-жалоб'
  },
  {
    id: 'dnc_5',
    phone: '+7 (900) 555-66-77',
    reason: 'regulatory',
    scope: 'global',
    addedDate: '2024-01-05 14:00:00',
    addedBy: 'Юридический отдел',
    comment: 'Запрет по решению суда',
    expiresAt: '2025-01-05'
  }
]

const stats = {
  total: 892,
  global: 567,
  campaign: 325,
  addedToday: 12,
  expiringSoon: 8
}

export default function DNCPage() {
  const router = useRouter()
  const [records, setRecords] = useState<DNCRecord[]>(mockDNCRecords)
  const [searchQuery, setSearchQuery] = useState('')
  const [filterReason, setFilterReason] = useState<string>('all')
  const [filterScope, setFilterScope] = useState<string>('all')
  const [showAddDialog, setShowAddDialog] = useState(false)
  const [selectedRecords, setSelectedRecords] = useState<string[]>([])
  const [bulkImportText, setBulkImportText] = useState('')

  const handleDeleteRecord = (id: string) => {
    setRecords(prev => prev.filter(r => r.id !== id))
  }

  const handleBulkDelete = () => {
    setRecords(prev => prev.filter(r => !selectedRecords.includes(r.id)))
    setSelectedRecords([])
  }

  const getReasonBadge = (reason: string) => {
    switch (reason) {
      case 'user_refuse':
        return <Badge className="bg-yellow-100 text-yellow-800">Отказ клиента</Badge>
      case 'complaint':
        return <Badge className="bg-red-100 text-red-800">Жалоба</Badge>
      case 'invalid':
        return <Badge className="bg-gray-100 text-gray-800">Недействителен</Badge>
      case 'spam_risk':
        return <Badge className="bg-orange-100 text-orange-800">Спам-риск</Badge>
      case 'regulatory':
        return <Badge className="bg-purple-100 text-purple-800">Регуляторный</Badge>
      default:
        return <Badge>{reason}</Badge>
    }
  }

  const getScopeIcon = (scope: string) => {
    if (scope === 'global') {
      return <Globe className="h-4 w-4 text-red-500" />
    }
    return <Building className="h-4 w-4 text-blue-500" />
  }

  const filteredRecords = records.filter(record => {
    if (searchQuery && !record.phone.includes(searchQuery)) return false
    if (filterReason !== 'all' && record.reason !== filterReason) return false
    if (filterScope !== 'all' && record.scope !== filterScope) return false
    return true
  })

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Черные списки / DNC</h1>
            <p className="text-gray-600">
              Управление исключениями и запрещенными номерами
            </p>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline" onClick={() => setShowAddDialog(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Добавить номер
            </Button>
            <Button variant="outline">
              <Upload className="h-4 w-4 mr-2" />
              Массовый импорт
            </Button>
            <Button variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Экспорт
            </Button>
          </div>
        </div>
      </div>

      {/* Alert */}
      <Card className="mb-6 border-yellow-200 bg-yellow-50">
        <CardContent className="p-4">
          <div className="flex items-start space-x-3">
            <AlertTriangle className="h-5 w-5 text-yellow-600 mt-0.5" />
            <div>
              <p className="text-sm font-medium text-yellow-900">
                Важно: номера в черном списке автоматически исключаются из всех кампаний
              </p>
              <p className="text-sm text-yellow-700 mt-1">
                Глобальные исключения действуют для всей системы, локальные — только для указанной кампании
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Всего записей</p>
                <p className="text-2xl font-bold">{stats.total}</p>
              </div>
              <Ban className="h-8 w-8 text-red-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Глобальные</p>
                <p className="text-2xl font-bold text-red-600">{stats.global}</p>
              </div>
              <Globe className="h-8 w-8 text-red-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Для кампаний</p>
                <p className="text-2xl font-bold text-blue-600">{stats.campaign}</p>
              </div>
              <Building className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Добавлено сегодня</p>
                <p className="text-2xl font-bold">+{stats.addedToday}</p>
              </div>
              <UserX className="h-8 w-8 text-orange-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Истекает скоро</p>
                <p className="text-2xl font-bold text-yellow-600">{stats.expiringSoon}</p>
              </div>
              <Clock className="h-8 w-8 text-yellow-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg">Фильтры</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label htmlFor="search">Поиск по номеру</Label>
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="search"
                  placeholder="+7 (900) 123-45-67"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <div>
              <Label htmlFor="reason-filter">Причина</Label>
              <Select value={filterReason} onValueChange={setFilterReason}>
                <SelectTrigger id="reason-filter">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все причины</SelectItem>
                  <SelectItem value="user_refuse">Отказ клиента</SelectItem>
                  <SelectItem value="complaint">Жалоба</SelectItem>
                  <SelectItem value="invalid">Недействительный</SelectItem>
                  <SelectItem value="spam_risk">Спам-риск</SelectItem>
                  <SelectItem value="regulatory">Регуляторный</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="scope-filter">Область действия</Label>
              <Select value={filterScope} onValueChange={setFilterScope}>
                <SelectTrigger id="scope-filter">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все</SelectItem>
                  <SelectItem value="global">Глобальные</SelectItem>
                  <SelectItem value="campaign">Для кампаний</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* DNC Table */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Черный список</CardTitle>
            <div className="flex items-center space-x-2">
              {selectedRecords.length > 0 && (
                <>
                  <Badge variant="outline">{selectedRecords.length} выбрано</Badge>
                  <Button 
                    variant="destructive" 
                    size="sm"
                    onClick={handleBulkDelete}
                  >
                    <Trash2 className="h-4 w-4 mr-1" />
                    Удалить выбранные
                  </Button>
                </>
              )}
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedRecords.length === filteredRecords.length && filteredRecords.length > 0}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setSelectedRecords(filteredRecords.map(r => r.id))
                      } else {
                        setSelectedRecords([])
                      }
                    }}
                  />
                </TableHead>
                <TableHead>Номер телефона</TableHead>
                <TableHead>Причина</TableHead>
                <TableHead>Область</TableHead>
                <TableHead>Кампания</TableHead>
                <TableHead>Добавлен</TableHead>
                <TableHead>Кем добавлен</TableHead>
                <TableHead>Комментарий</TableHead>
                <TableHead className="text-right">Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredRecords.map((record) => (
                <TableRow key={record.id}>
                  <TableCell>
                    <Checkbox
                      checked={selectedRecords.includes(record.id)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedRecords([...selectedRecords, record.id])
                        } else {
                          setSelectedRecords(selectedRecords.filter(id => id !== record.id))
                        }
                      }}
                    />
                  </TableCell>
                  <TableCell className="font-mono font-medium">{record.phone}</TableCell>
                  <TableCell>{getReasonBadge(record.reason)}</TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1">
                      {getScopeIcon(record.scope)}
                      <span className="text-sm">
                        {record.scope === 'global' ? 'Глобально' : 'Кампания'}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell>{record.campaign || '-'}</TableCell>
                  <TableCell>
                    <div className="text-sm">
                      {record.addedDate}
                      {record.expiresAt && (
                        <div className="text-xs text-yellow-600">
                          Истекает: {record.expiresAt}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>{record.addedBy}</TableCell>
                  <TableCell className="max-w-[200px]">
                    <span className="text-sm text-gray-600 truncate">
                      {record.comment || '-'}
                    </span>
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleDeleteRecord(record.id)}
                    >
                      <Trash2 className="h-4 w-4 text-red-500" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Add Dialog */}
      <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Добавить номер в черный список</DialogTitle>
            <DialogDescription>
              Укажите номер телефона и причину добавления в DNC
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <Label htmlFor="phone">Номер телефона</Label>
              <Input id="phone" placeholder="+7 (900) 123-45-67" />
            </div>
            
            <div>
              <Label htmlFor="reason">Причина</Label>
              <Select>
                <SelectTrigger id="reason">
                  <SelectValue placeholder="Выберите причину" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="user_refuse">Отказ клиента</SelectItem>
                  <SelectItem value="complaint">Жалоба</SelectItem>
                  <SelectItem value="invalid">Недействительный номер</SelectItem>
                  <SelectItem value="spam_risk">Риск спам-жалоб</SelectItem>
                  <SelectItem value="regulatory">Регуляторный запрет</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <Label htmlFor="scope">Область действия</Label>
              <div className="flex items-center space-x-4 mt-2">
                <label className="flex items-center space-x-2">
                  <input type="radio" name="scope" value="global" defaultChecked />
                  <span className="text-sm">Глобально (для всех кампаний)</span>
                </label>
                <label className="flex items-center space-x-2">
                  <input type="radio" name="scope" value="campaign" />
                  <span className="text-sm">Для конкретной кампании</span>
                </label>
              </div>
            </div>
            
            <div>
              <Label htmlFor="comment">Комментарий (опционально)</Label>
              <Textarea
                id="comment"
                placeholder="Дополнительная информация..."
                rows={3}
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowAddDialog(false)}>
              Отмена
            </Button>
            <Button onClick={() => setShowAddDialog(false)}>
              Добавить в черный список
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/settings/tasks/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  ArrowLeft,
  CheckSquare,
  Clock,
  AlertCircle,
  Phone,
  MessageSquare,
  Calendar,
  User
} from 'lucide-react'

interface Task {
  id: string
  type: 'callback' | 'no_consent' | 'refusal' | 'technical'
  priority: 'high' | 'medium' | 'low'
  leadName: string
  leadPhone: string
  campaign: string
  reason: string
  createdAt: string
  deadline?: string
  assignee?: string
  status: 'pending' | 'in_progress' | 'completed'
}

const mockTasks: Task[] = [
  {
    id: 'task_1',
    type: 'callback',
    priority: 'high',
    leadName: 'Иванов И.И.',
    leadPhone: '+7900***1234',
    campaign: 'Новогодняя кампания',
    reason: 'Просил перезвонить после 18:00',
    createdAt: '2024-01-09 10:00',
    deadline: '2024-01-09 18:00',
    status: 'pending'
  },
  {
    id: 'task_2',
    type: 'no_consent',
    priority: 'medium',
    leadName: 'Петрова М.С.',
    leadPhone: '+7900***2345',
    campaign: 'Реактивация',
    reason: 'Не дал согласие на SMS',
    createdAt: '2024-01-09 09:30',
    assignee: 'Менеджер 1',
    status: 'in_progress'
  },
  {
    id: 'task_3',
    type: 'refusal',
    priority: 'low',
    leadName: 'Сидоров А.П.',
    leadPhone: '+7900***3456',
    campaign: 'Обзвон базы',
    reason: 'Отказ с причиной: дорого',
    createdAt: '2024-01-08 15:00',
    status: 'pending'
  }
]

export default function TasksPage() {
  const router = useRouter()
  const [tasks] = useState<Task[]>(mockTasks)
  const [selectedTasks, setSelectedTasks] = useState<string[]>([])

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'high':
        return <Badge className="bg-red-100 text-red-800">Высокий</Badge>
      case 'medium':
        return <Badge className="bg-yellow-100 text-yellow-800">Средний</Badge>
      case 'low':
        return <Badge className="bg-gray-100 text-gray-800">Низкий</Badge>
      default:
        return <Badge>{priority}</Badge>
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'callback':
        return <Phone className="h-4 w-4 text-blue-500" />
      case 'no_consent':
        return <AlertCircle className="h-4 w-4 text-yellow-500" />
      case 'refusal':
        return <MessageSquare className="h-4 w-4 text-red-500" />
      default:
        return <CheckSquare className="h-4 w-4" />
    }
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <h1 className="text-3xl font-bold mb-2">Задачи менеджера</h1>
        <p className="text-gray-600">Централизованный inbox для ручной обработки</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">В очереди</p>
                <p className="text-2xl font-bold">23</p>
              </div>
              <Clock className="h-8 w-8 text-orange-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">В работе</p>
                <p className="text-2xl font-bold">8</p>
              </div>
              <User className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Просрочено</p>
                <p className="text-2xl font-bold text-red-600">3</p>
              </div>
              <AlertCircle className="h-8 w-8 text-red-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Завершено сегодня</p>
                <p className="text-2xl font-bold text-green-600">15</p>
              </div>
              <CheckSquare className="h-8 w-8 text-green-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Активные задачи</CardTitle>
            {selectedTasks.length > 0 && (
              <div className="flex space-x-2">
                <Badge variant="outline">{selectedTasks.length} выбрано</Badge>
                <Button size="sm">Взять в работу</Button>
                <Button size="sm" variant="outline">Закрыть</Button>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12">
                  <Checkbox />
                </TableHead>
                <TableHead>Тип</TableHead>
                <TableHead>Приоритет</TableHead>
                <TableHead>Лид</TableHead>
                <TableHead>Кампания</TableHead>
                <TableHead>Причина</TableHead>
                <TableHead>Создано</TableHead>
                <TableHead>Дедлайн</TableHead>
                <TableHead>Ответственный</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {tasks.map((task) => (
                <TableRow key={task.id}>
                  <TableCell>
                    <Checkbox
                      checked={selectedTasks.includes(task.id)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedTasks([...selectedTasks, task.id])
                        } else {
                          setSelectedTasks(selectedTasks.filter(id => id !== task.id))
                        }
                      }}
                    />
                  </TableCell>
                  <TableCell>{getTypeIcon(task.type)}</TableCell>
                  <TableCell>{getPriorityBadge(task.priority)}</TableCell>
                  <TableCell>
                    <div>
                      <p className="font-medium">{task.leadName}</p>
                      <p className="text-sm text-gray-500">{task.leadPhone}</p>
                    </div>
                  </TableCell>
                  <TableCell>{task.campaign}</TableCell>
                  <TableCell className="max-w-[200px]">
                    <span className="text-sm">{task.reason}</span>
                  </TableCell>
                  <TableCell className="text-sm">{task.createdAt}</TableCell>
                  <TableCell>
                    {task.deadline && (
                      <div className="flex items-center space-x-1">
                        <Calendar className="h-3 w-3" />
                        <span className="text-sm">{task.deadline}</span>
                      </div>
                    )}
                  </TableCell>
                  <TableCell>{task.assignee || '-'}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/settings/layout.tsx">
export default function SettingsLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-gray-50">
      {children}
    </div>
  )
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { MainLayout } from '@/components/layout/main-layout'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Hantico Call Center - Система обзвона',
  description: 'Прототип системы автоматического обзвона с AI-агентами',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ru">
      <body className={inter.className}>
        <MainLayout>
          {children}
        </MainLayout>
      </body>
    </html>
  )
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/date-filter.tsx">
'use client'

import React, { useState } from 'react'
import { Calendar } from 'lucide-react'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover'
import { Button } from '@/components/ui/button'

interface DateFilterProps {
  value: string
  onValueChange: (value: string) => void
  intervalStart?: string
  intervalEnd?: string
  onIntervalChange?: (start: string, end: string) => void
  label?: string
  className?: string
}

export function DateFilter({ 
  value, 
  onValueChange, 
  intervalStart,
  intervalEnd,
  onIntervalChange,
  label = "Период:",
  className = "w-32"
}: DateFilterProps) {
  const [showInterval, setShowInterval] = useState(false)
  const [tempStart, setTempStart] = useState(intervalStart || '')
  const [tempEnd, setTempEnd] = useState(intervalEnd || '')

  const handleValueChange = (newValue: string) => {
    if (newValue === 'interval') {
      setShowInterval(true)
    } else {
      setShowInterval(false)
      onValueChange(newValue)
    }
  }

  const handleIntervalApply = () => {
    if (tempStart && tempEnd && onIntervalChange) {
      onIntervalChange(tempStart, tempEnd)
      onValueChange('interval')
      setShowInterval(false)
    }
  }

  return (
    <div className="flex items-center space-x-2">
      {label && <Label className="text-sm">{label}</Label>}
      
      <Popover open={showInterval} onOpenChange={setShowInterval}>
        <PopoverTrigger asChild>
          <div>
            <Select value={value} onValueChange={handleValueChange}>
              <SelectTrigger className={className}>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="today">День</SelectItem>
                <SelectItem value="week">Неделя</SelectItem>
                <SelectItem value="month">Месяц</SelectItem>
                <SelectItem value="all">Все время</SelectItem>
                <SelectItem value="interval">Интервал...</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </PopoverTrigger>
        
        <PopoverContent className="w-80" align="start">
          <div className="space-y-4">
            <div className="space-y-2">
              <h4 className="font-medium">Выберите интервал</h4>
            </div>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="start-date" className="text-sm">Начало</Label>
                <Input
                  id="start-date"
                  type="date"
                  value={tempStart}
                  onChange={(e) => setTempStart(e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="end-date" className="text-sm">Конец</Label>
                <Input
                  id="end-date"
                  type="date"
                  value={tempEnd}
                  onChange={(e) => setTempEnd(e.target.value)}
                  className="mt-1"
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setShowInterval(false)
                  setTempStart(intervalStart || '')
                  setTempEnd(intervalEnd || '')
                }}
              >
                Отмена
              </Button>
              <Button
                size="sm"
                onClick={handleIntervalApply}
                disabled={!tempStart || !tempEnd}
              >
                Применить
              </Button>
            </div>
          </div>
        </PopoverContent>
      </Popover>
      
      {value === 'interval' && intervalStart && intervalEnd && (
        <span className="text-xs text-gray-500">
          {new Date(intervalStart).toLocaleDateString()} - {new Date(intervalEnd).toLocaleDateString()}
        </span>
      )}
    </div>
  )
}
</file>

<file path="src/components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/popover.tsx">
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/select.tsx">
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/switch.tsx">
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/call-test-modal.tsx">
'use client'

import React, { useState, useEffect, useRef, useCallback } from 'react'
import { Phone, PhoneOff, PhoneIncoming, Mic, MicOff, Volume2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'

interface CallTestModalProps {
  isOpen: boolean
  onClose: () => void
  agentName?: string
}

type CallState = 'dialing' | 'ringing' | 'answering' | 'connected' | 'ended'

export function CallTestModal({ isOpen, onClose, agentName = 'AI Agent' }: CallTestModalProps) {
  const [callState, setCallState] = useState<CallState>('dialing')
  const [isMuted, setIsMuted] = useState(false)
  const [callDuration, setCallDuration] = useState(0)
  const [currentResponseIndex, setCurrentResponseIndex] = useState(0)
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  
  const [aiResponses] = useState([
    'Здравствуйте! Это компания Hantico. Чем могу помочь?',
    'Да, конечно, я могу рассказать вам о наших услугах.',
    'Мы предлагаем полный спектр решений для автоматизации колл-центров.',
    'Хотели бы вы записаться на демонстрацию?',
    'Отлично! Я передам вашу заявку менеджеру.',
    'Спасибо за обращение! Хорошего дня!'
  ])

  const startCallTimer = () => {
    intervalRef.current = setInterval(() => {
      setCallDuration(prev => prev + 1)
    }, 1000)
  }

  const simulateAIResponses = useCallback(() => {
    let index = 0
    const responseInterval = setInterval(() => {
      if (index < aiResponses.length) {
        setCurrentResponseIndex(index)
        index++
      } else {
        clearInterval(responseInterval)
      }
    }, 4000)
    
    return () => clearInterval(responseInterval)
  }, [aiResponses])

  useEffect(() => {
    if (isOpen) {
      setCallState('dialing')
      setCallDuration(0)
      setCurrentResponseIndex(0)
      
      // Имитация процесса звонка
      setTimeout(() => setCallState('ringing'), 1000)
      setTimeout(() => setCallState('answering'), 3000)
      setTimeout(() => {
        setCallState('connected')
        startCallTimer()
        simulateAIResponses()
      }, 4000)
    }
    
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [isOpen, simulateAIResponses])

  const handleEndCall = () => {
    setCallState('ended')
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
    }
    setTimeout(() => {
      onClose()
    }, 1500)
  }

  const handleAnswerCall = () => {
    setCallState('connected')
    startCallTimer()
    simulateAIResponses()
  }

  const toggleMute = () => {
    setIsMuted(!isMuted)
  }

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`
  }

  const getStateMessage = () => {
    switch (callState) {
      case 'dialing': return 'Набираем номер...'
      case 'ringing': return 'Звоним...'
      case 'answering': return 'Абонент отвечает...'
      case 'connected': return formatDuration(callDuration)
      case 'ended': return 'Звонок завершен'
      default: return ''
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Тестовый звонок</DialogTitle>
          <DialogDescription>
            Тестирование {agentName}
          </DialogDescription>
        </DialogHeader>
        
        <div className="flex flex-col items-center space-y-6 py-6">
          {/* Анимация состояния звонка */}
          <div className="relative w-32 h-32">
            <div className={`absolute inset-0 rounded-full bg-green-500 opacity-20 ${
              callState === 'ringing' ? 'animate-ping' : ''
            }`} />
            <div className={`absolute inset-0 rounded-full bg-green-500 opacity-30 ${
              callState === 'connected' ? 'animate-pulse' : ''
            }`} />
            <div className="relative flex items-center justify-center w-32 h-32 rounded-full bg-gradient-to-br from-green-500 to-green-600 shadow-lg">
              {callState === 'ended' ? (
                <PhoneOff className="w-12 h-12 text-white" />
              ) : callState === 'ringing' ? (
                <PhoneIncoming className="w-12 h-12 text-white animate-bounce" />
              ) : (
                <Phone className={`w-12 h-12 text-white ${
                  callState === 'connected' ? '' : 'animate-pulse'
                }`} />
              )}
            </div>
          </div>

          {/* Статус звонка */}
          <div className="text-center">
            <p className="text-2xl font-bold">{getStateMessage()}</p>
            {callState === 'connected' && (
              <p className="text-sm text-gray-500 mt-1">
                Идет тестирование AI агента
              </p>
            )}
          </div>

          {/* Кнопка ответа на звонок */}
          {callState === 'ringing' && (
            <Button
              onClick={handleAnswerCall}
              className="rounded-full px-8 py-3 bg-green-500 hover:bg-green-600"
            >
              <Phone className="w-5 h-5 mr-2" />
              Ответить
            </Button>
          )}

          {/* Текущий ответ AI */}
          {callState === 'connected' && (
            <div className="w-full p-4 bg-gray-50 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Volume2 className="w-4 h-4 text-green-600 animate-pulse" />
                <span className="text-sm font-medium">AI Agent:</span>
              </div>
              <p className="text-sm text-gray-700 italic">
                {aiResponses[currentResponseIndex]}
              </p>
            </div>
          )}

          {/* Контролы звонка */}
          {callState === 'connected' && (
            <div className="flex space-x-4">
              <Button
                variant="outline"
                size="icon"
                onClick={toggleMute}
                className="rounded-full w-12 h-12"
              >
                {isMuted ? (
                  <MicOff className="w-5 h-5 text-red-500" />
                ) : (
                  <Mic className="w-5 h-5" />
                )}
              </Button>
              
              <Button
                variant="destructive"
                size="icon"
                onClick={handleEndCall}
                className="rounded-full w-16 h-16"
              >
                <PhoneOff className="w-6 h-6" />
              </Button>
            </div>
          )}

          {/* Индикатор микрофона */}
          {callState === 'connected' && !isMuted && (
            <div className="flex items-center space-x-2">
              <div className="flex space-x-1">
                <div className="w-1 h-4 bg-green-500 animate-pulse" style={{ animationDelay: '0ms' }} />
                <div className="w-1 h-6 bg-green-500 animate-pulse" style={{ animationDelay: '100ms' }} />
                <div className="w-1 h-3 bg-green-500 animate-pulse" style={{ animationDelay: '200ms' }} />
                <div className="w-1 h-5 bg-green-500 animate-pulse" style={{ animationDelay: '300ms' }} />
                <div className="w-1 h-4 bg-green-500 animate-pulse" style={{ animationDelay: '400ms' }} />
              </div>
              <span className="text-xs text-gray-500">Микрофон активен</span>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  )
}
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# Dependencies
/node_modules
/.pnp
.pnp.js

# Testing
/coverage

# Next.js
/.next/
/out/

# Production
/build

# Misc
.DS_Store
*.pem

# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Local env files
.env*.local

# Vercel
.vercel

# TypeScript
*.tsbuildinfo
next-env.d.ts

# IDE
.vscode/
.idea/

# OS
Thumbs.db
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['localhost'],
  },
}

module.exports = nextConfig
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Hantico Call Center - Прототип системы обзвона

Кликабельный прототип системы автоматического обзвона с AI-агентами, созданный согласно техническому заданию.

## 🎯 Описание

Hantico Call Center - это современная система управления кампаниями обзвона с интеллектуальными возможностями:

- **AI-агенты** для автоматических звонков
- **Умная автоматизация** с триггерами и правилами
- **Управление кампаниями** с детальной настройкой
- **Система ролей** с гибким разграничением прав
- **Визуальный редактор скриптов** с ветвлениями
- **Мониторинг в реальном времени** очереди звонков
- **Интеграция с CRM** и внешними сервисами

## 🚀 Технологический стек

- **Frontend**: Next.js 15 (App Router), TypeScript, TailwindCSS
- **UI Components**: Radix UI + shadcn/ui
- **Icons**: Lucide React
- **Charts**: Recharts
- **Date handling**: date-fns
- **Styling**: TailwindCSS с кастомными переменными

## 📁 Структура проекта

```
hantico/
├── src/
│   ├── app/                    # Pages (Next.js App Router)
│   │   ├── page.tsx           # Дашборд кампаний
│   │   ├── campaigns/         # Управление кампаниями
│   │   ├── queue/             # Очередь/монитор прозвона
│   │   ├── leads/             # Управление лидами
│   │   ├── calls/             # Карточки звонков (CDR)
│   │   ├── tasks/             # Система задач
│   │   ├── scripts/           # Редактор скриптов
│   │   ├── automation/        # Автоматические правила
│   │   └── settings/          # Настройки системы
│   ├── components/
│   │   ├── ui/                # Базовые UI компоненты
│   │   ├── layout/            # Layout компоненты
│   │   └── dashboard/         # Компоненты дашборда
│   └── lib/
│       ├── types.ts           # TypeScript типы
│       ├── mock-data.ts       # Демо данные
│       └── utils.ts           # Утилиты
└── public/                    # Статические файлы
```

## 🎨 Основные экраны

### 1. Дашборд кампаний
- Карточки кампаний с KPI (дозвоны, ответы, успехи, согласия SMS)
- Статус очереди в реальном времени
- Алерты о низкой конверсии и проблемах
- Управление состоянием кампаний (Пуск/Пауза/Стоп)

### 2. Управление кампаниями
- Создание и редактирование кампаний
- Настройка источников данных (CSV/сегменты)
- Конфигурация окон дозвона и политики повторов
- A/B тестирование скриптов

### 3. Очередь/Монитор прозвона
- Реал-тайм список активных звонков
- Разделы: Активные / Ожидающие / Ошибки
- Массовые действия с лидами
- Фильтрация по кампаниям и статусам

### 4. Карточка лида
- Полная информация о контакте
- История звонков, SMS и задач
- Быстрые действия: звонок, SMS, задача
- Управление согласиями и черным списком

### 5. Карточка звонка (CDR)
- Демо аудиоплеер с записью
- Транскрипт с таймкодами
- AI-резюме разговора
- Изменение исхода и триггеры автоматики

### 6. Редактор скриптов
- Визуальный конструктор диалогов
- Ветвления: да/нет/позже/ошибка
- Переменные для персонализации
- A/B версии скриптов

### 7. Система автоматизации
- Настройка триггеров и правил
- If/Then логика для автодействий
- Отправка SMS, создание задач, эскалация
- Мониторинг срабатываний правил

## 🔐 Система ролей

- **Администратор**: полный доступ ко всем функциям
- **Маркетолог**: создание кампаний, просмотр аналитики
- **Супервайзер**: управление звонками, задачами, прослушивание
- **Менеджер**: работа с лидами и задачами

Права доступа настраиваются для каждой роли отдельно.

## 📊 Ключевые метрики

- **Дозвоны** - процент успешных соединений
- **Конверсия** - процент успешных звонков
- **SMS согласия** - процент согласий на отправку SMS
- **Регистрации** - конверсия из звонка в регистрацию
- **Стоимость лида** - экономическая эффективность

## 🔄 Автоматические сценарии

1. **При успешном звонке + согласие SMS** → автоматическая отправка SMS с deeplink
2. **При отказе клиента** → создание задачи менеджеру
3. **При "не ответил"** → повтор через 2 часа (до 3 попыток)
4. **При "занято"** → повтор через 30 минут (до 2 попыток)
5. **При незавершенной регистрации** → эскалация менеджеру

## 🚀 Запуск проекта

1. **Установка зависимостей**:
```bash
npm install
```

2. **Запуск в режиме разработки**:
```bash
npm run dev
```

3. **Сборка для продакшена**:
```bash
npm run build
npm start
```

4. **Проверка типов**:
```bash
npm run typecheck
```

5. **Линтинг**:
```bash
npm run lint
```

## 📱 Адаптивность

Интерфейс полностью адаптирован для:
- **Desktop** (основной режим работы)
- **Tablet** (управление в движении)
- **Mobile** (быстрый доступ к ключевой информации)

## 🎯 Демо сценарий

1. Импорт 500 контактов → запуск кампании
2. В мониторе появляются активные звонки
3. Открываем CDR: ставим "успешно" + согласие SMS → автоматическая отправка SMS
4. Во втором CDR: "не ответил" → система планирует повтор через 2ч
5. В третьем: "отказ" → автоматическая задача менеджеру
6. Менеджер завершает задачу → лид обновляется
7. В карточке лида ставим "зарегистрирован" → дашборд фиксирует успех

## ⚡ Особенности прототипа

- **Полностью кликабельный** интерфейс с реалистичными данными
- **Моковые данные** имитируют реальную работу системы
- **Интерактивные элементы** реагируют на действия пользователя
- **Переключение ролей** демонстрирует систему прав доступа
- **Реал-тайм обновления** имитируют живую систему

## 🔮 Что НЕ реализовано (вне скоупа)

- Реальная интеграция с Asterisk/11Labs/LLM
- Реальная отправка SMS
- Промышленная аутентификация и безопасность
- Хранение аудио и обработка ПДн
- Система биллинга и стоимости
- Мониторинг производственного уровня

## 👥 Роли в демо

Переключение ролей в правом верхнем углу демонстрирует различные уровни доступа:
- Разные наборы доступных кнопок и разделов
- Ограничения на редактирование и управление
- Персонализированные дашборды

## 📞 Контакты

Создано для демонстрации возможностей современной системы обзвона с AI-агентами.

---

**Статус**: Готовый кликабельный прототип ✅  
**Версия**: 1.0  
**Дата**: Январь 2025
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/companies/[id]/ab-tests/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Plus,
  Play,
  Pause,
  Settings,
  TrendingUp,
  Users,
  GitBranch,
  BarChart3,
  CheckCircle,
  Clock,
  AlertTriangle,
  Edit,
  Copy
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog'
import { Slider } from '@/components/ui/slider'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { mockCampaigns, mockAgents } from '@/lib/mock-data'

// Интерфейс для A/B теста
interface ABTest {
  id: string
  name: string
  status: string
  startDate: Date
  endDate?: Date
  variants: Array<{
    id: string
    name: string
    agent: string
    agentId: string
    split: number
    calls: number
    conversions: number
    conversionRate: number
    avgCallDuration: number
  }>
  winner: string | null
  confidence: number
}

// Mock данные A/B тестов
const mockABTests = [
  {
    id: 'ab-1',
    name: 'Тест приветствия',
    status: 'active',
    startDate: new Date('2025-09-10'),
    variants: [
      {
        id: 'var-a',
        name: 'Вариант A',
        agent: 'Анна',
        agentId: 'agent-1',
        split: 50,
        calls: 1250,
        conversions: 156,
        conversionRate: 12.5,
        avgCallDuration: 180
      },
      {
        id: 'var-b',
        name: 'Вариант B',
        agent: 'Михаил',
        agentId: 'agent-2',
        split: 50,
        calls: 1248,
        conversions: 187,
        conversionRate: 15.0,
        avgCallDuration: 165
      }
    ],
    winner: null,
    confidence: 89
  },
  {
    id: 'ab-2',
    name: 'Тест тона общения',
    status: 'paused',
    startDate: new Date('2025-09-05'),
    variants: [
      {
        id: 'var-a',
        name: 'Вариант A',
        agent: 'Елена',
        agentId: 'agent-3',
        split: 60,
        calls: 800,
        conversions: 120,
        conversionRate: 15.0,
        avgCallDuration: 200
      },
      {
        id: 'var-b',
        name: 'Вариант B',
        agent: 'Анна',
        agentId: 'agent-1',
        split: 40,
        calls: 533,
        conversions: 85,
        conversionRate: 16.0,
        avgCallDuration: 190
      }
    ],
    winner: 'var-b',
    confidence: 95
  },
  {
    id: 'ab-3',
    name: 'Тест скорости речи',
    status: 'completed',
    startDate: new Date('2025-08-20'),
    endDate: new Date('2025-09-01'),
    variants: [
      {
        id: 'var-a',
        name: 'Вариант A',
        agent: 'Михаил',
        agentId: 'agent-2',
        split: 50,
        calls: 2000,
        conversions: 280,
        conversionRate: 14.0,
        avgCallDuration: 175
      },
      {
        id: 'var-b',
        name: 'Вариант B',
        agent: 'Елена',
        agentId: 'agent-3',
        split: 50,
        calls: 1998,
        conversions: 320,
        conversionRate: 16.0,
        avgCallDuration: 185
      }
    ],
    winner: 'var-b',
    confidence: 98
  }
]

export default function CampaignABTestsPage() {
  const router = useRouter()
  const params = useParams()
  const campaignId = params.id as string
  
  const campaign = mockCampaigns.find(c => c.id === campaignId)
  const [abTests] = useState(mockABTests)
  const [editTestDialog, setEditTestDialog] = useState<{show: boolean, test: any | null}>({
    show: false,
    test: null
  })
  const [splitValues, setSplitValues] = useState<[number, number]>([50, 50])
  const [selectedAgentA, setSelectedAgentA] = useState('')
  const [selectedAgentB, setSelectedAgentB] = useState('')
  const [showDetailsModal, setShowDetailsModal] = useState(false)
  const [selectedTestDetails, setSelectedTestDetails] = useState<ABTest | null>(null)
  
  if (!campaign) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Кампания не найдена</p>
        <Button className="mt-4" onClick={() => router.back()}>
          Назад к списку кампаний
        </Button>
      </div>
    )
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активен</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">На паузе</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершён</Badge>
      default:
        return <Badge>{status}</Badge>
    }
  }

  const handlePauseTest = (test: any) => {
    setEditTestDialog({ show: true, test })
    // Устанавливаем текущие значения сплита
    setSplitValues([test.variants[0].split, test.variants[1].split])
    setSelectedAgentA(test.variants[0].agentId)
    setSelectedAgentB(test.variants[1].agentId)
  }

  const handleSaveChanges = () => {
    console.log('Сохранение изменений:', {
      split: splitValues,
      agentA: selectedAgentA,
      agentB: selectedAgentB
    })
    setEditTestDialog({ show: false, test: null })
  }

  const handleCreateABTest = () => {
    router.push(`/companies/${campaignId}/ab-tests/new`)
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              A/B тестирование
            </h1>
            <p className="text-gray-600">
              {campaign.name}
            </p>
          </div>
        </div>
        
        <Button onClick={handleCreateABTest}>
          <Plus className="h-4 w-4 mr-2" />
          Создать A/B тест
        </Button>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <GitBranch className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего тестов</p>
                <p className="text-2xl font-bold text-gray-900">{abTests.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'active').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Pause className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">На паузе</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'paused').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Завершённые</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'completed').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Таблица A/B тестов */}
      <Card>
        <CardHeader>
          <CardTitle>Текущие A/B тесты</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Название</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead>Варианты</TableHead>
                <TableHead>Звонков</TableHead>
                <TableHead>Конверсия</TableHead>
                <TableHead>Победитель</TableHead>
                <TableHead>Уверенность</TableHead>
                <TableHead>Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {abTests.map((test) => {
                const totalCalls = test.variants.reduce((acc, v) => acc + v.calls, 0)
                const avgConversion = test.variants.reduce((acc, v) => acc + v.conversionRate, 0) / test.variants.length
                const winner = test.winner ? test.variants.find(v => v.id === test.winner) : null
                
                return (
                  <TableRow key={test.id}>
                    <TableCell>
                      <div>
                        <p className="font-medium">{test.name}</p>
                        <p className="text-xs text-gray-500">
                          Начат: {test.startDate.toLocaleDateString('ru-RU')}
                        </p>
                      </div>
                    </TableCell>
                    
                    <TableCell>{getStatusBadge(test.status)}</TableCell>
                    
                    <TableCell>
                      <div className="space-y-1">
                        {test.variants.map((variant) => (
                          <div key={variant.id} className="flex items-center space-x-2">
                            <Badge variant="outline" className="text-xs">
                              {variant.split}%
                            </Badge>
                            <span className="text-sm">{variant.agent}</span>
                          </div>
                        ))}
                      </div>
                    </TableCell>
                    
                    <TableCell>
                      <div>
                        <p className="font-medium">{totalCalls.toLocaleString()}</p>
                        <div className="text-xs text-gray-500 space-y-1 mt-1">
                          {test.variants.map((variant) => (
                            <div key={variant.id}>
                              {variant.name}: {variant.calls}
                            </div>
                          ))}
                        </div>
                      </div>
                    </TableCell>
                    
                    <TableCell>
                      <div>
                        <p className="font-medium">{avgConversion.toFixed(1)}%</p>
                        <div className="text-xs text-gray-500 space-y-1 mt-1">
                          {test.variants.map((variant) => (
                            <div key={variant.id} className={
                              winner && winner.id === variant.id ? 'text-green-600 font-medium' : ''
                            }>
                              {variant.name}: {variant.conversionRate}%
                            </div>
                          ))}
                        </div>
                      </div>
                    </TableCell>
                    
                    <TableCell>
                      {winner ? (
                        <div className="flex items-center space-x-1">
                          <TrendingUp className="h-4 w-4 text-green-600" />
                          <span className="text-sm font-medium text-green-600">
                            {winner.name}
                          </span>
                        </div>
                      ) : (
                        <span className="text-sm text-gray-400">—</span>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      {test.confidence ? (
                        <div>
                          <Progress value={test.confidence} className="h-2 w-20" />
                          <p className="text-xs text-gray-500 mt-1">{test.confidence}%</p>
                        </div>
                      ) : (
                        <span className="text-sm text-gray-400">—</span>
                      )}
                    </TableCell>
                    
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        {test.status === 'active' && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handlePauseTest(test)}
                          >
                            <Pause className="h-4 w-4" />
                          </Button>
                        )}
                        {test.status === 'paused' && (
                          <>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handlePauseTest(test)}
                            >
                              <Settings className="h-4 w-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              className="text-green-600"
                            >
                              <Play className="h-4 w-4" />
                            </Button>
                          </>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            setSelectedTestDetails(test)
                            setShowDetailsModal(true)
                          }}
                        >
                          <BarChart3 className="h-4 w-4" />
                        </Button>
                        {test.status === 'completed' && (
                          <Button
                            size="sm"
                            variant="outline"
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        )}
                      </div>
                    </TableCell>
                  </TableRow>
                )
              })}
            </TableBody>
          </Table>
          
          {abTests.length === 0 && (
            <div className="text-center py-12">
              <GitBranch className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">
                Нет активных A/B тестов
              </p>
              <Button onClick={handleCreateABTest}>
                <Plus className="h-4 w-4 mr-2" />
                Создать первый тест
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Диалог редактирования теста на паузе */}
      <Dialog open={editTestDialog.show} onOpenChange={(open) => setEditTestDialog({ show: open, test: null })}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Настройки A/B теста</DialogTitle>
            <DialogDescription>
              Измените параметры теста. Новые настройки будут применены при возобновлении.
            </DialogDescription>
          </DialogHeader>
          
          {editTestDialog.test && (
            <div className="space-y-6">
              {/* Настройка сплита */}
              <div className="space-y-4">
                <Label>Распределение трафика</Label>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Вариант A</span>
                    <span className="text-sm font-medium">{splitValues[0]}%</span>
                  </div>
                  <Slider
                    value={[splitValues[0]]}
                    onValueChange={(value) => setSplitValues([value[0], 100 - value[0]])}
                    max={100}
                    step={5}
                    className="w-full"
                  />
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium">Вариант B</span>
                    <span className="text-sm font-medium">{splitValues[1]}%</span>
                  </div>
                </div>
              </div>

              {/* Выбор агентов */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Агент для варианта A</Label>
                  <Select value={selectedAgentA} onValueChange={setSelectedAgentA}>
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите агента" />
                    </SelectTrigger>
                    <SelectContent>
                      {mockAgents.filter(a => a.status === 'active').map(agent => (
                        <SelectItem key={agent.id} value={agent.id}>
                          {agent.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <div className="p-3 bg-gray-50 rounded-lg text-sm">
                    <p className="font-medium">Текущая статистика:</p>
                    <p>Звонков: {editTestDialog.test.variants[0].calls}</p>
                    <p>Конверсия: {editTestDialog.test.variants[0].conversionRate}%</p>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label>Агент для варианта B</Label>
                  <Select value={selectedAgentB} onValueChange={setSelectedAgentB}>
                    <SelectTrigger>
                      <SelectValue placeholder="Выберите агента" />
                    </SelectTrigger>
                    <SelectContent>
                      {mockAgents.filter(a => a.status === 'active' && a.id !== selectedAgentA).map(agent => (
                        <SelectItem key={agent.id} value={agent.id}>
                          {agent.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <div className="p-3 bg-gray-50 rounded-lg text-sm">
                    <p className="font-medium">Текущая статистика:</p>
                    <p>Звонков: {editTestDialog.test.variants[1].calls}</p>
                    <p>Конверсия: {editTestDialog.test.variants[1].conversionRate}%</p>
                  </div>
                </div>
              </div>

              {/* Дополнительные настройки */}
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Автоматическая остановка</Label>
                    <p className="text-xs text-gray-500">Остановить тест при достижении статистической значимости</p>
                  </div>
                  <Switch defaultChecked />
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <Label>Сброс статистики</Label>
                    <p className="text-xs text-gray-500">Начать сбор данных заново</p>
                  </div>
                  <Switch />
                </div>
              </div>

              {/* Предупреждение */}
              <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-start space-x-2">
                  <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5" />
                  <div className="text-sm text-yellow-800">
                    <p className="font-medium">Важно!</p>
                    <p>Изменения будут применены только после возобновления теста. Текущая статистика сохранится, если не включен сброс.</p>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setEditTestDialog({ show: false, test: null })}>
              Отмена
            </Button>
            <Button onClick={handleSaveChanges}>
              Сохранить изменения
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Диалог детальной статистики A/B теста */}
      <Dialog open={showDetailsModal} onOpenChange={setShowDetailsModal}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <BarChart3 className="h-5 w-5" />
              <span>Детальная статистика A/B теста</span>
            </DialogTitle>
            <DialogDescription>
              {selectedTestDetails?.name} • Кампания: {campaign?.name}
            </DialogDescription>
          </DialogHeader>
          
          {selectedTestDetails && (
            <div className="space-y-6">
              {/* Основные метрики */}
              <div className="grid grid-cols-3 gap-4">
                <Card>
                  <CardContent className="p-4">
                    <p className="text-sm text-gray-600 mb-1">Статус теста</p>
                    {getStatusBadge(selectedTestDetails.status)}
                    <p className="text-xs text-gray-500 mt-2">
                      Начат {selectedTestDetails.startDate.toLocaleDateString('ru-RU')}
                    </p>
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-4">
                    <p className="text-sm text-gray-600 mb-1">Уверенность</p>
                    <p className="text-2xl font-bold text-blue-600">
                      {selectedTestDetails.confidence}%
                    </p>
                    <Progress value={selectedTestDetails.confidence} className="mt-2" />
                  </CardContent>
                </Card>
                
                <Card>
                  <CardContent className="p-4">
                    <p className="text-sm text-gray-600 mb-1">Победитель</p>
                    {selectedTestDetails.winner ? (
                      <div className="flex items-center space-x-2">
                        <TrendingUp className="h-5 w-5 text-green-600" />
                        <span className="text-lg font-bold text-green-600">
                          Вариант {selectedTestDetails.winner}
                        </span>
                      </div>
                    ) : (
                      <p className="text-gray-500">Не определён</p>
                    )}
                  </CardContent>
                </Card>
              </div>

              {/* Сравнение вариантов */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">Сравнение вариантов</h3>
                <div className="grid grid-cols-2 gap-4">
                  {selectedTestDetails.variants.map((variant, index) => (
                    <Card key={index} className={selectedTestDetails.winner === variant.id ? 'border-green-500' : ''}>
                      <CardHeader>
                        <div className="flex items-center justify-between">
                          <CardTitle className="text-base">
                            Вариант {variant.id}
                            {selectedTestDetails.winner === variant.id && (
                              <Badge className="ml-2 bg-green-100 text-green-800">Победитель</Badge>
                            )}
                          </CardTitle>
                          <Badge variant="outline">{variant.split}% трафика</Badge>
                        </div>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div>
                          <p className="text-sm text-gray-600">Агент</p>
                          <p className="font-medium">{variant.agent}</p>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <p className="text-sm text-gray-600">Звонков</p>
                            <p className="text-xl font-bold">{variant.calls.toLocaleString()}</p>
                          </div>
                          <div>
                            <p className="text-sm text-gray-600">Конверсий</p>
                            <p className="text-xl font-bold text-green-600">{variant.conversions.toLocaleString()}</p>
                          </div>
                        </div>
                        
                        <div>
                          <div className="flex justify-between mb-2">
                            <span className="text-sm text-gray-600">Конверсия</span>
                            <span className="text-lg font-bold">{variant.conversionRate}%</span>
                          </div>
                          <Progress value={variant.conversionRate} className="h-2" />
                        </div>

                        {/* Детальная статистика */}
                        <div className="border-t pt-4 space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">Средняя длительность</span>
                            <span>{Math.round(variant.avgCallDuration || 120)}с</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">Отказы</span>
                            <span className="text-red-600">{Math.round(variant.calls * 0.15)}</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">Недозвоны</span>
                            <span className="text-gray-600">{Math.round(variant.calls * 0.1)}</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              {/* График динамики */}
              <div>
                <h3 className="text-lg font-semibold mb-4">Динамика конверсии</h3>
                <Card>
                  <CardContent className="p-6">
                    <div className="h-64 bg-gray-50 rounded-lg flex items-center justify-center">
                      <div className="text-center">
                        <TrendingUp className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                        <p className="text-gray-500">График динамики конверсии</p>
                        <p className="text-xs text-gray-400 mt-1">
                          Вариант A: стабильный рост • Вариант B: высокая волатильность
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {/* Статистическая значимость */}
              <Card>
                <CardHeader>
                  <CardTitle className="text-base">Статистическая значимость</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">P-value</span>
                      <span className="font-mono text-sm">0.023</span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Размер выборки</span>
                      <span className="font-mono text-sm">
                        {selectedTestDetails.variants.reduce((sum, v) => sum + v.calls, 0).toLocaleString()}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Минимальный детектируемый эффект</span>
                      <span className="font-mono text-sm">2.5%</span>
                    </div>
                    <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                      <p className="text-sm text-blue-900">
                        {selectedTestDetails.confidence >= 95 
                          ? '✓ Результаты статистически значимы. Можно принимать решение.'
                          : '⚠️ Требуется больше данных для статистической значимости.'}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Рекомендации */}
              {selectedTestDetails.winner && (
                <Card className="border-green-200 bg-green-50">
                  <CardHeader>
                    <CardTitle className="text-base flex items-center">
                      <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
                      Рекомендация
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-green-900">
                      Рекомендуется применить настройки варианта {selectedTestDetails.winner} 
                      ({selectedTestDetails.variants.find(v => v.id === selectedTestDetails.winner)?.agent}) 
                      ко всей кампании. Это может увеличить конверсию на {' '}
                      {Math.round(
                        (selectedTestDetails.variants.find(v => v.id === selectedTestDetails.winner)?.conversionRate || 0) -
                        (selectedTestDetails.variants.find(v => v.id !== selectedTestDetails.winner)?.conversionRate || 0)
                      )}%.
                    </p>
                    <Button className="mt-3" size="sm">
                      Применить победителя
                    </Button>
                  </CardContent>
                </Card>
              )}
            </div>
          )}
          
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowDetailsModal(false)}>
              Закрыть
            </Button>
            {selectedTestDetails?.status === 'active' && (
              <Button variant="destructive">
                Остановить тест
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/companies/ab-tests/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft,
  GitBranch,
  Play,
  Pause,
  TrendingUp,
  Calendar,
  Users,
  Filter,
  Search,
  ChevronRight
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'

interface ABTest {
  id: string
  campaignId: string
  campaignName: string
  status: 'active' | 'paused' | 'completed'
  startDate: Date
  variantA: {
    agent: string
    traffic: number
    calls: number
    conversions: number
    conversionRate: number
  }
  variantB: {
    agent: string
    traffic: number
    calls: number
    conversions: number
    conversionRate: number
  }
  winner?: 'A' | 'B'
  confidence: number
}

// Моковые данные
const mockABTests: ABTest[] = [
  {
    id: 'test-1',
    campaignId: 'obz-1',
    campaignName: 'Новогодняя акция 2025',
    status: 'active',
    startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
    variantA: {
      agent: 'Анна',
      traffic: 50,
      calls: 1250,
      conversions: 625,
      conversionRate: 50.0
    },
    variantB: {
      agent: 'Елена',
      traffic: 50,
      calls: 1250,
      conversions: 688,
      conversionRate: 55.0
    },
    winner: 'B',
    confidence: 92.5
  },
  {
    id: 'test-2',
    campaignId: 'obz-2',
    campaignName: 'Реактивация клиентов',
    status: 'paused',
    startDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
    variantA: {
      agent: 'Михаил',
      traffic: 60,
      calls: 1080,
      conversions: 324,
      conversionRate: 30.0
    },
    variantB: {
      agent: 'Иван',
      traffic: 40,
      calls: 720,
      conversions: 194,
      conversionRate: 27.0
    },
    confidence: 78.3
  },
  {
    id: 'test-3',
    campaignId: 'obz-3',
    campaignName: 'Холодная база январь',
    status: 'completed',
    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000),
    variantA: {
      agent: 'Елена',
      traffic: 50,
      calls: 425,
      conversions: 213,
      conversionRate: 50.1
    },
    variantB: {
      agent: 'Ольга',
      traffic: 50,
      calls: 425,
      conversions: 238,
      conversionRate: 56.0
    },
    winner: 'B',
    confidence: 95.8
  }
]

export default function CompaniesABTestsPage() {
  const router = useRouter()
  const [tests] = useState<ABTest[]>(mockABTests)
  const [searchFilter, setSearchFilter] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [periodFilter, setPeriodFilter] = useState('all')

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активен</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершен</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getWinnerBadge = (test: ABTest) => {
    if (test.winner) {
      const variant = test.winner === 'A' ? test.variantA : test.variantB
      return (
        <div className="flex items-center space-x-2">
          <TrendingUp className="h-4 w-4 text-green-600" />
          <span className="text-sm font-medium text-green-600">
            Вариант {test.winner} ({variant.agent})
          </span>
        </div>
      )
    }
    return null
  }

  const filteredTests = tests.filter(test => {
    if (searchFilter && !test.campaignName.toLowerCase().includes(searchFilter.toLowerCase())) {
      return false
    }
    if (statusFilter !== 'all' && test.status !== statusFilter) {
      return false
    }
    return true
  })

  // Подсчет статистики
  const activeTests = tests.filter(t => t.status === 'active').length
  const totalTests = tests.length
  const avgConfidence = tests.reduce((sum, t) => sum + t.confidence, 0) / tests.length
  const testsWithWinner = tests.filter(t => t.winner).length

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              A/B тесты всех кампаний
            </h1>
            <p className="text-gray-600">
              Обзор и управление A/B тестами
            </p>
          </div>
        </div>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Активные тесты</p>
                <p className="text-2xl font-bold text-gray-900">
                  {activeTests}
                </p>
                <p className="text-xs text-gray-500">
                  из {totalTests} всего
                </p>
              </div>
              <Play className="h-8 w-8 text-green-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Средняя уверенность</p>
                <p className="text-2xl font-bold text-blue-600">
                  {avgConfidence.toFixed(1)}%
                </p>
                <p className="text-xs text-gray-500">
                  статистическая значимость
                </p>
              </div>
              <TrendingUp className="h-8 w-8 text-blue-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">С победителем</p>
                <p className="text-2xl font-bold text-purple-600">
                  {testsWithWinner}
                </p>
                <p className="text-xs text-gray-500">
                  тестов с результатом
                </p>
              </div>
              <GitBranch className="h-8 w-8 text-purple-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Всего звонков</p>
                <p className="text-2xl font-bold text-orange-600">
                  {tests.reduce((sum, t) => sum + t.variantA.calls + t.variantB.calls, 0).toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  в A/B тестах
                </p>
              </div>
              <Users className="h-8 w-8 text-orange-600 opacity-20" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Фильтры */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <span className="text-sm text-gray-600">Фильтры:</span>
            </div>
            
            <Input
              placeholder="Поиск по названию кампании..."
              value={searchFilter}
              onChange={(e) => setSearchFilter(e.target.value)}
              className="w-64"
            />
            
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-40">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все статусы</SelectItem>
                <SelectItem value="active">Активные</SelectItem>
                <SelectItem value="paused">На паузе</SelectItem>
                <SelectItem value="completed">Завершенные</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={periodFilter} onValueChange={setPeriodFilter}>
              <SelectTrigger className="w-40">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все время</SelectItem>
                <SelectItem value="week">Последняя неделя</SelectItem>
                <SelectItem value="month">Последний месяц</SelectItem>
                <SelectItem value="quarter">Последний квартал</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Таблица тестов */}
      <Card>
        <CardHeader>
          <CardTitle>A/B тесты</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Кампания
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Статус
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Вариант A
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Вариант B
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Уверенность
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Результат
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredTests.map((test) => (
                  <tr key={test.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3">
                      <div>
                        <p className="font-medium text-gray-900">{test.campaignName}</p>
                        <div className="flex items-center text-xs text-gray-500 mt-1">
                          <Calendar className="h-3 w-3 mr-1" />
                          Начат {test.startDate.toLocaleDateString('ru-RU')}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      {getStatusBadge(test.status)}
                    </td>
                    <td className="px-4 py-3">
                      <div className="space-y-1">
                        <p className="text-sm font-medium">{test.variantA.agent}</p>
                        <div className="flex items-center space-x-4 text-xs text-gray-500">
                          <span>{test.variantA.traffic}% трафика</span>
                          <span>{test.variantA.calls} звонков</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Progress 
                            value={test.variantA.conversionRate} 
                            className="w-20 h-2"
                          />
                          <span className="text-xs font-medium">
                            {test.variantA.conversionRate.toFixed(1)}%
                          </span>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="space-y-1">
                        <p className="text-sm font-medium">{test.variantB.agent}</p>
                        <div className="flex items-center space-x-4 text-xs text-gray-500">
                          <span>{test.variantB.traffic}% трафика</span>
                          <span>{test.variantB.calls} звонков</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Progress 
                            value={test.variantB.conversionRate} 
                            className="w-20 h-2"
                          />
                          <span className="text-xs font-medium">
                            {test.variantB.conversionRate.toFixed(1)}%
                          </span>
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center space-x-2">
                        <Progress 
                          value={test.confidence} 
                          className="w-20 h-2"
                        />
                        <span className="text-sm font-medium">
                          {test.confidence.toFixed(1)}%
                        </span>
                      </div>
                    </td>
                    <td className="px-4 py-3">
                      {getWinnerBadge(test)}
                    </td>
                    <td className="px-4 py-3">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => router.push(`/companies/${test.campaignId}/ab-tests`)}
                      >
                        Подробнее
                        <ChevronRight className="h-4 w-4 ml-1" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/settings/aggregators/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Progress } from '@/components/ui/progress'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  ArrowLeft,
  Link2,
  Plus,
  Copy,
  ExternalLink,
  Settings,
  CheckCircle,
  XCircle,
  Clock,
  TrendingUp,
  Users,
  MousePointer,
  UserCheck,
  Activity
} from 'lucide-react'

interface Aggregator {
  id: string
  name: string
  baseUrl: string
  active: boolean
  campaigns: string[]
  parameters: {
    utm_source?: string
    utm_medium?: string
    utm_campaign?: string
    partner_id?: string
    sub_id?: string
  }
  stats?: {
    clicks: number
    registrations: number
    conversions: number
  }
}

interface OnboardingLead {
  id: string
  phone: string
  campaign: string
  aggregator: string
  funnelStatus: 'clicked' | 'started' | 'completed' | 'abandoned'
  timestamp: string
  timeSpent?: string
  step?: string
}

const mockAggregators: Aggregator[] = [
  {
    id: 'agg_1',
    name: 'Partner Network 1',
    baseUrl: 'https://partner1.com/register',
    active: true,
    campaigns: ['Новогодняя кампания', 'VIP сегмент'],
    parameters: {
      utm_source: 'hantico',
      utm_medium: 'ai_call',
      partner_id: 'HNT2024',
      sub_id: '{LEAD_ID}'
    },
    stats: {
      clicks: 1234,
      registrations: 456,
      conversions: 123
    }
  },
  {
    id: 'agg_2',
    name: 'Affiliate Platform X',
    baseUrl: 'https://afplatform.io/land',
    active: true,
    campaigns: ['Реактивация клиентов'],
    parameters: {
      utm_source: 'ai_voice',
      utm_campaign: '{CAMPAIGN_ID}',
      partner_id: 'HANTICO'
    },
    stats: {
      clicks: 567,
      registrations: 234,
      conversions: 89
    }
  },
  {
    id: 'agg_3',
    name: 'Direct Partner',
    baseUrl: 'https://direct-partner.ru/onboard',
    active: false,
    campaigns: [],
    parameters: {
      utm_source: 'hantico_ai'
    }
  }
]

const mockOnboardingData: OnboardingLead[] = [
  {
    id: 'lead_1',
    phone: '+7900***1234',
    campaign: 'Новогодняя кампания',
    aggregator: 'Partner Network 1',
    funnelStatus: 'completed',
    timestamp: '2024-01-09 10:45:00',
    timeSpent: '3м 24с'
  },
  {
    id: 'lead_2',
    phone: '+7900***2345',
    campaign: 'Реактивация клиентов',
    aggregator: 'Affiliate Platform X',
    funnelStatus: 'abandoned',
    timestamp: '2024-01-09 10:30:00',
    timeSpent: '1м 45с',
    step: 'Ввод email'
  },
  {
    id: 'lead_3',
    phone: '+7900***3456',
    campaign: 'VIP сегмент',
    aggregator: 'Partner Network 1',
    funnelStatus: 'started',
    timestamp: '2024-01-09 10:15:00',
    timeSpent: '45с',
    step: 'Подтверждение номера'
  },
  {
    id: 'lead_4',
    phone: '+7900***4567',
    campaign: 'Новогодняя кампания',
    aggregator: 'Partner Network 1',
    funnelStatus: 'clicked',
    timestamp: '2024-01-09 10:00:00'
  }
]

export default function AggregatorsPage() {
  const router = useRouter()
  const [aggregators, setAggregators] = useState<Aggregator[]>(mockAggregators)
  const [onboardingData, setOnboardingData] = useState<OnboardingLead[]>(mockOnboardingData)
  const [activeTab, setActiveTab] = useState('aggregators')

  const handleToggleAggregator = (id: string) => {
    setAggregators(prev => prev.map(agg => {
      if (agg.id === id) {
        return { ...agg, active: !agg.active }
      }
      return agg
    }))
  }

  const generateDeeplink = (aggregator: Aggregator, campaign: string) => {
    let url = aggregator.baseUrl + '?'
    const params = new URLSearchParams()
    
    Object.entries(aggregator.parameters).forEach(([key, value]) => {
      if (value) {
        const processedValue = value
          .replace('{CAMPAIGN_ID}', campaign.toLowerCase().replace(/\s+/g, '_'))
          .replace('{LEAD_ID}', 'XXXXX')
        params.append(key, processedValue)
      }
    })
    
    return url + params.toString()
  }

  const getFunnelStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return <Badge className="bg-green-100 text-green-800">Завершен</Badge>
      case 'started':
        return <Badge className="bg-blue-100 text-blue-800">В процессе</Badge>
      case 'abandoned':
        return <Badge className="bg-red-100 text-red-800">Отвалился</Badge>
      case 'clicked':
        return <Badge className="bg-gray-100 text-gray-800">Кликнул</Badge>
      default:
        return <Badge>{status}</Badge>
    }
  }

  const funnelStats = {
    clicked: onboardingData.filter(l => l.funnelStatus === 'clicked').length,
    started: onboardingData.filter(l => l.funnelStatus === 'started').length,
    completed: onboardingData.filter(l => l.funnelStatus === 'completed').length,
    abandoned: onboardingData.filter(l => l.funnelStatus === 'abandoned').length
  }

  const conversionRate = ((funnelStats.completed / onboardingData.length) * 100).toFixed(1)

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Каталог агрегаторов и диплинк-роутер</h1>
            <p className="text-gray-600">
              Управление партнерскими ссылками и отслеживание воронки регистрации
            </p>
          </div>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Добавить агрегатор
          </Button>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="mb-6">
          <TabsTrigger value="aggregators">Агрегаторы</TabsTrigger>
          <TabsTrigger value="onboarding">Онбординг-трекер</TabsTrigger>
        </TabsList>

        <TabsContent value="aggregators">
          {/* Aggregators Stats */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Активные агрегаторы</p>
                    <p className="text-2xl font-bold">
                      {aggregators.filter(a => a.active).length}
                    </p>
                  </div>
                  <Activity className="h-8 w-8 text-green-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Всего кликов</p>
                    <p className="text-2xl font-bold">
                      {aggregators.reduce((sum, a) => sum + (a.stats?.clicks || 0), 0).toLocaleString()}
                    </p>
                  </div>
                  <MousePointer className="h-8 w-8 text-blue-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Регистраций</p>
                    <p className="text-2xl font-bold">
                      {aggregators.reduce((sum, a) => sum + (a.stats?.registrations || 0), 0).toLocaleString()}
                    </p>
                  </div>
                  <UserCheck className="h-8 w-8 text-purple-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Конверсий</p>
                    <p className="text-2xl font-bold">
                      {aggregators.reduce((sum, a) => sum + (a.stats?.conversions || 0), 0).toLocaleString()}
                    </p>
                  </div>
                  <TrendingUp className="h-8 w-8 text-emerald-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Aggregators List */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {aggregators.map((aggregator) => (
              <Card key={aggregator.id}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg">{aggregator.name}</CardTitle>
                      <CardDescription className="mt-1">
                        {aggregator.baseUrl}
                      </CardDescription>
                    </div>
                    <Switch
                      checked={aggregator.active}
                      onCheckedChange={() => handleToggleAggregator(aggregator.id)}
                    />
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <Label className="text-sm">Параметры UTM</Label>
                      <div className="mt-2 space-y-1">
                        {Object.entries(aggregator.parameters).map(([key, value]) => (
                          <div key={key} className="flex items-center text-sm">
                            <span className="text-gray-600 w-32">{key}:</span>
                            <span className="font-mono text-xs">{value}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {aggregator.campaigns.length > 0 && (
                      <div>
                        <Label className="text-sm">Активные кампании</Label>
                        <div className="mt-2 flex flex-wrap gap-2">
                          {aggregator.campaigns.map((campaign, idx) => (
                            <Badge key={idx} variant="outline">{campaign}</Badge>
                          ))}
                        </div>
                      </div>
                    )}

                    {aggregator.stats && (
                      <div className="grid grid-cols-3 gap-2 pt-3 border-t">
                        <div className="text-center">
                          <p className="text-xs text-gray-600">Клики</p>
                          <p className="text-sm font-semibold">{aggregator.stats.clicks}</p>
                        </div>
                        <div className="text-center">
                          <p className="text-xs text-gray-600">Регистрации</p>
                          <p className="text-sm font-semibold">{aggregator.stats.registrations}</p>
                        </div>
                        <div className="text-center">
                          <p className="text-xs text-gray-600">Конверсии</p>
                          <p className="text-sm font-semibold">{aggregator.stats.conversions}</p>
                        </div>
                      </div>
                    )}

                    <div className="pt-3 border-t">
                      <Label className="text-sm">Пример диплинка</Label>
                      <div className="mt-2 flex items-center space-x-2">
                        <Input
                          value={generateDeeplink(aggregator, 'test_campaign')}
                          readOnly
                          className="font-mono text-xs"
                        />
                        <Button variant="outline" size="sm">
                          <Copy className="h-4 w-4" />
                        </Button>
                        <Button variant="outline" size="sm">
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>

                    <div className="flex space-x-2">
                      <Button variant="outline" size="sm" className="flex-1">
                        <Settings className="h-4 w-4 mr-2" />
                        Настроить
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="onboarding">
          {/* Onboarding Stats */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Кликнули</p>
                    <p className="text-2xl font-bold">{funnelStats.clicked}</p>
                  </div>
                  <MousePointer className="h-8 w-8 text-gray-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Начали</p>
                    <p className="text-2xl font-bold text-blue-600">{funnelStats.started}</p>
                  </div>
                  <Clock className="h-8 w-8 text-blue-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Завершили</p>
                    <p className="text-2xl font-bold text-green-600">{funnelStats.completed}</p>
                  </div>
                  <CheckCircle className="h-8 w-8 text-green-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Отвалились</p>
                    <p className="text-2xl font-bold text-red-600">{funnelStats.abandoned}</p>
                  </div>
                  <XCircle className="h-8 w-8 text-red-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Конверсия</p>
                    <p className="text-2xl font-bold text-emerald-600">{conversionRate}%</p>
                  </div>
                  <TrendingUp className="h-8 w-8 text-emerald-600 opacity-60" />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Funnel Visualization */}
          <Card className="mb-6">
            <CardHeader>
              <CardTitle>Воронка регистрации</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm">Кликнули по ссылке</span>
                    <span className="text-sm font-medium">100%</span>
                  </div>
                  <Progress value={100} className="h-3" />
                </div>
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm">Начали регистрацию</span>
                    <span className="text-sm font-medium">75%</span>
                  </div>
                  <Progress value={75} className="h-3" />
                </div>
                <div>
                  <div className="flex justify-between mb-1">
                    <span className="text-sm">Завершили регистрацию</span>
                    <span className="text-sm font-medium">{conversionRate}%</span>
                  </div>
                  <Progress value={parseFloat(conversionRate)} className="h-3" />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Onboarding Table */}
          <Card>
            <CardHeader>
              <CardTitle>Детальная статистика по лидам</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Телефон</TableHead>
                    <TableHead>Кампания</TableHead>
                    <TableHead>Агрегатор</TableHead>
                    <TableHead>Статус</TableHead>
                    <TableHead>Шаг</TableHead>
                    <TableHead>Время на сайте</TableHead>
                    <TableHead>Время события</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {onboardingData.map((lead) => (
                    <TableRow key={lead.id}>
                      <TableCell className="font-mono">{lead.phone}</TableCell>
                      <TableCell>{lead.campaign}</TableCell>
                      <TableCell>{lead.aggregator}</TableCell>
                      <TableCell>{getFunnelStatusBadge(lead.funnelStatus)}</TableCell>
                      <TableCell>{lead.step || '-'}</TableCell>
                      <TableCell>{lead.timeSpent || '-'}</TableCell>
                      <TableCell className="text-sm">{lead.timestamp}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="src/app/settings/knowledge/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  ArrowLeft,
  BookOpen,
  Plus,
  Search,
  Tag,
  AlertTriangle,
  CheckCircle,
  Edit,
  Trash2
} from 'lucide-react'

interface KnowledgeItem {
  id: string
  intent: string
  tags: string[]
  answer: string
  scriptVersion: string
  usage: number
}

interface ForbiddenPhrase {
  id: string
  phrase: string
  reason: string
  severity: 'critical' | 'high' | 'medium'
}

const mockKnowledge: KnowledgeItem[] = [
  {
    id: 'kb_1',
    intent: 'price_question',
    tags: ['цена', 'стоимость', 'сколько'],
    answer: 'Стоимость зависит от выбранного тарифа. Базовый тариф начинается от 990 рублей в месяц.',
    scriptVersion: 'v2.1',
    usage: 234
  },
  {
    id: 'kb_2',
    intent: 'refund_policy',
    tags: ['возврат', 'деньги назад', 'отмена'],
    answer: 'Мы предоставляем полный возврат средств в течение 14 дней с момента оплаты.',
    scriptVersion: 'v2.1',
    usage: 89
  },
  {
    id: 'kb_3',
    intent: 'technical_support',
    tags: ['поддержка', 'помощь', 'проблема'],
    answer: 'Техническая поддержка доступна 24/7. Вы можете связаться с нами через чат или по телефону.',
    scriptVersion: 'v2.0',
    usage: 456
  }
]

const mockForbidden: ForbiddenPhrase[] = [
  {
    id: 'fb_1',
    phrase: 'гарантированный доход',
    reason: 'Запрещено регулятором - вводит в заблуждение',
    severity: 'critical'
  },
  {
    id: 'fb_2',
    phrase: 'без риска',
    reason: 'Некорректное утверждение для финансовых продуктов',
    severity: 'high'
  },
  {
    id: 'fb_3',
    phrase: 'эксклюзивное предложение',
    reason: 'Может восприниматься как давление',
    severity: 'medium'
  }
]

export default function KnowledgePage() {
  const router = useRouter()
  const [knowledge] = useState<KnowledgeItem[]>(mockKnowledge)
  const [forbidden] = useState<ForbiddenPhrase[]>(mockForbidden)
  const [searchQuery, setSearchQuery] = useState('')

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <Badge className="bg-red-100 text-red-800">Критично</Badge>
      case 'high':
        return <Badge className="bg-orange-100 text-orange-800">Высокий</Badge>
      case 'medium':
        return <Badge className="bg-yellow-100 text-yellow-800">Средний</Badge>
      default:
        return <Badge>{severity}</Badge>
    }
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">База знаний для скрипта</h1>
            <p className="text-gray-600">
              Управление ответами на типовые вопросы и запрещенными фразами
            </p>
          </div>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            Добавить знание
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Всего ответов</p>
                <p className="text-2xl font-bold">{knowledge.length}</p>
              </div>
              <BookOpen className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Запрещенных фраз</p>
                <p className="text-2xl font-bold">{forbidden.length}</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-red-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Использований/24ч</p>
                <p className="text-2xl font-bold">779</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs defaultValue="knowledge">
        <TabsList className="mb-6">
          <TabsTrigger value="knowledge">База ответов</TabsTrigger>
          <TabsTrigger value="forbidden">Запрещенные фразы</TabsTrigger>
        </TabsList>

        <TabsContent value="knowledge">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Ответы на типовые вопросы</CardTitle>
                <div className="relative w-64">
                  <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                  <Input
                    placeholder="Поиск по интентам и тегам..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-9"
                  />
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {knowledge.map((item) => (
                  <div key={item.id} className="border rounded-lg p-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="font-medium">{item.intent}</span>
                          <Badge variant="outline" className="text-xs">
                            v{item.scriptVersion}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            {item.usage} использований
                          </Badge>
                        </div>
                        <div className="flex flex-wrap gap-1 mb-3">
                          {item.tags.map((tag, idx) => (
                            <Badge key={idx} className="bg-blue-50 text-blue-700">
                              <Tag className="h-3 w-3 mr-1" />
                              {tag}
                            </Badge>
                          ))}
                        </div>
                        <p className="text-sm text-gray-700">{item.answer}</p>
                      </div>
                      <div className="flex space-x-2">
                        <Button variant="ghost" size="sm">
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Trash2 className="h-4 w-4 text-red-500" />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="forbidden">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Запрещенные фразы</CardTitle>
                <Button variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Добавить фразу
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {forbidden.map((item) => (
                  <div key={item.id} className="border rounded-lg p-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-2">
                          <span className="font-medium text-red-600">&quot;{item.phrase}&quot;</span>
                          {getSeverityBadge(item.severity)}
                        </div>
                        <p className="text-sm text-gray-600">{item.reason}</p>
                      </div>
                      <Button variant="ghost" size="sm">
                        <Trash2 className="h-4 w-4 text-red-500" />
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 0 84% 60%;
    --primary-foreground: 0 0% 100%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 84% 4.9%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 0 84% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 0 84% 60%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 0 84% 60%;
    --primary-foreground: 0 0% 100%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 0 84% 60%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 0 84% 60%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground font-sans;
  }
}

/* Дополнительные стили для улучшенной типографики */
@layer components {
  .text-title {
    @apply text-xl font-medium text-gray-900;
  }
  
  .text-subtitle {
    @apply text-base font-medium text-gray-700;
  }
  
  .text-body {
    @apply text-sm text-gray-600;
  }
  
  .text-caption {
    @apply text-xs text-gray-500;
  }
  
  .btn-primary {
    @apply bg-red-600 hover:bg-red-700 text-white font-medium;
  }
  
  .btn-secondary {
    @apply bg-orange-400 hover:bg-orange-500 text-white font-medium;
  }
  
  .table-header {
    @apply bg-gray-50 border-b border-gray-200;
  }
  
  .table-cell {
    @apply py-3 px-4 text-sm;
  }
  
  .sidebar-icon {
    @apply w-12 h-12 rounded-lg flex items-center justify-center transition-colors;
  }
  
  .sidebar-icon-active {
    @apply bg-red-50 text-red-600;
  }
  
  .sidebar-icon-inactive {
    @apply text-gray-400 hover:bg-gray-50 hover:text-gray-600;
  }
}
</file>

<file path="src/components/dashboard/campaign-card.tsx">
'use client'

import React from 'react'
import { 
  Play, 
  Pause, 
  Square, 
  TrendingUp, 
  TrendingDown, 
  AlertTriangle,
  Users,
  Phone,
  CheckCircle,
  XCircle
} from 'lucide-react'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Campaign, CampaignMetrics } from '@/lib/types'
import { getStatusColor, getStatusText, calculatePercentage } from '@/lib/utils'

interface CampaignCardProps {
  campaign: Campaign
  metrics: CampaignMetrics
  onStart?: (campaignId: string) => void
  onPause?: (campaignId: string) => void
  onStop?: (campaignId: string) => void
  canControl?: boolean
}

export function CampaignCard({
  campaign,
  metrics,
  onStart,
  onPause,
  onStop,
  canControl = true
}: CampaignCardProps) {
  const successRate = calculatePercentage(campaign.stats.successful, campaign.stats.processed)
  const refusalRate = calculatePercentage(campaign.stats.refused, campaign.stats.processed)
  const processingRate = calculatePercentage(campaign.stats.processed, campaign.stats.totalLeads)
  
  // Определение алертов
  const alerts = []
  if (successRate < 20 && campaign.stats.processed > 10) {
    alerts.push('Низкая конверсия')
  }
  if (refusalRate > 40 && campaign.stats.processed > 10) {
    alerts.push('Высокий % отказов')
  }
  if (campaign.state === 'running' && campaign.stats.pending === 0) {
    alerts.push('Нет лидов в очереди')
  }

  const handleAction = (action: 'start' | 'pause' | 'stop', e: React.MouseEvent) => {
    e.stopPropagation()
    
    switch (action) {
      case 'start':
        onStart?.(campaign.id)
        break
      case 'pause':
        onPause?.(campaign.id)
        break
      case 'stop':
        onStop?.(campaign.id)
        break
    }
  }

  return (
    <Card 
      className="hover:shadow-lg transition-shadow"
    >
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <CardTitle className="text-lg">{campaign.name}</CardTitle>
            <div className="flex items-center space-x-2">
              <Badge className={getStatusColor(campaign.state)}>
                {getStatusText(campaign.state)}
              </Badge>
              <Badge variant="outline">{campaign.category}</Badge>
            </div>
          </div>
          
          {/* Контролы */}
          {canControl && (
            <div className="flex space-x-1">
              {campaign.state === 'draft' || campaign.state === 'stopped' ? (
                <Button
                  size="icon"
                  variant="outline"
                  className="h-8 w-8 text-green-600 hover:text-green-700"
                  onClick={(e) => handleAction('start', e)}
                  title="Запустить"
                >
                  <Play className="h-4 w-4" />
                </Button>
              ) : null}
              
              {campaign.state === 'running' ? (
                <Button
                  size="icon"
                  variant="outline"
                  className="h-8 w-8 text-yellow-600 hover:text-yellow-700"
                  onClick={(e) => handleAction('pause', e)}
                  title="Пауза"
                >
                  <Pause className="h-4 w-4" />
                </Button>
              ) : null}
              
              {campaign.state === 'paused' ? (
                <Button
                  size="icon"
                  variant="outline"
                  className="h-8 w-8 text-green-600 hover:text-green-700"
                  onClick={(e) => handleAction('start', e)}
                  title="Возобновить"
                >
                  <Play className="h-4 w-4" />
                </Button>
              ) : null}
              
              {(campaign.state === 'running' || campaign.state === 'paused') ? (
                <Button
                  size="icon"
                  variant="outline"
                  className="h-8 w-8 text-red-600 hover:text-red-700"
                  onClick={(e) => handleAction('stop', e)}
                  title="Остановить"
                >
                  <Square className="h-4 w-4" />
                </Button>
              ) : null}
            </div>
          )}
        </div>

        {/* Алерты */}
        {alerts.length > 0 && (
          <div className="flex flex-wrap gap-1 pt-2">
            {alerts.map((alert, index) => (
              <Badge 
                key={index} 
                variant="destructive" 
                className="text-xs flex items-center"
              >
                <AlertTriangle className="h-3 w-3 mr-1" />
                {alert}
              </Badge>
            ))}
          </div>
        )}
      </CardHeader>

      <CardContent className="space-y-4">
        {/* Основные метрики */}
        <div className="grid grid-cols-2 gap-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center text-sm text-gray-600">
                <Users className="h-4 w-4 mr-1" />
                Всего лидов
              </div>
              <span className="font-medium">{campaign.stats.totalLeads}</span>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center text-sm text-gray-600">
                <Phone className="h-4 w-4 mr-1" />
                Обработано
              </div>
              <span className="font-medium">
                {campaign.stats.processed} ({processingRate}%)
              </span>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center text-sm text-gray-600">
                <CheckCircle className="h-4 w-4 mr-1 text-green-500" />
                Успешно
              </div>
              <span className="font-medium text-green-600">
                {campaign.stats.successful} ({successRate}%)
              </span>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center text-sm text-gray-600">
                <XCircle className="h-4 w-4 mr-1 text-red-500" />
                Отказы
              </div>
              <span className="font-medium text-red-600">
                {campaign.stats.refused} ({refusalRate}%)
              </span>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Дозвоны</span>
              <span className="font-medium">{metrics.answerRate.toFixed(1)}%</span>
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">SMS согласия</span>
              <span className="font-medium">{metrics.smsConsentRate.toFixed(1)}%</span>
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Регистрации</span>
              <div className="flex items-center">
                <span className="font-medium">{metrics.registrationRate.toFixed(1)}%</span>
                {metrics.registrationRate > 50 ? (
                  <TrendingUp className="h-4 w-4 ml-1 text-green-500" />
                ) : (
                  <TrendingDown className="h-4 w-4 ml-1 text-red-500" />
                )}
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">В очереди</span>
              <span className="font-medium">{campaign.stats.pending}</span>
            </div>
          </div>
        </div>

        {/* Прогресс бар */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm text-gray-600">
            <span>Прогресс кампании</span>
            <span>{processingRate}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${Math.min(processingRate, 100)}%` }}
            />
          </div>
        </div>

        {/* Дополнительная информация */}
        <div className="pt-2 border-t text-xs text-gray-500 space-y-1">
          <div>Приоритет: {campaign.priority}/10</div>
          <div>Параллельность: {campaign.concurrency} звонков</div>
          {campaign.startedAt && (
            <div>Запущена: {new Date(campaign.startedAt).toLocaleString('ru-RU')}</div>
          )}
        </div>
      </CardContent>
    </Card>
  )
}
</file>

<file path="src/app/settings/notifications/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  ArrowLeft,
  AlertCircle,
  Search,
  Calendar,
  Download,
  ChevronRight,
  Clock,
  Server,
  Activity,
  Zap,
  Database,
  Shield,
  HardDrive
} from 'lucide-react'

type SystemType = 'asterisk' | 'erp_api' | 'internal_api' | 'queue' | 'auth' | 'storage'
type EventClass = 'connectivity' | 'auth_permission' | 'timeout_ratelimit' | 'validation_schema' | 'request_response' | 'mapping_integration' | 'other_unexpected'

interface ErrorGroup {
  id: string
  system: SystemType
  systemName: string
  lastErrorTime: string
  totalEvents: number
  uniqueCodes: number
  isActive: boolean
  incidents: ErrorIncident[]
}

interface ErrorIncident {
  id: string
  timestamp: string
  eventClass: EventClass
  errorCode: string
  message: string
  companyId?: string
  details: any
}

const systemInfo: Record<SystemType, { name: string; icon: any; color: string }> = {
  asterisk: { name: 'Asterisk (телефония)', icon: Zap, color: 'bg-purple-100 text-purple-800' },
  erp_api: { name: 'ERP API / Hook', icon: Database, color: 'bg-blue-100 text-blue-800' },
  internal_api: { name: 'Внутренний API', icon: Server, color: 'bg-green-100 text-green-800' },
  queue: { name: 'Очередь/шина', icon: Activity, color: 'bg-orange-100 text-orange-800' },
  auth: { name: 'Аутентификация/ключи', icon: Shield, color: 'bg-yellow-100 text-yellow-800' },
  storage: { name: 'Хранилище/файлы', icon: HardDrive, color: 'bg-gray-100 text-gray-800' }
}

const eventClassInfo: Record<EventClass, string> = {
  connectivity: 'Connectivity',
  auth_permission: 'Auth/Permission',
  timeout_ratelimit: 'Timeout/Rate limit',
  validation_schema: 'Validation/Schema',
  request_response: 'Request/Response',
  mapping_integration: 'Mapping/Integration',
  other_unexpected: 'Other/Unexpected'
}

const mockErrorGroups: ErrorGroup[] = [
  {
    id: 'group-1',
    system: 'asterisk',
    systemName: 'Asterisk (телефония)',
    lastErrorTime: '12:43 сегодня',
    totalEvents: 57,
    uniqueCodes: 3,
    isActive: true,
    incidents: [
      {
        id: 'inc-1',
        timestamp: '2025-09-22 12:43:18',
        eventClass: 'connectivity',
        errorCode: 'AST_503',
        message: 'Connection lost to Asterisk server at pbx.yourcompany.com',
        companyId: 'COMP-001',
        details: {
          server: 'pbx.yourcompany.com',
          port: 5038,
          retryCount: 5,
          lastAttempt: '12:43:18'
        }
      },
      {
        id: 'inc-2',
        timestamp: '2025-09-22 12:35:22',
        eventClass: 'timeout_ratelimit',
        errorCode: 'AST_408',
        message: 'Connection timeout after 30 seconds',
        companyId: 'COMP-002',
        details: {
          server: 'pbx.yourcompany.com',
          timeout: 30000,
          attempt: 3
        }
      }
    ]
  },
  {
    id: 'group-2',
    system: 'erp_api',
    systemName: 'ERP API / Hook',
    lastErrorTime: '2025-09-22 14:28',
    totalEvents: 24,
    uniqueCodes: 5,
    isActive: false,
    incidents: [
      {
        id: 'inc-3',
        timestamp: '2025-09-22 14:28:45',
        eventClass: 'auth_permission',
        errorCode: 'ERP_401',
        message: 'API key expired or invalid',
        companyId: 'COMP-003',
        details: {
          endpoint: '/api/v2/auth',
          statusCode: 401,
          apiKeyLastChars: '...a4b2'
        }
      },
      {
        id: 'inc-4',
        timestamp: '2025-09-22 14:15:30',
        eventClass: 'validation_schema',
        errorCode: 'ERP_422',
        message: 'Schema validation failed for order data',
        companyId: 'COMP-001',
        details: {
          endpoint: '/api/v2/orders',
          field: 'customer_id',
          expected: 'integer',
          received: 'string'
        }
      }
    ]
  },
  {
    id: 'group-3',
    system: 'internal_api',
    systemName: 'Внутренний API',
    lastErrorTime: '2025-09-21 23:45',
    totalEvents: 12,
    uniqueCodes: 2,
    isActive: false,
    incidents: [
      {
        id: 'inc-5',
        timestamp: '2025-09-21 23:45:30',
        eventClass: 'request_response',
        errorCode: 'API_500',
        message: 'Internal server error on /api/campaigns/sync',
        details: {
          url: '/api/campaigns/sync',
          statusCode: 500,
          method: 'POST'
        }
      }
    ]
  },
  {
    id: 'group-4',
    system: 'auth',
    systemName: 'Аутентификация/ключи',
    lastErrorTime: '2025-09-22 10:15',
    totalEvents: 8,
    uniqueCodes: 1,
    isActive: true,
    incidents: [
      {
        id: 'inc-6',
        timestamp: '2025-09-22 10:15:00',
        eventClass: 'auth_permission',
        errorCode: 'AUTH_TOKEN_EXPIRED',
        message: 'JWT token has expired',
        companyId: 'COMP-005',
        details: {
          tokenId: 'tok_abc123',
          expiresAt: '2025-09-22 10:00:00',
          userId: 'user_456'
        }
      }
    ]
  },
  {
    id: 'group-5',
    system: 'storage',
    systemName: 'Хранилище/файлы',
    lastErrorTime: '2025-09-22 09:30',
    totalEvents: 3,
    uniqueCodes: 1,
    isActive: false,
    incidents: [
      {
        id: 'inc-7',
        timestamp: '2025-09-22 09:30:00',
        eventClass: 'other_unexpected',
        errorCode: 'STORAGE_DISK_FULL',
        message: 'Disk space below 5% threshold',
        details: {
          partition: '/var',
          used: '95%',
          available: '2.1GB'
        }
      }
    ]
  },
  {
    id: 'group-6',
    system: 'queue',
    systemName: 'Очередь/шина',
    lastErrorTime: '2025-09-22 11:20',
    totalEvents: 15,
    uniqueCodes: 4,
    isActive: true,
    incidents: [
      {
        id: 'inc-8',
        timestamp: '2025-09-22 11:20:00',
        eventClass: 'mapping_integration',
        errorCode: 'QUEUE_MAPPING_ERROR',
        message: 'Failed to map message to campaign entity',
        companyId: 'COMP-007',
        details: {
          queue: 'campaigns.update',
          messageId: 'msg_789',
          error: 'Campaign ID not found'
        }
      }
    ]
  }
]

export default function ErrorLogsPage() {
  const router = useRouter()
  const [errorGroups] = useState<ErrorGroup[]>(mockErrorGroups)
  const [selectedPeriod, setSelectedPeriod] = useState<string>('24h')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedGroup, setSelectedGroup] = useState<ErrorGroup | null>(null)
  const [incidentSearch, setIncidentSearch] = useState('')
  const [eventClassFilter, setEventClassFilter] = useState<string>('all')
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  const getSystemIcon = (system: SystemType) => {
    const Icon = systemInfo[system].icon
    return <Icon className="h-4 w-4 text-gray-500" />
  }

  const getSystemBadge = (system: SystemType) => {
    const info = systemInfo[system]
    return <Badge className={info.color}>{info.name}</Badge>
  }

  const getEventClassBadge = (eventClass: EventClass) => {
    return <Badge variant="outline">{eventClassInfo[eventClass]}</Badge>
  }

  const formatLastError = (time: string) => {
    if (time.includes('сегодня')) {
      return time
    }
    const date = new Date(time)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.floor(diffMs / 60000)
    
    if (diffMins < 5) {
      return `${diffMins} мин назад`
    }
    return time
  }

  const filteredGroups = errorGroups.filter(group => {
    if (searchQuery && 
        !group.systemName.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false
    }
    return true
  })

  const filteredIncidents = selectedGroup?.incidents.filter(incident => {
    if (eventClassFilter !== 'all' && incident.eventClass !== eventClassFilter) {
      return false
    }
    if (incidentSearch) {
      const search = incidentSearch.toLowerCase()
      return incident.message.toLowerCase().includes(search) ||
             incident.errorCode.toLowerCase().includes(search) ||
             (incident.companyId && incident.companyId.toLowerCase().includes(search))
    }
    return true
  }) || []

  const paginatedIncidents = filteredIncidents.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  const totalPages = Math.ceil(filteredIncidents.length / itemsPerPage)

  const exportData = (format: 'csv' | 'json') => {
    const dataToExport = selectedGroup ? filteredIncidents : filteredGroups
    
    if (format === 'json') {
      const json = JSON.stringify(dataToExport, null, 2)
      const blob = new Blob([json], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `error-logs-${new Date().toISOString()}.json`
      a.click()
    } else {
      let csv = ''
      if (selectedGroup) {
        csv = 'Время,Класс события,Код,Сообщение,ID компании\n'
        filteredIncidents.forEach(incident => {
          csv += `"${incident.timestamp}","${eventClassInfo[incident.eventClass]}","${incident.errorCode}","${incident.message}","${incident.companyId || ''}"\n`
        })
      } else {
        csv = 'Группа/Система,Последняя ошибка,Всего событий,Уникальных кодов,Статус\n'
        filteredGroups.forEach(group => {
          csv += `"${group.systemName}","${group.lastErrorTime}",${group.totalEvents},${group.uniqueCodes},"${group.isActive ? 'Идут сейчас' : 'Нет новых'}"\n`
        })
      }
      const blob = new Blob([csv], { type: 'text/csv' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `error-logs-${new Date().toISOString()}.csv`
      a.click()
    }
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Логи ошибок</h1>
            <p className="text-gray-600">
              Сводка по системам • Хранение 30 дней с автоочисткой
            </p>
          </div>
        </div>
      </div>

      <Card className="mb-6">
        <CardContent className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по названию группы..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>
              <SelectTrigger className="w-[180px]">
                <Calendar className="h-4 w-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="today">Сегодня</SelectItem>
                <SelectItem value="24h">24 часа</SelectItem>
                <SelectItem value="7d">7 дней</SelectItem>
                <SelectItem value="30d">30 дней</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={() => exportData('csv')}>
                <Download className="h-4 w-4 mr-2" />
                CSV
              </Button>
              <Button variant="outline" onClick={() => exportData('json')}>
                <Download className="h-4 w-4 mr-2" />
                JSON
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Группы ошибок по системам</CardTitle>
          <CardDescription>
            Кликните на строку для просмотра деталей инцидентов
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Группа / Система</TableHead>
                <TableHead>Последняя ошибка</TableHead>
                <TableHead className="text-center">Всего событий</TableHead>
                <TableHead className="text-center">Уникальных кодов</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead className="text-right">Действие</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredGroups.map((group) => (
                <TableRow 
                  key={group.id} 
                  className="cursor-pointer hover:bg-gray-50"
                  onClick={() => setSelectedGroup(group)}
                >
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getSystemIcon(group.system)}
                      <div>
                        <p className="font-medium">{group.systemName}</p>
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1 text-sm">
                      <Clock className="h-3 w-3 text-gray-400" />
                      <span className={group.isActive ? 'text-red-600 font-medium' : 'text-gray-600'}>
                        {formatLastError(group.lastErrorTime)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="text-center">
                    <span className="font-semibold text-lg">{group.totalEvents}</span>
                  </TableCell>
                  <TableCell className="text-center">
                    <Badge variant="secondary">{group.uniqueCodes}</Badge>
                  </TableCell>
                  <TableCell>
                    {group.isActive ? (
                      <div className="flex items-center space-x-1">
                        <span className="relative flex h-2 w-2">
                          <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                          <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
                        </span>
                        <span className="text-sm text-red-600 font-medium">Идут сейчас</span>
                      </div>
                    ) : (
                      <span className="text-sm text-gray-500">Нет новых</span>
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="ghost" size="sm" className="text-blue-600">
                      Открыть
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <Dialog open={!!selectedGroup} onOpenChange={() => setSelectedGroup(null)}>
        <DialogContent className="max-w-6xl max-h-[80vh] overflow-hidden flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <span>Детали группы:</span>
              <span className="font-bold">{selectedGroup?.systemName}</span>
            </DialogTitle>
            <DialogDescription>
              Список инцидентов с фильтрацией по классу события
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex items-center space-x-4 my-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по сообщению, коду или ID компании..."
                  value={incidentSearch}
                  onChange={(e) => setIncidentSearch(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <Select value={eventClassFilter} onValueChange={setEventClassFilter}>
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Все классы" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все классы событий</SelectItem>
                <SelectItem value="connectivity">Connectivity</SelectItem>
                <SelectItem value="auth_permission">Auth/Permission</SelectItem>
                <SelectItem value="timeout_ratelimit">Timeout/Rate limit</SelectItem>
                <SelectItem value="validation_schema">Validation/Schema</SelectItem>
                <SelectItem value="request_response">Request/Response</SelectItem>
                <SelectItem value="mapping_integration">Mapping/Integration</SelectItem>
                <SelectItem value="other_unexpected">Other/Unexpected</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="outline" size="sm" onClick={() => exportData('csv')}>
              <Download className="h-4 w-4 mr-2" />
              Экспорт
            </Button>
          </div>

          <div className="flex-1 overflow-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Время</TableHead>
                  <TableHead>Класс события</TableHead>
                  <TableHead>Код ошибки</TableHead>
                  <TableHead>Сообщение</TableHead>
                  <TableHead>ID компании</TableHead>
                  <TableHead>Детали</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paginatedIncidents.map((incident) => (
                  <TableRow key={incident.id}>
                    <TableCell className="font-mono text-sm whitespace-nowrap">
                      {incident.timestamp}
                    </TableCell>
                    <TableCell>
                      {getEventClassBadge(incident.eventClass)}
                    </TableCell>
                    <TableCell>
                      <code className="text-sm bg-gray-100 px-2 py-1 rounded">
                        {incident.errorCode}
                      </code>
                    </TableCell>
                    <TableCell className="max-w-md">
                      <p className="text-sm">{incident.message}</p>
                    </TableCell>
                    <TableCell>
                      {incident.companyId ? (
                        <Badge variant="outline">{incident.companyId}</Badge>
                      ) : (
                        <span className="text-gray-400">—</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <details className="cursor-pointer">
                        <summary className="text-sm text-blue-600 hover:underline">
                          JSON
                        </summary>
                        <pre className="mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto max-w-xs">
                          {JSON.stringify(incident.details, null, 2)}
                        </pre>
                      </details>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {totalPages > 1 && (
            <div className="flex items-center justify-between mt-4 pt-4 border-t">
              <p className="text-sm text-gray-600">
                Показано {((currentPage - 1) * itemsPerPage) + 1} - {Math.min(currentPage * itemsPerPage, filteredIncidents.length)} из {filteredIncidents.length}
              </p>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                  disabled={currentPage === 1}
                >
                  Назад
                </Button>
                <div className="flex items-center space-x-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum
                    if (totalPages <= 5) {
                      pageNum = i + 1
                    } else if (currentPage <= 3) {
                      pageNum = i + 1
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i
                    } else {
                      pageNum = currentPage - 2 + i
                    }
                    return (
                      <Button
                        key={pageNum}
                        variant={currentPage === pageNum ? "default" : "outline"}
                        size="sm"
                        onClick={() => setCurrentPage(pageNum)}
                        className="w-8 h-8 p-0"
                      >
                        {pageNum}
                      </Button>
                    )
                  })}
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                  disabled={currentPage === totalPages}
                >
                  Вперед
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { format, formatDistanceToNow, isToday, isYesterday } from 'date-fns'
import { ru } from 'date-fns/locale'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

// Форматирование времени
export function formatTime(date: Date): string {
  return format(date, 'HH:mm', { locale: ru })
}

// Форматирование даты
export function formatDate(date: Date): string {
  if (isToday(date)) {
    return `Сегодня, ${formatTime(date)}`
  }
  
  if (isYesterday(date)) {
    return `Вчера, ${formatTime(date)}`
  }
  
  return format(date, 'dd.MM.yyyy HH:mm', { locale: ru })
}

// Форматирование относительного времени
export function formatRelativeTime(date: Date): string {
  return formatDistanceToNow(date, { 
    addSuffix: true, 
    locale: ru 
  })
}

// Форматирование длительности звонка
export function formatCallDuration(seconds: number): string {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  
  if (minutes === 0) {
    return `${remainingSeconds}с`
  }
  
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

// Форматирование номера телефона
export function formatPhoneNumber(phone: string): string {
  // Простое форматирование для российских номеров
  if (phone.startsWith('+7')) {
    const digits = phone.slice(2)
    if (digits.length === 10) {
      return `+7 (${digits.slice(0, 3)}) ${digits.slice(3, 6)}-${digits.slice(6, 8)}-${digits.slice(8)}`
    }
  }
  return phone
}

// Маскировка номера телефона для безопасности
export function maskPhoneNumber(phone: string): string {
  // Убираем все символы кроме цифр и +
  const cleaned = phone.replace(/[^\d+]/g, '')
  
  if (cleaned.startsWith('+7') && cleaned.length >= 11) {
    // Российский номер: +7 (9XX) XXX-XX-XX -> +7 (9••) •••-••-12
    const digits = cleaned.slice(2)
    const lastTwo = digits.slice(-2)
    return `+7 (${digits[0]}••) •••-••-${lastTwo}`
  } else if (cleaned.startsWith('8') && cleaned.length >= 10) {
    // Российский номер с 8: 8 9XX XXX XX XX -> 8 (9••) •••-••-12
    const digits = cleaned.slice(1)
    const lastTwo = digits.slice(-2)
    return `8 (${digits[0]}••) •••-••-${lastTwo}`
  } else if (cleaned.length >= 10) {
    // Общий случай - показываем первые 2-3 цифры и последние 2
    const firstPart = cleaned.slice(0, 3)
    const lastTwo = cleaned.slice(-2)
    const middleLength = cleaned.length - 5
    const middle = '•'.repeat(middleLength)
    return `${firstPart}${middle}${lastTwo}`
  }
  
  // Если номер слишком короткий, маскируем середину
  if (cleaned.length >= 4) {
    const first = cleaned[0]
    const last = cleaned.slice(-1)
    const middleLength = cleaned.length - 2
    const middle = '•'.repeat(middleLength)
    return `${first}${middle}${last}`
  }
  
  // Очень короткий номер - полная маскировка
  return '•'.repeat(cleaned.length)
}

// Получение цвета для статуса
export function getStatusColor(status: string): string {
  const colors: Record<string, string> = {
    // Статусы лидов
    'new': 'bg-blue-100 text-blue-800',
    'in_queue': 'bg-yellow-100 text-yellow-800',
    'calling': 'bg-orange-100 text-orange-800',
    'called': 'bg-gray-100 text-gray-800',
    'success': 'bg-green-100 text-green-800',
    'refused': 'bg-red-100 text-red-800',
    'blacklisted': 'bg-black text-white',
    'registered': 'bg-emerald-100 text-emerald-800',
    
    // Исходы звонков
    'answer_success': 'bg-green-100 text-green-800',
    'answer_refuse': 'bg-red-100 text-red-800',
    'no_answer': 'bg-yellow-100 text-yellow-800',
    'busy': 'bg-orange-100 text-orange-800',
    'voicemail': 'bg-purple-100 text-purple-800',
    'robot_voicemail': 'bg-indigo-100 text-indigo-800',
    'invalid': 'bg-gray-100 text-gray-800',
    'blacklist': 'bg-black text-white',
    
    // Состояния кампаний
    'running': 'bg-green-100 text-green-800',
    'paused': 'bg-yellow-100 text-yellow-800',
    'stopped': 'bg-red-100 text-red-800',
    'draft': 'bg-gray-100 text-gray-800',
    
    // Приоритеты задач
    'low': 'bg-blue-100 text-blue-800',
    'medium': 'bg-yellow-100 text-yellow-800',
    'high': 'bg-orange-100 text-orange-800',
    'urgent': 'bg-red-100 text-red-800',
    
    // Статусы задач
    'pending': 'bg-yellow-100 text-yellow-800',
    'in_progress': 'bg-blue-100 text-blue-800',
    'completed': 'bg-green-100 text-green-800',
    'cancelled': 'bg-gray-100 text-gray-800',
    
    // Статусы SMS
    'sent': 'bg-blue-100 text-blue-800',
    'delivered': 'bg-green-100 text-green-800',
    'failed': 'bg-red-100 text-red-800',
  }
  
  return colors[status] || 'bg-gray-100 text-gray-800'
}

// Получение текста для статуса на русском
export function getStatusText(status: string): string {
  const texts: Record<string, string> = {
    // Статусы лидов
    'new': 'Новый',
    'in_queue': 'В очереди',
    'calling': 'Звоним',
    'called': 'Обзвонен',
    'success': 'Успех',
    'refused': 'Отказ',
    'blacklisted': 'ЧС',
    'registered': 'Зарегистрирован',
    
    // Исходы звонков
    'answer_success': 'Успешно',
    'answer_refuse': 'Отказ',
    'no_answer': 'Не ответил',
    'busy': 'Занято',
    'voicemail': 'Автоответчик',
    'robot_voicemail': 'Робот-автоответчик',
    'invalid': 'Недоступен',
    'blacklist': 'ЧС',
    
    // Состояния кампаний
    'running': 'Запущена',
    'paused': 'Пауза',
    'stopped': 'Остановлена',
    'draft': 'Черновик',
    
    // Приоритеты задач
    'low': 'Низкий',
    'medium': 'Средний',
    'high': 'Высокий',
    'urgent': 'Срочно',
    
    // Статусы задач
    'pending': 'Ожидает',
    'in_progress': 'В работе',
    'completed': 'Выполнено',
    'cancelled': 'Отменено',
    
    // Статусы SMS
    'sent': 'Отправлено',
    'delivered': 'Доставлено',
    'failed': 'Ошибка',
  }
  
  return texts[status] || status
}

// Получение иконки для статуса
export function getStatusIcon(status: string): string {
  const icons: Record<string, string> = {
    // Статусы лидов
    'new': '🆕',
    'in_queue': '⏳',
    'calling': '📞',
    'called': '✅',
    'success': '🎉',
    'refused': '❌',
    'blacklisted': '🚫',
    'registered': '🎯',
    
    // Исходы звонков
    'answer_success': '✅',
    'answer_refuse': '❌',
    'no_answer': '📵',
    'busy': '📱',
    'voicemail': '📧',
    'robot_voicemail': '🤖',
    'invalid': '⚠️',
    'blacklist': '🚫',
    
    // Состояния кампаний
    'running': '▶️',
    'paused': '⏸️',
    'stopped': '⏹️',
    'draft': '📝',
    
    // Приоритеты задач
    'low': '🔵',
    'medium': '🟡',
    'high': '🟠',
    'urgent': '🔴',
    
    // Статусы задач
    'pending': '⏳',
    'in_progress': '🔄',
    'completed': '✅',
    'cancelled': '❌',
    
    // Статусы SMS
    'sent': '📤',
    'delivered': '✅',
    'failed': '❌',
  }
  
  return icons[status] || '❓'
}

// Вычисление процентов
export function calculatePercentage(value: number, total: number): number {
  if (total === 0) return 0
  return Math.round((value / total) * 100)
}

// Генерация случайного ID
export function generateId(prefix: string = ''): string {
  const timestamp = Date.now().toString(36)
  const random = Math.random().toString(36).substr(2, 5)
  return prefix ? `${prefix}-${timestamp}-${random}` : `${timestamp}-${random}`
}

// Валидация номера телефона
export function isValidPhoneNumber(phone: string): boolean {
  const phoneRegex = /^\+?[1-9]\d{1,14}$/
  return phoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''))
}

// Экспорт в CSV
export function exportToCSV(data: any[], filename: string): void {
  if (data.length === 0) return
  
  const headers = Object.keys(data[0])
  const csvContent = [
    headers.join(','),
    ...data.map(row => 
      headers.map(header => {
        let value = row[header]
        if (typeof value === 'string' && /\+?\d[\d\s\-\(\)]{6,}/.test(value)) {
          value = maskPhoneNumber(value)
        }
        if (typeof value === 'string' && value.includes(',')) {
          return `"${value}"`
        }
        return value
      }).join(',')
    )
  ].join('\n')
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
  const link = document.createElement('a')
  
  if (link.download !== undefined) {
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', filename)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }
}

// Дебаунс функция
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  
  return (...args: Parameters<T>) => {
    clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

// Проверка прав доступа
export function hasPermission(
  userPermissions: any,
  resource: string,
  action: string
): boolean {
  return userPermissions?.[resource]?.[action] === true
}

// Локальное хранение
export const storage = {
  get: <T>(key: string, defaultValue: T): T => {
    if (typeof window === 'undefined') return defaultValue
    
    try {
      const item = window.localStorage.getItem(key)
      return item ? JSON.parse(item) : defaultValue
    } catch {
      return defaultValue
    }
  },
  
  set: (key: string, value: any): void => {
    if (typeof window === 'undefined') return
    
    try {
      window.localStorage.setItem(key, JSON.stringify(value))
    } catch {
      // Игнорируем ошибки записи
    }
  },
  
  remove: (key: string): void => {
    if (typeof window === 'undefined') return
    
    try {
      window.localStorage.removeItem(key)
    } catch {
      // Игнорируем ошибки удаления
    }
  }
}
</file>

<file path="src/app/settings/webhooks/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  ArrowLeft,
  Webhook,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  Send,
  Filter,
  Clock,
  Activity,
  TrendingUp,
  TrendingDown,
  MoreVertical,
  Search,
  Calendar,
  Package,
  Phone,
  Database,
  Download,
  Info
} from 'lucide-react'

interface WebhookEvent {
  id: string
  timestamp: string
  type: 'numbers_received' | 'call_started' | 'call_status' | 'result_saved' | 'result_retrieved'
  status: 'delivered' | 'failed' | 'pending' | 'retrying'
  campaign: string
  endpoint: string
  payload: any
  attempts: number
  nextRetry?: string
  responseCode?: number
  responseTime?: number
  error?: string
  priority: 'high' | 'medium' | 'low'
  retryPolicy?: 'exponential' | 'linear' | 'none'
}

const mockEvents: WebhookEvent[] = [
  {
    id: 'evt_1',
    timestamp: '2025-09-15 11:03:45',
    type: 'result_retrieved',
    status: 'delivered',
    campaign: 'Новогодняя кампания',
    endpoint: 'https://crm.company.ru/api/results',
    payload: { 
      batchId: 'batch_789', 
      resultsCount: 150, 
      clientId: 'client_123',
      format: 'json',
      downloadUrl: 'https://storage/results/batch_789.json'
    },
    attempts: 1,
    responseCode: 200,
    responseTime: 89,
    priority: 'high',
    retryPolicy: 'exponential'
  },
  {
    id: 'evt_2',
    timestamp: '2025-09-15 11:02:30',
    type: 'result_saved',
    status: 'delivered',
    campaign: 'Реактивация клиентов',
    endpoint: 'https://storage.company.ru/webhook',
    payload: {
      leadId: 'LEAD-001234',
      result: 'success',
      duration: 180,
      recordingUrl: 'https://storage/recordings/rec_456.mp3',
      transcriptUrl: 'https://storage/transcripts/trans_456.txt',
      abVariant: 'A'
    },
    attempts: 1,
    responseCode: 200,
    responseTime: 145,
    priority: 'medium',
    retryPolicy: 'linear'
  },
  {
    id: 'evt_3',
    timestamp: '2025-09-15 11:01:15',
    type: 'call_status',
    status: 'failed',
    campaign: 'Обзвон базы',
    endpoint: 'https://crm.company.ru/webhook/status',
    payload: {
      leadId: 'LEAD-001235',
      callId: 'call_789',
      status: 'no_answer',
      attempts: 3,
      nextRetryAt: '2025-09-15T12:00:00Z'
    },
    attempts: 2,
    nextRetry: '11:05:00',
    error: 'Connection timeout',
    priority: 'medium',
    retryPolicy: 'exponential'
  },
  {
    id: 'evt_4',
    timestamp: '2025-09-15 11:00:00',
    type: 'call_started',
    status: 'delivered',
    campaign: 'VIP сегмент',
    endpoint: 'https://crm.company.ru/webhook/calls',
    payload: {
      leadId: 'LEAD-001236',
      phone: '+7900XXXXXXX',
      agentId: 'agent_anna',
      abVariant: 'B',
      startTime: '2025-09-15T11:00:00Z',
      campaignId: 'camp_001'
    },
    attempts: 1,
    responseCode: 200,
    responseTime: 67,
    priority: 'high',
    retryPolicy: 'linear'
  },
  {
    id: 'evt_5',
    timestamp: '2025-09-15 10:58:30',
    type: 'numbers_received',
    status: 'delivered',
    campaign: 'Холодная база',
    endpoint: 'https://queue.company.ru/webhook/numbers',
    payload: {
      batchId: 'batch_456',
      numbersCount: 1250,
      source: 'external_provider',
      validationStatus: 'completed',
      duplicatesRemoved: 45,
      blacklistFiltered: 12
    },
    attempts: 1,
    responseCode: 200,
    responseTime: 234,
    priority: 'low',
    retryPolicy: 'none'
  }
]

const stats = {
  campaignsSent: 45,      // Выслано кампаний на обзвон
  callsMade: 12456,       // Совершено звонков
  connected: 8934,        // Дозвоны
  notConnected: 3522,     // Недозвоны
  answered: 7850,         // Дозвонившихся (успешные разговоры)
  dataSaved: 7623,        // Данные сохранены
  resultRetrieved: 7401   // Забрали результат к себе в ERP
}

export default function WebhooksPage() {
  const router = useRouter()
  const [events, setEvents] = useState<WebhookEvent[]>(mockEvents)
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterType, setFilterType] = useState<string>('all')
  const [filterCampaign, setFilterCampaign] = useState<string>('all')
  const [searchQuery, setSearchQuery] = useState('')

  const handleRetry = (eventId: string) => {
    setEvents(prev => prev.map(event => {
      if (event.id === eventId) {
        return {
          ...event,
          status: 'pending',
          attempts: event.attempts + 1,
          nextRetry: '5 секунд'
        }
      }
      return event
    }))

    setTimeout(() => {
      setEvents(prev => prev.map(event => {
        if (event.id === eventId) {
          return {
            ...event,
            status: 'delivered',
            responseCode: 200,
            responseTime: 123
          }
        }
        return event
      }))
    }, 2000)
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'delivered':
        return <Badge className="bg-green-100 text-green-800">Доставлено</Badge>
      case 'failed':
        return <Badge className="bg-red-100 text-red-800">Ошибка</Badge>
      case 'retrying':
        return <Badge className="bg-yellow-100 text-yellow-800">Повтор</Badge>
      case 'pending':
        return <Badge className="bg-blue-100 text-blue-800">В очереди</Badge>
      default:
        return <Badge>{status}</Badge>
    }
  }

  const getTypeLabel = (type: string) => {
    switch (type) {
      case 'numbers_received': return 'Получен пакет номеров'
      case 'call_started': return 'Начат звонок'
      case 'call_status': return 'Статус дозвона'
      case 'result_saved': return 'Сохранён результат'
      case 'result_retrieved': return 'Клиент забрал результат'
      default: return type
    }
  }

  const filteredEvents = events.filter(event => {
    if (filterStatus !== 'all' && event.status !== filterStatus) return false
    if (filterType !== 'all' && event.type !== filterType) return false
    if (filterCampaign !== 'all' && event.campaign !== filterCampaign) return false
    if (searchQuery && !JSON.stringify(event).toLowerCase().includes(searchQuery.toLowerCase())) return false
    return true
  })

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Центр вебхуков и событий</h1>
            <p className="text-gray-600">
              Мониторинг и управление исходящими событиями системы
            </p>
          </div>
          <div className="flex space-x-2">
            <Button variant="outline">
              <Calendar className="h-4 w-4 mr-2" />
              Последние 24 часа
            </Button>
            <Button variant="outline">
              <RefreshCw className="h-4 w-4 mr-2" />
              Обновить
            </Button>
          </div>
        </div>
      </div>

      {/* Event Types Documentation */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Info className="h-5 w-5 mr-2" />
            Событийная модель системы
          </CardTitle>
          <CardDescription>
            Формализованные события жизненного цикла обзвона и их структура
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div className="p-4 border rounded-lg">
              <div className="flex items-center mb-2">
                <Package className="h-5 w-5 text-blue-600 mr-2" />
                <h4 className="font-medium">Получен пакет номеров</h4>
              </div>
              <p className="text-sm text-gray-600 mb-2">numbers_received</p>
              <p className="text-xs text-gray-500">
                Триггер: Загрузка новой базы номеров в систему. 
                Содержит информацию о количестве, валидации и фильтрации.
              </p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <div className="flex items-center mb-2">
                <Phone className="h-5 w-5 text-green-600 mr-2" />
                <h4 className="font-medium">Начат звонок</h4>
              </div>
              <p className="text-sm text-gray-600 mb-2">call_started</p>
              <p className="text-xs text-gray-500">
                Триггер: Инициация исходящего звонка. 
                Содержит ID контакта, агента, A/B вариант.
              </p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <div className="flex items-center mb-2">
                <Activity className="h-5 w-5 text-orange-600 mr-2" />
                <h4 className="font-medium">Статус дозвона</h4>
              </div>
              <p className="text-sm text-gray-600 mb-2">call_status</p>
              <p className="text-xs text-gray-500">
                Триггер: Изменение статуса звонка (отвечен, занято, не отвечает). 
                Включает информацию о повторных попытках.
              </p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <div className="flex items-center mb-2">
                <Database className="h-5 w-5 text-purple-600 mr-2" />
                <h4 className="font-medium">Сохранён результат</h4>
              </div>
              <p className="text-sm text-gray-600 mb-2">result_saved</p>
              <p className="text-xs text-gray-500">
                Триггер: Завершение обработки звонка и сохранение результата. 
                Содержит запись, транскрипт, метрики.
              </p>
            </div>
            
            <div className="p-4 border rounded-lg">
              <div className="flex items-center mb-2">
                <Download className="h-5 w-5 text-indigo-600 mr-2" />
                <h4 className="font-medium">Отдано в ERP</h4>
              </div>
              <p className="text-sm text-gray-600 mb-2">result_retrieved</p>
              <p className="text-xs text-gray-500">
                Триггер: Скачивание результатов клиентом через API или интерфейс. 
                Отслеживает потребление данных.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Выслано кампаний</p>
                <p className="text-2xl font-bold">{stats.campaignsSent.toLocaleString()}</p>
                <p className="text-xs text-gray-500 mt-1">на обзвон</p>
              </div>
              <Send className="h-8 w-8 text-blue-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Совершено звонков</p>
                <p className="text-2xl font-bold text-indigo-600">{stats.callsMade.toLocaleString()}</p>
              </div>
              <Phone className="h-8 w-8 text-indigo-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Дозвоны / Недозвоны</p>
                <p className="text-lg font-bold text-green-600">{stats.connected.toLocaleString()} / <span className="text-red-600">{stats.notConnected.toLocaleString()}</span></p>
              </div>
              <Activity className="h-8 w-8 text-gray-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Дозвонившихся</p>
                <p className="text-2xl font-bold text-green-600">{stats.answered.toLocaleString()}</p>
                <p className="text-xs text-gray-500 mt-1">успешные разговоры</p>
              </div>
              <CheckCircle className="h-8 w-8 text-green-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Данные сохранены</p>
                <p className="text-2xl font-bold text-purple-600">{stats.dataSaved.toLocaleString()}</p>
              </div>
              <Database className="h-8 w-8 text-purple-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Забрали в ERP</p>
                <p className="text-2xl font-bold text-emerald-600">{stats.resultRetrieved.toLocaleString()}</p>
                <p className="text-xs text-gray-500 mt-1">результаты</p>
              </div>
              <Download className="h-8 w-8 text-emerald-600 opacity-60" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="text-lg">Фильтры</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <Label htmlFor="search">Поиск</Label>
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="search"
                  placeholder="ID, endpoint, payload..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <div>
              <Label htmlFor="status">Статус</Label>
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger id="status">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все статусы</SelectItem>
                  <SelectItem value="delivered">Доставлено</SelectItem>
                  <SelectItem value="failed">Ошибка</SelectItem>
                  <SelectItem value="retrying">Повтор</SelectItem>
                  <SelectItem value="pending">В очереди</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="type">Тип события</Label>
              <Select value={filterType} onValueChange={setFilterType}>
                <SelectTrigger id="type">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все типы</SelectItem>
                  <SelectItem value="numbers_received">Получен пакет номеров</SelectItem>
                  <SelectItem value="call_started">Начат звонок</SelectItem>
                  <SelectItem value="call_status">Статус дозвона</SelectItem>
                  <SelectItem value="result_saved">Сохранён результат</SelectItem>
                  <SelectItem value="result_retrieved">Клиент забрал результат</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="campaign">Кампания</Label>
              <Select value={filterCampaign} onValueChange={setFilterCampaign}>
                <SelectTrigger id="campaign">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все кампании</SelectItem>
                  <SelectItem value="Новогодняя кампания">Новогодняя кампания</SelectItem>
                  <SelectItem value="Реактивация клиентов">Реактивация клиентов</SelectItem>
                  <SelectItem value="Обзвон базы">Обзвон базы</SelectItem>
                  <SelectItem value="VIP сегмент">VIP сегмент</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Events Table */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Лента событий</CardTitle>
            <Badge variant="outline">{filteredEvents.length} событий</Badge>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Время</TableHead>
                <TableHead>Тип события</TableHead>
                <TableHead>Кампания</TableHead>
                <TableHead>Endpoint</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead>Попытки</TableHead>
                <TableHead>Время ответа</TableHead>
                <TableHead className="text-right">Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredEvents.map((event) => (
                <TableRow key={event.id}>
                  <TableCell className="font-mono text-sm">
                    {event.timestamp}
                  </TableCell>
                  <TableCell>{getTypeLabel(event.type)}</TableCell>
                  <TableCell>{event.campaign}</TableCell>
                  <TableCell className="max-w-[200px] truncate">
                    <span className="font-mono text-xs">{event.endpoint}</span>
                  </TableCell>
                  <TableCell>
                    <div className="flex flex-col space-y-1">
                      {getStatusBadge(event.status)}
                      {event.error && (
                        <span className="text-xs text-red-600">{event.error}</span>
                      )}
                      {event.nextRetry && (
                        <span className="text-xs text-gray-500">Повтор: {event.nextRetry}</span>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1">
                      <span>{event.attempts}</span>
                      {event.attempts > 1 && (
                        <AlertCircle className="h-3 w-3 text-yellow-500" />
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    {event.responseTime ? (
                      <div className="flex flex-col">
                        <span className="font-mono text-sm">{event.responseTime}ms</span>
                        {event.responseCode && (
                          <span className={`text-xs ${event.responseCode === 200 ? 'text-green-600' : 'text-red-600'}`}>
                            HTTP {event.responseCode}
                          </span>
                        )}
                      </div>
                    ) : (
                      '-'
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-2">
                      {(event.status === 'failed' || event.status === 'retrying') && (
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleRetry(event.id)}
                        >
                          <RefreshCw className="h-3 w-3" />
                        </Button>
                      )}
                      <Button variant="ghost" size="sm">
                        <MoreVertical className="h-3 w-3" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/lib/types.ts">
// Роли пользователей
export type UserRole = 'admin' | 'marketer' | 'supervisor' | 'manager';

// Статусы лидов
export type LeadStatus = 
  | 'new' 
  | 'in_queue' 
  | 'calling' 
  | 'called' 
  | 'success' 
  | 'refused' 
  | 'blacklisted' 
  | 'registered';

// Исходы звонков
export type CallOutcome = 
  | 'answer_success' 
  | 'answer_refuse' 
  | 'no_answer' 
  | 'busy' 
  | 'voicemail' 
  | 'invalid' 
  | 'blacklist';

// Состояния кампаний
export type CampaignState = 'running' | 'paused' | 'stopped' | 'draft';

// Приоритеты задач
export type TaskPriority = 'low' | 'medium' | 'high' | 'urgent';

// Статусы задач
export type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';

// Статусы SMS
export type SmsStatus = 'pending' | 'sent' | 'delivered' | 'failed';

// Категории кампаний
export type CampaignCategory = 'acquisition' | 'retention' | 'reactivation';

// Типы базы для кампаний и агентов
export type BaseType = 'registration' | 'no_answer' | 'refusals' | 'reactivation';

// Сущность Lead/Контакт
export interface Lead {
  id: string;
  phone: string;
  name?: string;
  timezone?: string;
  language?: string;
  segment?: string;
  consentSms: boolean;
  status: LeadStatus;
  blacklist: boolean;
  createdAt: Date;
  updatedAt: Date;
  lastCallAt?: Date;
  registrationDate?: Date;
  tags: string[];
  metadata?: Record<string, any>;
}

// Политика повторных попыток
export interface AttemptsPolicy {
  no_answer: {
    maxAttempts: number;
    intervalMinutes: number;
  };
  busy: {
    maxAttempts: number;
    intervalMinutes: number;
  };
  voicemail: {
    action: 'stop' | 'retry';
    maxAttempts?: number;
    intervalMinutes?: number;
  };
}

// Окна дозвона
export interface CallWindow {
  dayOfWeek: number; // 0-6 (Понедельник-Воскресенье)
  startTime: string; // "09:00"
  endTime: string; // "18:00"
  timezone: string;
}

// Сущность Campaign
export interface Campaign {
  id: string;
  name: string;
  description?: string;
  baseType: BaseType; // Обязательное поле - тип базы
  source: 'csv' | 'segment' | 'manual';
  sourceConfig?: {
    csvFile?: string;
    segmentId?: string;
    filters?: Record<string, any>;
  };
  scriptId: string;
  scriptVersion: 'A' | 'B';
  callWindows: CallWindow[];
  attemptsPolicy: AttemptsPolicy;
  concurrency: number; // Параллельность звонков
  priority: number; // 1-10
  state: CampaignState;
  category: CampaignCategory;
  createdAt: Date;
  updatedAt: Date;
  startedAt?: Date;
  completedAt?: Date;
  settings: {
    enableSms: boolean;
    autoEscalation: boolean;
    recordCalls: boolean;
    enableTranscription: boolean;
  };
  stats: {
    totalLeads: number;
    processed: number;
    successful: number;
    refused: number;
    pending: number;
  };
}

// Транскрипт с таймкодами
export interface TranscriptSegment {
  timestamp: number; // секунды от начала
  speaker: 'agent' | 'client';
  text: string;
}

// Сущность Call/CDR
export interface Call {
  id: string;
  leadId: string;
  campaignId: string;
  startedAt: Date;
  endedAt?: Date;
  duration?: number; // секунды
  outcome: CallOutcome;
  consentSms: boolean;
  transcript?: TranscriptSegment[];
  audioUrl?: string;
  summary?: string;
  tags: string[];
  agentNotes?: string;
  attemptNumber: number;
  nextAttemptAt?: Date;
  metadata?: Record<string, any>;
}

// Сущность Task
export interface Task {
  id: string;
  leadId: string;
  callId?: string;
  title: string;
  description?: string;
  reason: string;
  priority: TaskPriority;
  status: TaskStatus;
  assigneeRole?: UserRole;
  assigneeId?: string;
  dueAt: Date;
  createdAt: Date;
  updatedAt: Date;
  completedAt?: Date;
  metadata?: Record<string, any>;
}

// Шаблон SMS
export interface SmsTemplate {
  id: string;
  name: string;
  text: string;
  variables: string[]; // ['name', 'link', 'brand']
  category: string;
  language: string;
  isActive: boolean;
}

// Сущность SMS
export interface Sms {
  id: string;
  leadId: string;
  templateId: string;
  text: string; // Текст с подставленными переменными
  status: SmsStatus;
  sentAt?: Date;
  deliveredAt?: Date;
  error?: string;
  metadata?: Record<string, any>;
}

// Узел скрипта
export interface ScriptNode {
  id: string;
  type: 'message' | 'question' | 'condition' | 'action';
  content: string;
  variables?: string[]; // для подстановки {name}, {brand}
  branches?: {
    [key: string]: string; // ключ ответа -> id следующего узла
  };
  actions?: {
    type: 'set_tag' | 'set_consent' | 'end_call';
    value: any;
  }[];
}

// Сущность Script
export interface Script {
  id: string;
  name: string;
  description?: string;
  version: string;
  isActive: boolean;
  language: string;
  nodes: ScriptNode[];
  startNodeId: string;
  createdAt: Date;
  updatedAt: Date;
  metadata?: Record<string, any>;
}

// Правило автоматизации
export interface AutomationRule {
  id: string;
  name: string;
  trigger: {
    event: 'call_completed' | 'task_created' | 'sms_sent';
    conditions: {
      field: string;
      operator: 'equals' | 'contains' | 'greater_than' | 'less_than';
      value: any;
    }[];
  };
  actions: {
    type: 'send_sms' | 'create_task' | 'update_lead' | 'schedule_call';
    config: Record<string, any>;
  }[];
  isActive: boolean;
  priority: number;
}

// Права доступа по ролям
export interface RolePermissions {
  role: UserRole;
  permissions: {
    campaigns: {
      view: boolean;
      create: boolean;
      edit: boolean;
      start: boolean;
      pause: boolean;
      delete: boolean;
    };
    leads: {
      view: boolean;
      edit: boolean;
      delete: boolean;
      export: boolean;
    };
    calls: {
      view: boolean;
      listen: boolean;
      transcript: boolean;
      edit_outcome: boolean;
    };
    tasks: {
      view: boolean;
      create: boolean;
      assign: boolean;
      complete: boolean;
    };
    sms: {
      send: boolean;
      view_templates: boolean;
      edit_templates: boolean;
    };
    scripts: {
      view: boolean;
      edit: boolean;
      create: boolean;
    };
    analytics: {
      view: boolean;
      export: boolean;
    };
  };
}

// Фильтры для различных списков
export interface LeadFilters {
  status?: LeadStatus[];
  segment?: string[];
  campaign?: string[];
  dateRange?: {
    from: Date;
    to: Date;
  };
  consentSms?: boolean;
  blacklist?: boolean;
}

export interface CallFilters {
  outcome?: CallOutcome[];
  campaign?: string[];
  dateRange?: {
    from: Date;
    to: Date;
  };
  duration?: {
    min?: number;
    max?: number;
  };
  consentSms?: boolean;
}

export interface TaskFilters {
  status?: TaskStatus[];
  priority?: TaskPriority[];
  assignee?: string[];
  dueDate?: {
    from: Date;
    to: Date;
  };
}

// Метрики дашборда
export interface CampaignMetrics {
  totalCalls: number;
  successfulCalls: number;
  answerRate: number; // %
  successRate: number; // %
  smsConsentRate: number; // %
  refusalRate: number; // %
  averageCallDuration: number; // секунды
  costPerLead: number;
  registrationRate: number; // %
}

export interface QueueStatus {
  active: number;
  waiting: number;
  errors: number;
  totalProcessed: number;
}

// Настройки приложения
export interface AppSettings {
  currentUser: {
    role: UserRole;
    permissions: RolePermissions;
  };
  brands: string[];
  selectedBrand?: string;
  brandEnabled: boolean;
}

// Агенты и голоса
export interface Voice {
  id: string;
  name: string;
  gender: 'male' | 'female';
  language: string;
  style: 'formal' | 'friendly' | 'energetic' | 'calm';
  sampleUrl?: string;
  provider: 'elevenlabs' | 'yandex' | 'custom';
  settings: {
    speed: number; // 0.5 - 2.0
    pitch: number; // -20 - +20
    volume: number; // 0.0 - 1.0
    stability: number; // 0.0 - 1.0
  };
}

export interface AgentPrompt {
  id: string;
  stage: string; // 'greeting', 'consent_question', 'rejection_response', etc.
  title: string;
  prompt: string;
  conditions?: {
    if: string; // условие
    then: string; // что говорить
  }[];
  fallback?: string; // что говорить если условие не сработало
}

export interface Agent {
  id: string;
  name: string;
  description: string;
  baseType: BaseType; // Тип базы, для которой подходит агент
  role: string; // 'registration_agent', 'reminder_agent', etc.
  voiceId: string;
  status: 'active' | 'inactive' | 'archived';
  prompts: AgentPrompt[];
  campaigns: string[]; // ID кампаний где используется
  settings: {
    responseDelay: number; // задержка ответа в мс
    maxSilenceDuration: number; // максимальная тишина в сек
    interruptionHandling: boolean;
  };
  createdAt: Date;
  updatedAt: Date;
  version: number;
  createdBy: string;
}

export interface AgentTest {
  id: string;
  agentId: string;
  userInput: string;
  agentResponse: string;
  stage: string;
  timestamp: Date;
  audioUrl?: string;
}

export interface VoiceLibrary {
  voices: Voice[];
  categories: {
    id: string;
    name: string;
    description: string;
    voiceIds: string[];
  }[];
}

// Версионирование и A/B тестирование
export interface AgentVersion {
  id: string;
  agentId: string;
  version: number;
  name: string;
  description?: string;
  prompts: AgentPrompt[];
  settings: {
    responseDelay: number;
    maxSilenceDuration: number;
    interruptionHandling: boolean;
  };
  createdAt: Date;
  createdBy: string;
  status: 'draft' | 'active' | 'archived';
  isBaseline?: boolean; // Базовая версия для сравнения
}

export interface ABTest {
  id: string;
  name: string;
  description: string;
  agentId: string;
  status: 'draft' | 'running' | 'completed' | 'paused';
  variants: ABTestVariant[];
  settings: ABTestSettings;
  metrics: ABTestMetrics;
  createdAt: Date;
  startedAt?: Date;
  endedAt?: Date;
  createdBy: string;
}

export interface ABTestVariant {
  id: string;
  name: string; // A, B, C, etc.
  versionId: string; // Ссылка на версию агента
  trafficAllocation: number; // Процент трафика (0-100)
  isControl?: boolean; // Контрольная группа
}

export interface ABTestSettings {
  duration: number; // Длительность в днях
  minSampleSize: number; // Минимальный размер выборки
  confidenceLevel: number; // Уровень доверия (90, 95, 99)
  primaryMetric: 'conversion_rate' | 'success_rate' | 'avg_call_duration' | 'sms_consent_rate';
  secondaryMetrics: string[];
  autoStop: boolean; // Автоматическая остановка при достижении значимости
  trafficRampUp: {
    enabled: boolean;
    startPercent: number; // Начальный процент трафика
    rampUpDays: number; // Дни для полного развертывания
  };
}

export interface ABTestMetrics {
  totalCalls: number;
  variantMetrics: {
    [variantId: string]: {
      calls: number;
      conversions: number;
      conversionRate: number;
      avgDuration: number;
      smsConsents: number;
      smsConsentRate: number;
      successRate: number;
    };
  };
  statisticalSignificance: {
    [variantId: string]: {
      pValue: number;
      isSignificant: boolean;
      confidenceInterval: [number, number];
      uplift: number; // Процентное улучшение относительно контроля
    };
  };
  winner?: string; // ID выигрывшего варианта
}

export interface PromptTemplate {
  id: string;
  name: string;
  description: string;
  stage: string;
  template: string;
  variables: string[]; // Переменные в промте {variable_name}
  category: 'greeting' | 'objection_handling' | 'closing' | 'information_gathering';
  tags: string[];
  createdAt: Date;
  updatedAt: Date;
  usageCount: number;
}
</file>

<file path="package.json">
{
  "name": "hantico-call-center",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "node scripts/dev.js",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.2",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "lucide-react": "^0.294.0",
    "next": "15.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-hook-form": "^7.48.2",
    "recharts": "^2.8.0",
    "tailwind-merge": "^2.0.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "autoprefixer": "^10.0.1",
    "eslint": "^8.0.0",
    "eslint-config-next": "15.0.0",
    "postcss": "^8.0.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.0"
  }
}
</file>

<file path="src/app/obzvoni/ab-tests/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft,
  Plus,
  Play,
  Pause,
  Square,
  BarChart3,
  TrendingUp,
  TrendingDown,
  Target,
  Users,
  Clock,
  CheckCircle,
  AlertTriangle,
  Settings,
  GitBranch,
  Phone
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { mockABTests } from '@/lib/mock-data'

// Моковые данные для A/B тестов кампаний
const mockCampaignABTests = [
  {
    id: 'campaign-ab-1',
    name: 'Персонализация приветствия',
    description: 'Тестирование персонализированного vs стандартного приветствия',
    campaignId: 'obz-1',
    campaignName: 'Тестовый обзвон 2',
    status: 'running',
    variants: [
      {
        id: 'variant-a',
        name: 'A (Стандарт)',
        description: 'Обычное приветствие',
        trafficAllocation: 50,
        isControl: true
      },
      {
        id: 'variant-b',
        name: 'B (Персонализация)',
        description: 'Персонализированное приветствие с именем',
        trafficAllocation: 50
      }
    ],
    metrics: {
      totalCalls: 847,
      variantMetrics: {
        'variant-a': {
          calls: 423,
          conversions: 289,
          conversionRate: 68.3,
          avgDuration: 145,
          smsConsents: 201,
          smsConsentRate: 47.5,
          successRate: 68.3
        },
        'variant-b': {
          calls: 424,
          conversions: 318,
          conversionRate: 75.0,
          avgDuration: 132,
          smsConsents: 234,
          smsConsentRate: 55.2,
          successRate: 75.0
        }
      },
      statisticalSignificance: {
        'variant-b': {
          pValue: 0.032,
          isSignificant: true,
          confidenceInterval: [2.1, 11.3],
          uplift: 9.8
        }
      },
      winner: 'variant-b'
    },
    settings: {
      duration: 14,
      minSampleSize: 1000,
      confidenceLevel: 95,
      primaryMetric: 'conversion_rate',
      autoStop: true
    },
    createdAt: new Date('2024-01-15T10:00:00Z'),
    startedAt: new Date('2024-01-15T12:00:00Z')
  },
]

export default function ObzvoniABTestsPage() {
  const router = useRouter()
  const [abTests] = useState(mockCampaignABTests)

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'running':
        return <Badge className="bg-green-100 text-green-800">Активен</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершён</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getMetricName = (metric: string) => {
    const names: Record<string, string> = {
      'conversion_rate': 'Конверсия в регистрацию',
      'success_rate': 'Успешность',
      'avg_call_duration': 'Длительность звонка',
      'sms_consent_rate': 'Согласие на SMS'
    }
    return names[metric] || metric
  }

  const handleCreateABTest = () => {
    router.push('/obzvoni/ab-tests/new')
  }

  const handleViewABTest = (testId: string) => {
    router.push(`/obzvoni/ab-tests/${testId}`)
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              A/B тестирование кампаний
            </h1>
            <p className="text-gray-600">
              Оптимизация кампаний обзвонов через эксперименты
            </p>
          </div>
        </div>
        
        <Button onClick={handleCreateABTest}>
          <Plus className="h-4 w-4 mr-2" />
          Создать A/B тест
        </Button>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <GitBranch className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего тестов</p>
                <p className="text-2xl font-bold text-gray-900">{abTests.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'running').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Завершённые</p>
                <p className="text-2xl font-bold text-gray-900">
                  {abTests.filter(t => t.status === 'completed').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <TrendingUp className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Кампании</p>
                <p className="text-2xl font-bold text-gray-900">3</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Список A/B тестов */}
      <div className="space-y-6">
        {abTests.length > 0 ? (
          abTests.map((test) => (
            <Card key={test.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="text-lg">{test.name}</CardTitle>
                    <p className="text-sm text-gray-600 mt-1">{test.description}</p>
                    <div className="flex items-center mt-2 space-x-2">
                      <Phone className="h-4 w-4 text-gray-400" />
                      <span className="text-sm text-gray-600">{test.campaignName}</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    {getStatusBadge(test.status)}
                    <Button size="sm" variant="outline" onClick={() => handleViewABTest(test.id)}>
                      Подробнее
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="overview" className="space-y-4">
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="overview">Обзор</TabsTrigger>
                    <TabsTrigger value="variants">Варианты</TabsTrigger>
                    <TabsTrigger value="results">Результаты</TabsTrigger>
                  </TabsList>

                  <TabsContent value="overview" className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Target className="h-4 w-4" />
                          <span className="text-sm font-medium">Основная метрика</span>
                        </div>
                        <p className="text-lg font-bold">
                          {getMetricName(test.settings.primaryMetric)}
                        </p>
                      </div>
                      
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Clock className="h-4 w-4" />
                          <span className="text-sm font-medium">Длительность</span>
                        </div>
                        <p className="text-lg font-bold">{test.settings.duration} дней</p>
                      </div>
                      
                      <div className="p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Users className="h-4 w-4" />
                          <span className="text-sm font-medium">Звонков</span>
                        </div>
                        <p className="text-lg font-bold">{test.metrics.totalCalls.toLocaleString()}</p>
                      </div>
                    </div>
                  </TabsContent>

                  <TabsContent value="variants" className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {test.variants.map((variant) => {
                        const metrics = test.metrics.variantMetrics[variant.id as keyof typeof test.metrics.variantMetrics]
                        const significance = test.metrics.statisticalSignificance[variant.id as keyof typeof test.metrics.statisticalSignificance]
                        
                        return (
                          <Card key={variant.id} className={`${variant.isControl ? 'ring-2 ring-blue-200' : ''}`}>
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between mb-3">
                                <h4 className="font-medium">{variant.name}</h4>
                                <div className="flex items-center space-x-2">
                                  {variant.isControl && (
                                    <Badge className="bg-blue-100 text-blue-800 text-xs">
                                      Контроль
                                    </Badge>
                                  )}
                                  <Badge variant="outline" className="text-xs">
                                    {variant.trafficAllocation}%
                                  </Badge>
                                </div>
                              </div>
                              
                              <p className="text-sm text-gray-600 mb-3">{variant.description}</p>
                              
                              {metrics && (
                                <div className="space-y-2">
                                  <div className="flex justify-between text-sm">
                                    <span>Звонков:</span>
                                    <span className="font-medium">{metrics.calls}</span>
                                  </div>
                                  <div className="flex justify-between text-sm">
                                    <span>Конверсия:</span>
                                    <span className="font-medium">{metrics.conversionRate}%</span>
                                  </div>
                                  <div className="flex justify-between text-sm">
                                    <span>SMS согласие:</span>
                                    <span className="font-medium">{metrics.smsConsentRate}%</span>
                                  </div>
                                  
                                  {significance && (
                                    <div className={`p-2 rounded text-xs ${
                                      significance.isSignificant 
                                        ? 'bg-green-50 text-green-800' 
                                        : 'bg-gray-50 text-gray-600'
                                    }`}>
                                      {significance.isSignificant ? (
                                        <div className="flex items-center space-x-1">
                                          <CheckCircle className="h-3 w-3" />
                                          <span>Статистически значим</span>
                                          <span className="font-medium">
                                            {significance.uplift > 0 ? '+' : ''}{significance.uplift}%
                                          </span>
                                        </div>
                                      ) : (
                                        <div className="flex items-center space-x-1">
                                          <AlertTriangle className="h-3 w-3" />
                                          <span>Недостаточно данных</span>
                                        </div>
                                      )}
                                    </div>
                                  )}
                                </div>
                              )}
                            </CardContent>
                          </Card>
                        )
                      })}
                    </div>
                  </TabsContent>

                  <TabsContent value="results" className="space-y-4">
                    {test.metrics.winner ? (
                      <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <CheckCircle className="h-5 w-5 text-green-600" />
                          <h4 className="font-medium text-green-900">Найден победитель!</h4>
                        </div>
                        <p className="text-sm text-green-800">
                          Вариант {test.variants.find(v => v.id === test.metrics.winner)?.name} 
                          показал лучшие результаты с улучшением на{' '}
                          <span className="font-medium">
                            {test.metrics.statisticalSignificance[test.metrics.winner as keyof typeof test.metrics.statisticalSignificance]?.uplift}%
                          </span>
                        </p>
                      </div>
                    ) : test.status === 'draft' ? (
                      <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Settings className="h-5 w-5 text-gray-600" />
                          <h4 className="font-medium text-gray-900">Тест в черновике</h4>
                        </div>
                        <p className="text-sm text-gray-800">
                          Тест готов к запуску. Нажмите &quot;Запустить&quot; для начала эксперимента.
                        </p>
                      </div>
                    ) : (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <Clock className="h-5 w-5 text-yellow-600" />
                          <h4 className="font-medium text-yellow-900">Тест продолжается</h4>
                        </div>
                        <p className="text-sm text-yellow-800">
                          Необходимо больше данных для определения статистически значимого результата
                        </p>
                      </div>
                    )}

                    {test.metrics.totalCalls > 0 && (
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <Card>
                          <CardHeader>
                            <CardTitle className="text-sm">Прогресс теста</CardTitle>
                          </CardHeader>
                          <CardContent>
                            <div className="space-y-3">
                              <div>
                                <div className="flex justify-between text-sm mb-1">
                                  <span>Размер выборки</span>
                                  <span>{test.metrics.totalCalls} / {test.settings.minSampleSize}</span>
                                </div>
                                <Progress 
                                  value={Math.min(100, (test.metrics.totalCalls / test.settings.minSampleSize) * 100)} 
                                  className="h-2"
                                />
                              </div>
                              
                              {test.startedAt && (
                                <div>
                                  <div className="flex justify-between text-sm mb-1">
                                    <span>Время выполнения</span>
                                    <span>
                                      {Math.ceil((Date.now() - test.startedAt.getTime()) / (1000 * 60 * 60 * 24))} / {test.settings.duration} дней
                                    </span>
                                  </div>
                                  <Progress 
                                    value={Math.min(100, ((Date.now() - test.startedAt.getTime()) / (1000 * 60 * 60 * 24 * test.settings.duration)) * 100)} 
                                    className="h-2"
                                  />
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>

                        {/* Блок настроек теста скрыт по требованиям */}
                      </div>
                    )}
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          ))
        ) : (
          <Card>
            <CardContent className="py-12">
              <div className="text-center">
                <GitBranch className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Нет A/B тестов
                </h3>
                <p className="text-gray-500 mb-6">
                  Создайте первый A/B тест для оптимизации кампаний
                </p>
                <Button onClick={handleCreateABTest}>
                  <Plus className="h-4 w-4 mr-2" />
                  Создать A/B тест
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/app/agents/[id]/test/page.tsx">
'use client'

import React, { useRef, useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Send,
  Volume2,
  Play,
  Pause,
  RotateCcw,
  MessageSquare,
  Bot,
  User,
  Mic,
  MicOff
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { mockAgents, mockVoices } from '@/lib/mock-data'
import { AgentTest } from '@/lib/types'
import { Phone } from 'lucide-react'

interface TestMessage {
  id: string
  type: 'user' | 'agent'
  content: string
  timestamp: Date
  stage?: string
  audioUrl?: string
}

export default function AgentTestPage() {
  const router = useRouter()
  const params = useParams()
  const agentId = params.id as string
  
  const agent = mockAgents.find(a => a.id === agentId)
  const voice = mockVoices.find(v => v.id === agent?.voiceId)
  
  const [messages, setMessages] = useState<TestMessage[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [currentStage, setCurrentStage] = useState('greeting')
  const [isListening, setIsListening] = useState(false)
  const [testPhone, setTestPhone] = useState('')
  const [callStatus, setCallStatus] = useState<'idle' | 'calling' | 'ringing' | 'in_call'>('idle')
  const [isVoiceCall, setIsVoiceCall] = useState(false)
  const recognitionRef = useRef<any | null>(null)

  if (!agent) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Агент не найден</p>
        <Button className="mt-4" onClick={() => router.back()}>
          Назад к списку агентов
        </Button>
      </div>
    )
  }

  const handleSendMessage = async (textParam?: string | React.MouseEvent<HTMLButtonElement>) => {
    const textToSend = typeof textParam === 'string' ? textParam.trim() : inputMessage.trim()
    if (!textToSend) return

    const userMessage: TestMessage = {
      id: `msg-${Date.now()}`,
      type: 'user',
      content: textToSend,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    // Имитация обработки сообщения агентом
    await new Promise(resolve => setTimeout(resolve, agent.settings.responseDelay))

    // Поиск подходящего промта
    const currentPrompt = agent.prompts.find(p => p.stage === currentStage)
    let agentResponse = currentPrompt?.prompt || 'Извините, я не знаю как ответить на это.'

    // Простая логика обработки ответов
    const lowerInput = textToSend.toLowerCase()
    if (lowerInput.includes('да') || lowerInput.includes('согласен') || lowerInput.includes('хорошо')) {
      if (currentStage === 'greeting') {
        setCurrentStage('consent_question')
        const nextPrompt = agent.prompts.find(p => p.stage === 'consent_question')
        agentResponse = nextPrompt?.prompt || 'Спасибо! Могу я отправить вам информацию по SMS?'
      } else if (currentStage === 'consent_question') {
        agentResponse = 'Отлично! Я отправлю вам SMS с подробной информацией. Спасибо за время!'
        setCurrentStage('completed')
      }
    } else if (lowerInput.includes('нет') || lowerInput.includes('не хочу') || lowerInput.includes('не интересно')) {
      setCurrentStage('rejection_response')
      const rejectionPrompt = agent.prompts.find(p => p.stage === 'rejection_response')
      agentResponse = rejectionPrompt?.prompt || 'Понимаю. Спасибо за время!'
    }

    const agentMessage: TestMessage = {
      id: `msg-${Date.now()}-agent`,
      type: 'agent',
      content: agentResponse,
      timestamp: new Date(),
      stage: currentStage,
      audioUrl: `/test-audio/${agent.id}-${currentStage}.mp3`
    }

    setMessages(prev => [...prev, agentMessage])
    setIsLoading(false)
  }

  const handleReset = () => {
    setMessages([])
    setCurrentStage('greeting')
    setInputMessage('')
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const toggleListening = () => {
    setIsListening(!isListening)
    // Здесь была бы интеграция с Web Speech API
  }

  // Голосовой режим через микрофон (без телефонии)
  const startVoiceCall = () => {
    const SR: any = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
    if (!SR) {
      alert('Браузер не поддерживает распознавание речи')
      return
    }
    const rec = new SR()
    rec.lang = 'ru-RU'
    rec.continuous = true
    rec.interimResults = false
    rec.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((r: any) => r[0].transcript)
        .join(' ')
      if (transcript && !isLoading) {
        handleSendMessage(transcript)
      }
    }
    rec.onend = () => {
      if (isVoiceCall) rec.start()
    }
    rec.start()
    recognitionRef.current = rec
    setIsVoiceCall(true)
    setCallStatus('in_call')
  }

  const stopVoiceCall = () => {
    try {
      recognitionRef.current?.stop?.()
    } catch {}
    recognitionRef.current = null
    setIsVoiceCall(false)
  }

  const getStageTitle = (stage: string) => {
    const stageMap: Record<string, string> = {
      'greeting': 'Приветствие',
      'consent_question': 'Вопрос о согласии',
      'rejection_response': 'Обработка отказа',
      'offer_presentation': 'Презентация предложения',
      'completed': 'Завершение'
    }
    return stageMap[stage] || stage
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Тестирование агента
            </h1>
            <p className="text-gray-600">
              {agent.name} • {voice?.name}
            </p>
          </div>
        </div>
        
        <div className="flex items-center">
          <Button variant="outline" onClick={handleReset}>
            <RotateCcw className="h-4 w-4 mr-2" />
            Сброс
          </Button>
        </div>
      </div>

      {/* Верхняя панель теста: номер и запуск */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div>
              <p className="text-sm text-gray-600 mb-1">Номер для теста</p>
              <Input
                placeholder="+7 900 000-00-00"
                value={testPhone}
                onChange={(e) => setTestPhone(e.target.value)}
              />
            </div>
            <div className="text-sm text-gray-600">
              <p>Текущий голос: <span className="font-medium">{voice?.name}</span></p>
              <p>Статус: {
                callStatus === 'idle' ? 'Готов' :
                callStatus === 'calling' ? 'Исходящий вызов' :
                callStatus === 'ringing' ? 'Ожидание ответа' : 'Разговор'
              }</p>
            </div>
            <div className="flex space-x-2">
              <Button onClick={() => { setCallStatus('calling'); setTimeout(() => setCallStatus('ringing'), 600) }}>
                <Play className="h-4 w-4 mr-2" /> Запустить
              </Button>
              {callStatus === 'ringing' && (
                <Button variant="outline" onClick={() => setCallStatus('in_call')}>Ответить</Button>
              )}
              <Button variant={isVoiceCall ? 'destructive' : 'outline'} onClick={() => (isVoiceCall ? stopVoiceCall() : startVoiceCall())}>
                <Phone className="h-4 w-4 mr-2" /> {isVoiceCall ? 'Завершить разговор' : 'Говорить через микрофон'}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Чат */}
        <div className="lg:col-span-2">
          <Card className="h-[600px] flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-center">
                <MessageSquare className="h-5 w-5 mr-2" />
                Диалог с агентом
              </CardTitle>
            </CardHeader>
            <CardContent className="flex-1 flex flex-col p-0">
              {/* Сообщения */}
              <div className="flex-1 overflow-y-auto p-6 space-y-4">
                {messages.length === 0 && (
                  <div className="text-center text-gray-500 py-12">
                    <Bot className="h-12 w-12 mx-auto mb-4 text-gray-400" />
                    <p>Начните диалог с агентом</p>
                    <p className="text-sm mt-2">
                      Агент начнёт с этапа &quot;{getStageTitle(currentStage)}&quot;
                    </p>
                  </div>
                )}
                
                {messages.map((message) => (
                  <div key={message.id} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                    <div className={`max-w-[80%] rounded-lg p-3 ${
                      message.type === 'user' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-100 text-gray-900'
                    }`}>
                      <div className="flex items-start space-x-2">
                        {message.type === 'agent' && <Bot className="h-4 w-4 mt-0.5 flex-shrink-0" />}
                        {message.type === 'user' && <User className="h-4 w-4 mt-0.5 flex-shrink-0" />}
                        <div className="flex-1">
                          <p className="text-sm">{message.content}</p>
                          <div className="flex items-center justify-between mt-2">
                            <p className={`text-xs ${message.type === 'user' ? 'text-blue-200' : 'text-gray-500'}`}>
                              {message.timestamp.toLocaleTimeString()}
                            </p>
                            {message.type === 'agent' && message.audioUrl && (
                              <Button size="sm" variant="ghost" className="h-6 w-6 p-0">
                                <Play className="h-3 w-3" />
                              </Button>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-100 rounded-lg p-3">
                      <div className="flex items-center space-x-2">
                        <Bot className="h-4 w-4" />
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Ввод сообщения */}
              <div className="border-t p-4">
                <div className="flex items-center space-x-2">
                  <div className="flex-1 relative">
                    <Input
                      placeholder="Введите сообщение от имени клиента..."
                      value={inputMessage}
                      onChange={(e) => setInputMessage(e.target.value)}
                      onKeyPress={handleKeyPress}
                      disabled={isLoading}
                    />
                  </div>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={toggleListening}
                    className={isListening ? 'bg-red-100 text-red-600' : ''}
                  >
                    {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
                  </Button>
                  <Button onClick={handleSendMessage} disabled={!inputMessage.trim() || isLoading}>
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Нажмите Enter для отправки • Используйте микрофон для голосового ввода
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Информация об агенте */}
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Информация об агенте</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm text-gray-600">Название</p>
                <p className="font-medium">{agent.name}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-600">Описание</p>
                <p className="text-sm">{agent.description}</p>
              </div>
              
              <div>
                <p className="text-sm text-gray-600">Голос</p>
                <div className="flex items-center space-x-2">
                  <Volume2 className="h-4 w-4 text-gray-400" />
                  <span className="text-sm">{voice?.name}</span>
                </div>
              </div>
              
              <Separator />
              
              <div>
                <p className="text-sm text-gray-600 mb-2">Настройки</p>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span>Задержка ответа:</span>
                    <span>{agent.settings.responseDelay} мс</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Макс. тишина:</span>
                    <span>—</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Прерывания:</span>
                    <span>{agent.settings.interruptionHandling ? 'Да' : 'Нет'}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/settings/integrations/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Switch } from '@/components/ui/switch'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  ArrowLeft,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  Key,
  Phone,
  Database,
  Activity,
  Copy,
  Eye,
  EyeOff,
  AlertTriangle,
  Shield,
  Plus,
  Edit,
  Trash2,
  Settings
} from 'lucide-react'

interface SipChannel {
  id: string
  name: string
  sipUri: string
  login: string
  password: string
  transport: 'UDP' | 'TCP' | 'TLS' | 'WS' | 'WSS'
  registration: boolean
  callerId: string
  status: 'registered' | 'unregistered' | 'error'
  updatedAt: string
  additionalParams?: string
}

export default function IntegrationsPage() {
  const router = useRouter()
  const [showApiKey, setShowApiKey] = useState(false)
  const [apiKey, setApiKey] = useState('hnt_live_example_key_1234567890abcdef')
  const [isCopied, setIsCopied] = useState(false)
  const [isRegenerating, setIsRegenerating] = useState(false)
  const [showRegenerateDialog, setShowRegenerateDialog] = useState(false)
  const [isTestingConnection, setIsTestingConnection] = useState(false)
  const [testResult, setTestResult] = useState<'success' | 'error' | null>(null)
  
  // SIP каналы
  const [sipChannels, setSipChannels] = useState<SipChannel[]>([])
  const [showSipDialog, setShowSipDialog] = useState(false)
  const [editingSipChannel, setEditingSipChannel] = useState<SipChannel | null>(null)
  const [showSipPassword, setShowSipPassword] = useState(false)
  const [defaultTestNumber, setDefaultTestNumber] = useState('+7 (999) 123-45-67')
  
  // Форма для SIP канала
  const [sipForm, setSipForm] = useState<Partial<SipChannel>>({
    name: '',
    sipUri: '',
    login: '',
    password: '',
    transport: 'UDP',
    registration: true,
    callerId: '',
    additionalParams: ''
  })
  
  // ERP API настройки - эндпоинты только для чтения
  const endpoints = {
    receiveTasks: 'https://api.hantico.ai/v1/tasks/receive',
    sendResults: 'https://api.hantico.ai/v1/results/send'
  }

  const handleCopyApiKey = () => {
    navigator.clipboard.writeText(apiKey)
    setIsCopied(true)
    setTimeout(() => setIsCopied(false), 2000)
  }

  const handleCopyEndpoint = (endpoint: string) => {
    navigator.clipboard.writeText(endpoint)
  }

  const handleRegenerateApiKey = () => {
    setIsRegenerating(true)
    // Симуляция генерации нового ключа
    setTimeout(() => {
      const newKey = 'hnt_live_' + Math.random().toString(36).substring(2, 38)
      setApiKey(newKey)
      setIsRegenerating(false)
      setShowRegenerateDialog(false)
    }, 1500)
  }

  const handleTestConnection = () => {
    setIsTestingConnection(true)
    setTestResult(null)
    
    // Симуляция тестового запроса
    setTimeout(() => {
      const success = Math.random() > 0.3
      setTestResult(success ? 'success' : 'error')
      setIsTestingConnection(false)
      
      // Очистка результата через 5 секунд
      setTimeout(() => {
        setTestResult(null)
      }, 5000)
    }, 2000)
  }

  const copyExampleCode = (type: 'receive' | 'send') => {
    const examples = {
      receive: `curl -X POST ${endpoints.receiveTasks}
  -H "Authorization: Bearer ${apiKey}"
  -H "Content-Type: application/json"
  -d '{
    "campaign_id": "CMP-123456",
    "tasks": [
      {
        "id": "TASK-001",
        "phone": "+7 (999) 123-45-67",
        "data": {
          "name": "Иван Иванов",
          "custom_field": "value"
        }
      }
    ]
  }'`,
      send: `curl -X GET ${endpoints.sendResults}
  -H "Authorization: Bearer ${apiKey}"
  -H "Content-Type: application/json"`
    }
    
    navigator.clipboard.writeText(examples[type])
  }

  const handleAddSipChannel = () => {
    setEditingSipChannel(null)
    setSipForm({
      name: '',
      sipUri: '',
      login: '',
      password: '',
      transport: 'UDP',
      registration: true,
      callerId: '',
      additionalParams: ''
    })
    setShowSipDialog(true)
  }

  const handleEditSipChannel = (channel: SipChannel) => {
    setEditingSipChannel(channel)
    setSipForm({
      ...channel
    })
    setShowSipDialog(true)
  }

  const handleSaveSipChannel = () => {
    if (editingSipChannel) {
      // Редактирование существующего канала
      setSipChannels(prev => prev.map(ch => 
        ch.id === editingSipChannel.id 
          ? { 
              ...ch, 
              ...sipForm,
              updatedAt: new Date().toISOString()
            } 
          : ch
      ))
    } else {
      // Добавление нового канала
      const newChannel: SipChannel = {
        id: Math.random().toString(36).substring(7),
        name: sipForm.name || '',
        sipUri: sipForm.sipUri || '',
        login: sipForm.login || '',
        password: sipForm.password || '',
        transport: sipForm.transport || 'UDP',
        registration: sipForm.registration || false,
        callerId: sipForm.callerId || '',
        status: Math.random() > 0.3 ? 'registered' : 'unregistered',
        updatedAt: new Date().toISOString(),
        additionalParams: sipForm.additionalParams
      }
      setSipChannels(prev => [...prev, newChannel])
    }
    
    setShowSipDialog(false)
    setSipForm({})
  }

  const handleDeleteSipChannel = (id: string) => {
    setSipChannels(prev => prev.filter(ch => ch.id !== id))
  }

  const maskUri = (uri: string) => {
    if (!uri) return ''
    const parts = uri.split('@')
    if (parts.length === 2) {
      return parts[0].substring(0, 3) + '***@' + parts[1]
    }
    return uri.substring(0, 5) + '***'
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-6">
        <Button
          variant="ghost"
          onClick={() => router.push('/settings')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Назад к настройкам
        </Button>
        
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold mb-2">Интеграции</h1>
            <p className="text-gray-600">
              Настройка подключений к ERP и телефонии
            </p>
          </div>
        </div>
      </div>

      <Tabs defaultValue="erp" className="space-y-6">
        <TabsList className="grid w-full max-w-md grid-cols-2">
          <TabsTrigger value="erp">ERP API</TabsTrigger>
          <TabsTrigger value="asterisk">Asterisk</TabsTrigger>
        </TabsList>

        {/* ERP API Tab */}
        <TabsContent value="erp" className="space-y-6">
          {/* API Key Management */}
          <Card>
            <CardHeader>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                  <Database className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <CardTitle>Управление API</CardTitle>
                  <CardDescription>
                    Ключ доступа для интеграции с вашей ERP системой
                  </CardDescription>
                </div>
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* API Key */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="api-key">API Ключ</Label>
                  <div className="flex items-center space-x-2 mt-2">
                    <div className="relative flex-1">
                      <Input
                        id="api-key"
                        type={showApiKey ? "text" : "password"}
                        value={apiKey}
                        readOnly
                        className="pr-20 font-mono text-sm"
                      />
                      <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center space-x-1">
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => setShowApiKey(!showApiKey)}
                          className="h-7 w-7 p-0"
                        >
                          {showApiKey ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={handleCopyApiKey}
                          className="h-7 w-7 p-0"
                        >
                          {isCopied ? <CheckCircle className="h-4 w-4 text-green-600" /> : <Copy className="h-4 w-4" />}
                        </Button>
                      </div>
                    </div>
                    <Button 
                      onClick={() => setShowRegenerateDialog(true)}
                      variant="outline"
                      disabled={isRegenerating}
                    >
                      {isRegenerating ? (
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <Key className="h-4 w-4 mr-2" />
                      )}
                      Регенерировать
                    </Button>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Используйте этот ключ в заголовке Authorization для всех API запросов
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Endpoints Reference */}
          <Card>
            <CardHeader>
              <CardTitle>Референс эндпоинтов</CardTitle>
              <CardDescription>
                Точки доступа для обмена данными между ERP и Hantico
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Receive Tasks Endpoint */}
              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <Label>Приём задач</Label>
                    <Badge className="bg-green-100 text-green-800">POST</Badge>
                  </div>
                  <div className="relative">
                    <Input
                      value={endpoints.receiveTasks}
                      readOnly
                      className="font-mono text-sm pr-10"
                    />
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => handleCopyEndpoint(endpoints.receiveTasks)}
                      className="absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0"
                    >
                      <Copy className="h-4 w-4" />
                    </Button>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">
                    Эндпоинт для отправки задач на обзвон из вашей ERP
                  </p>
                </div>

                {/* Example for Receive */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-sm">Пример запроса</h4>
                    <Button
                      size="sm"
                      variant="ghost"
                      onClick={() => copyExampleCode('receive')}
                    >
                      <Copy className="h-3 w-3 mr-1" />
                      Копировать
                    </Button>
                  </div>
                  <pre className="text-xs bg-gray-900 text-gray-100 p-3 rounded overflow-x-auto">
{`curl -X POST ${endpoints.receiveTasks}
  -H "Authorization: Bearer YOUR_API_KEY"
  -H "Content-Type: application/json"
  -d '{
    "campaign_id": "CMP-123456",
    "tasks": [...]
  }'`}
                  </pre>
                </div>
              </div>

              <div className="border-t pt-6">
                {/* Send Results Endpoint */}
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <Label>Выдача результатов</Label>
                      <Badge className="bg-blue-100 text-blue-800">GET</Badge>
                    </div>
                    <div className="relative">
                      <Input
                        value={endpoints.sendResults}
                        readOnly
                        className="font-mono text-sm pr-10"
                      />
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleCopyEndpoint(endpoints.sendResults)}
                        className="absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0"
                      >
                        <Copy className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      Эндпоинт для получения результатов обзвона в вашу ERP
                    </p>
                  </div>

                  {/* Example for Send */}
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h4 className="font-medium text-sm">Пример запроса</h4>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => copyExampleCode('send')}
                      >
                        <Copy className="h-3 w-3 mr-1" />
                        Копировать
                      </Button>
                    </div>
                    <pre className="text-xs bg-gray-900 text-gray-100 p-3 rounded overflow-x-auto">
{`curl -X GET ${endpoints.sendResults}
  -H "Authorization: Bearer YOUR_API_KEY"
  -H "Content-Type: application/json"`}
                    </pre>
                  </div>
                </div>
              </div>

              {/* Test Connection */}
              <div className="pt-6 border-t">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Проверка подключения</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Отправить тестовый запрос для проверки соединения
                    </p>
                  </div>
                  <Button 
                    onClick={handleTestConnection}
                    disabled={isTestingConnection}
                  >
                    {isTestingConnection ? (
                      <>
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                        Проверка...
                      </>
                    ) : (
                      <>
                        <Activity className="h-4 w-4 mr-2" />
                        Проверить подключение
                      </>
                    )}
                  </Button>
                </div>
                
                {testResult && (
                  <div className={`mt-4 p-3 rounded-lg border ${
                    testResult === 'success' 
                      ? 'bg-green-50 border-green-200' 
                      : 'bg-red-50 border-red-200'
                  }`}>
                    <div className="flex items-center">
                      {testResult === 'success' ? (
                        <>
                          <CheckCircle className="h-4 w-4 text-green-600 mr-2" />
                          <span className="text-sm text-green-700">
                            Подключение успешно установлено
                          </span>
                        </>
                      ) : (
                        <>
                          <XCircle className="h-4 w-4 text-red-600 mr-2" />
                          <span className="text-sm text-red-700">
                            Ошибка подключения. Проверьте настройки и попробуйте снова
                          </span>
                        </>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Asterisk Tab */}
        <TabsContent value="asterisk" className="space-y-6">
          {/* Default Test Number */}
          <Card>
            <CardHeader>
              <CardTitle>Тестовый номер по умолчанию</CardTitle>
              <CardDescription>
                Номер телефона для тестовых звонков из разделов Агенты и Компании
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex items-center space-x-2">
                <Input
                  value={defaultTestNumber}
                  onChange={(e) => setDefaultTestNumber(e.target.value)}
                  placeholder="+7 (999) 123-45-67"
                  className="max-w-xs"
                />
                <Button variant="outline">
                  Сохранить
                </Button>
              </div>
              <p className="text-xs text-gray-500 mt-2">
                Этот номер будет использоваться по умолчанию при тестировании агентов
              </p>
            </CardContent>
          </Card>

          {/* SIP Channels */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 rounded-lg bg-green-50 flex items-center justify-center">
                    <Phone className="h-6 w-6 text-green-600" />
                  </div>
                  <div>
                    <CardTitle>SIP-каналы</CardTitle>
                    <CardDescription>
                      Настройка подключений к телефонным станциям
                    </CardDescription>
                  </div>
                </div>
                <Button onClick={handleAddSipChannel}>
                  <Plus className="h-4 w-4 mr-2" />
                  Добавить SIP-канал
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              {sipChannels.length === 0 ? (
                <div className="text-center py-12">
                  <Phone className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600 mb-2">SIP-каналы не настроены</p>
                  <p className="text-sm text-gray-500 mb-4">
                    Добавьте первый канал для начала работы с телефонией
                  </p>
                  <Button onClick={handleAddSipChannel}>
                    <Plus className="h-4 w-4 mr-2" />
                    Добавить SIP-канал
                  </Button>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Название</TableHead>
                      <TableHead>Номер (CallerID)</TableHead>
                      <TableHead>URI/хост</TableHead>
                      <TableHead>Статус регистрации</TableHead>
                      <TableHead>Обновлён</TableHead>
                      <TableHead className="text-right">Действия</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {sipChannels.map((channel) => (
                      <TableRow key={channel.id}>
                        <TableCell className="font-medium">{channel.name}</TableCell>
                        <TableCell>{channel.callerId || '—'}</TableCell>
                        <TableCell className="font-mono text-sm">
                          {maskUri(channel.sipUri)}
                        </TableCell>
                        <TableCell>
                          {channel.status === 'registered' ? (
                            <Badge className="bg-green-100 text-green-800">
                              <CheckCircle className="h-3 w-3 mr-1" />
                              Зарегистрирован
                            </Badge>
                          ) : channel.status === 'error' ? (
                            <Badge className="bg-red-100 text-red-800">
                              <XCircle className="h-3 w-3 mr-1" />
                              Ошибка
                            </Badge>
                          ) : (
                            <Badge className="bg-gray-100 text-gray-800">
                              <AlertCircle className="h-3 w-3 mr-1" />
                              Не зарегистрирован
                            </Badge>
                          )}
                        </TableCell>
                        <TableCell className="text-sm text-gray-600">
                          {new Date(channel.updatedAt).toLocaleString('ru-RU', {
                            day: 'numeric',
                            month: 'short',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex items-center justify-end space-x-2">
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => handleEditSipChannel(channel)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => handleDeleteSipChannel(channel.id)}
                            >
                              <Trash2 className="h-4 w-4 text-red-600" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Regenerate Key Dialog */}
      <Dialog open={showRegenerateDialog} onOpenChange={setShowRegenerateDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <AlertTriangle className="h-5 w-5 text-yellow-600 mr-2" />
              Регенерация API ключа
            </DialogTitle>
            <DialogDescription>
              <div className="space-y-3 mt-4">
                <p>
                  Вы уверены, что хотите сгенерировать новый API ключ?
                </p>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                  <p className="text-sm text-yellow-800">
                    <strong>Внимание:</strong> Текущий ключ будет немедленно инвалидирован. 
                    Все существующие интеграции перестанут работать до обновления ключа в вашей ERP системе.
                  </p>
                </div>
                <div className="flex items-center space-x-2 text-sm text-gray-600">
                  <Shield className="h-4 w-4" />
                  <span>Убедитесь, что вы готовы обновить ключ во всех интеграциях</span>
                </div>
              </div>
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowRegenerateDialog(false)}>
              Отмена
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleRegenerateApiKey}
              disabled={isRegenerating}
            >
              {isRegenerating ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Генерация...
                </>
              ) : (
                <>
                  <Key className="h-4 w-4 mr-2" />
                  Сгенерировать новый ключ
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* SIP Channel Dialog */}
      <Dialog open={showSipDialog} onOpenChange={setShowSipDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>
              {editingSipChannel ? 'Редактирование SIP-канала' : 'Новый SIP-канал'}
            </DialogTitle>
            <DialogDescription>
              Настройте параметры подключения к вашей телефонной станции
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="sip-name">
                  <span className="text-red-500">*</span> Название канала
                </Label>
                <Input
                  id="sip-name"
                  value={sipForm.name || ''}
                  onChange={(e) => setSipForm({ ...sipForm, name: e.target.value })}
                  placeholder="Основной канал"
                  className="mt-2"
                />
              </div>
              
              <div>
                <Label htmlFor="sip-uri">
                  <span className="text-red-500">*</span> SIP URI/хост
                </Label>
                <Input
                  id="sip-uri"
                  value={sipForm.sipUri || ''}
                  onChange={(e) => setSipForm({ ...sipForm, sipUri: e.target.value })}
                  placeholder="sip:user@domain.com или 192.168.1.1"
                  className="mt-2"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="sip-login">
                  <span className="text-red-500">*</span> Логин
                </Label>
                <Input
                  id="sip-login"
                  value={sipForm.login || ''}
                  onChange={(e) => setSipForm({ ...sipForm, login: e.target.value })}
                  placeholder="user123"
                  className="mt-2"
                />
              </div>
              
              <div>
                <Label htmlFor="sip-password">
                  <span className="text-red-500">*</span> Пароль
                </Label>
                <div className="relative mt-2">
                  <Input
                    id="sip-password"
                    type={showSipPassword ? "text" : "password"}
                    value={sipForm.password || ''}
                    onChange={(e) => setSipForm({ ...sipForm, password: e.target.value })}
                    placeholder="••••••••"
                    className="pr-10"
                  />
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => setShowSipPassword(!showSipPassword)}
                    className="absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 p-0"
                  >
                    {showSipPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                  </Button>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="sip-transport">Transport</Label>
                <Select 
                  value={sipForm.transport}
                  onValueChange={(value: any) => setSipForm({ ...sipForm, transport: value })}
                >
                  <SelectTrigger className="mt-2">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="UDP">UDP</SelectItem>
                    <SelectItem value="TCP">TCP</SelectItem>
                    <SelectItem value="TLS">TLS</SelectItem>
                    <SelectItem value="WS">WS</SelectItem>
                    <SelectItem value="WSS">WSS</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <div>
                <Label htmlFor="sip-callerid">Outbound CallerID</Label>
                <Input
                  id="sip-callerid"
                  value={sipForm.callerId || ''}
                  onChange={(e) => setSipForm({ ...sipForm, callerId: e.target.value })}
                  placeholder="+7 (495) 123-45-67"
                  className="mt-2"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Номер, отображаемый при исходящих звонках
                </p>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Switch
                id="sip-registration"
                checked={sipForm.registration}
                onCheckedChange={(checked) => setSipForm({ ...sipForm, registration: checked })}
              />
              <Label htmlFor="sip-registration">
                Регистрация на сервере
              </Label>
            </div>

            <div>
              <Label htmlFor="sip-additional">
                Дополнительные параметры (опционально)
              </Label>
              <Input
                id="sip-additional"
                value={sipForm.additionalParams || ''}
                onChange={(e) => setSipForm({ ...sipForm, additionalParams: e.target.value })}
                placeholder="key=value;key2=value2"
                className="mt-2"
              />
              <p className="text-xs text-gray-500 mt-1">
                Дополнительные SIP-параметры в формате key=value через точку с запятой
              </p>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowSipDialog(false)}>
              Отмена
            </Button>
            <Button 
              onClick={handleSaveSipChannel}
              disabled={!sipForm.name || !sipForm.sipUri || !sipForm.login || !sipForm.password}
            >
              {editingSipChannel ? 'Сохранить изменения' : 'Добавить канал'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/agents/page.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Plus,
  Archive,
  Play,
  Users,
  Search,
  Filter,
  Copy,
  Building2,
  ChevronRight,
  Trash2,
  AlertTriangle,
  Phone,
  FileText,
  Volume2,
  Lock,
  XCircle
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog'
import { mockAgents, mockVoices } from '@/lib/mock-data'
import { Agent, UserRole } from '@/lib/types'
import { storage } from '@/lib/utils'
import { Alert, AlertDescription } from '@/components/ui/alert'

// Мок данных кампаний для агентов
const mockCampaigns = [
  { id: 'cmp-1', name: 'Новогодняя акция 2025', status: 'active' },
  { id: 'cmp-2', name: 'Привлечение новых клиентов', status: 'active' },
  { id: 'cmp-3', name: 'Реактивация базы', status: 'paused' },
  { id: 'cmp-4', name: 'Опрос удовлетворенности', status: 'completed' },
]

interface AgentWithCampaigns extends Agent {
  campaignsCount?: number
  campaignsDetails?: Array<{ id: string; name: string; status: string }>
}

export default function AgentsPage() {
  const router = useRouter()
  const [currentRole, setCurrentRole] = useState<UserRole>('admin')
  const [agents] = useState<AgentWithCampaigns[]>(mockAgents.map(agent => ({
    ...agent,
    // Добавляем случайное количество кампаний для каждого агента
    campaignsCount: Math.floor(Math.random() * 5),
    campaignsDetails: mockCampaigns.slice(0, Math.floor(Math.random() * 4))
  })))
  const [searchQuery, setSearchQuery] = useState('')
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterRole, setFilterRole] = useState<string>('all')
  const [filterBaseType, setFilterBaseType] = useState<string>('all')
  const [selectedAgentCampaigns, setSelectedAgentCampaigns] = useState<any>(null)
  const [showCampaignsDialog, setShowCampaignsDialog] = useState(false)
  const [deleteDialog, setDeleteDialog] = useState<{show: boolean, agent: any, action?: 'delete' | 'archive'}>({
    show: false,
    agent: null,
    action: 'delete'
  })

  // Загрузка текущей роли при монтировании
  useEffect(() => {
    const savedRole = storage.get<UserRole>('currentRole', 'admin')
    setCurrentRole(savedRole)
    
    // Подписка на изменения роли
    const interval = setInterval(() => {
      const newRole = storage.get<UserRole>('currentRole', 'admin')
      if (newRole !== currentRole) {
        setCurrentRole(newRole)
      }
    }, 1000)
    
    return () => clearInterval(interval)
  }, [currentRole])

  // Фильтрация агентов
  const filteredAgents = agents.filter(agent => {
    const matchesSearch = agent.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         agent.description.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesStatus = filterStatus === 'all' || agent.status === filterStatus
    const matchesRole = filterRole === 'all' || agent.role === filterRole
    const matchesBaseType = filterBaseType === 'all' || agent.baseType === filterBaseType
    
    return matchesSearch && matchesStatus && matchesRole && matchesBaseType
  })

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активен</Badge>
      case 'inactive':
        return <Badge className="bg-yellow-100 text-yellow-800">Черновик</Badge>
      case 'archived':
        return <Badge className="bg-gray-100 text-gray-800">Архив</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const handleShowCampaigns = (agent: any) => {
    setSelectedAgentCampaigns(agent)
    setShowCampaignsDialog(true)
  }

  const handleCopyAgent = (agent: any) => {
    // Логика копирования агента
    console.log('Копирование агента:', agent.name)
    // Можно добавить тост уведомление
  }

  const handleArchiveAgent = (agent: any) => {
    // Проверка роли
    if (currentRole === 'marketer') {
      setDeleteDialog({ 
        show: true, 
        agent,
        action: 'archive'
      })
      return
    }
    
    // Проверяем, есть ли активные кампании
    const activeCampaigns = agent.campaignsDetails?.filter((c: any) => c.status === 'active')
    if (activeCampaigns && activeCampaigns.length > 0) {
      setDeleteDialog({ 
        show: true, 
        agent,
        action: 'archive'
      })
    } else {
      console.log(agent.status === 'archived' ? 'Активировать' : 'Архивировать', agent.name)
    }
  }

  const handleDeleteAgent = (agent: any) => {
    // Проверка роли
    if (currentRole === 'marketer') {
      setDeleteDialog({ 
        show: true, 
        agent,
        action: 'delete'
      })
      return
    }
    
    // Проверяем, есть ли активные кампании
    const activeCampaigns = agent.campaignsDetails?.filter((c: any) => c.status === 'active')
    if (activeCampaigns && activeCampaigns.length > 0) {
      setDeleteDialog({ 
        show: true, 
        agent,
        action: 'delete'
      })
    } else {
      if (confirm(`Удалить агента "${agent.name}"?`)) {
        console.log('Удаление агента:', agent.name)
      }
    }
  }

  const getRoleName = (role: string) => {
    const roleMap: Record<string, string> = {
      'registration_agent': 'Регистрация',
      'reactivation_agent': 'Реактивация',
      'cold_calling_agent': 'Холодные звонки',
      'support_agent': 'Поддержка',
      'sales_agent': 'Продажи'
    }
    return roleMap[role] || role
  }

  const getBaseTypeBadge = (baseType: string) => {
    switch (baseType) {
      case 'registration':
        return <Badge className="bg-blue-100 text-blue-800">Регистрация</Badge>
      case 'no_answer':
        return <Badge className="bg-yellow-100 text-yellow-800">Недозвон</Badge>
      case 'refusals':
        return <Badge className="bg-red-100 text-red-800">Отказники</Badge>
      case 'reactivation':
        return <Badge className="bg-purple-100 text-purple-800">Отклики/реактивация</Badge>
      default:
        return <Badge>{baseType}</Badge>
    }
  }

  const getVoiceName = (voiceId: string) => {
    const voice = mockVoices.find(v => v.id === voiceId)
    return voice?.name || 'Неизвестно'
  }

  const handleCreateAgent = () => {
    router.push('/agents/new')
  }

  const handleEditAgent = (agentId: string) => {
    router.push(`/agents/${agentId}/edit`)
  }

  const handleTestAgent = (agentId: string) => {
    router.push(`/agents/${agentId}/test`)
  }

  const handleViewAgent = (agentId: string) => {
    router.push(`/agents/${agentId}`)
  }

  const handleEditPrompts = (agentId: string) => {
    router.push(`/agents/${agentId}/prompts`)
  }

  const handleABTests = (agentId: string) => {
    router.push(`/agents/${agentId}/ab-tests`)
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Агенты</h1>
          <p className="text-gray-600">
            Управление AI-агентами для автоматических обзвонов
          </p>
        </div>
        
        <Button onClick={handleCreateAgent}>
          <Plus className="h-4 w-4 mr-2" />
          Создать агента
        </Button>
      </div>

      {/* Статистика */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-gray-100 rounded-lg">
                <Users className="h-6 w-6 text-gray-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего</p>
                <p className="text-2xl font-bold text-gray-900">{agents.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные</p>
                <p className="text-2xl font-bold text-gray-900">
                  {agents.filter(a => a.status === 'active').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <FileText className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Черновики</p>
                <p className="text-2xl font-bold text-gray-900">
                  {agents.filter(a => a.status === 'inactive').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <Archive className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Архив</p>
                <p className="text-2xl font-bold text-gray-900">
                  {agents.filter(a => a.status === 'archived').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Фильтры в линию */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center space-x-3">
            {/* Поиск по названию */}
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Поиск по названию..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 h-9"
              />
            </div>

            {/* Роль агента */}
            <Select value={filterRole} onValueChange={setFilterRole}>
              <SelectTrigger className="w-[180px] h-9">
                <SelectValue placeholder="Роль агента" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все роли</SelectItem>
                <SelectItem value="registration_agent">Регистрация</SelectItem>
                <SelectItem value="reactivation_agent">Реактивация</SelectItem>
                <SelectItem value="cold_calling_agent">Холодные звонки</SelectItem>
                <SelectItem value="support_agent">Поддержка</SelectItem>
                <SelectItem value="sales_agent">Продажи</SelectItem>
              </SelectContent>
            </Select>

            {/* Статус */}
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-[150px] h-9">
                <SelectValue placeholder="Статус" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все статусы</SelectItem>
                <SelectItem value="active">Активные</SelectItem>
                <SelectItem value="inactive">Черновики</SelectItem>
                <SelectItem value="archived">Архив</SelectItem>
              </SelectContent>
            </Select>

            {/* Кнопка сброса */}
            {(searchQuery || filterRole !== 'all' || filterStatus !== 'all') && (
              <Button 
                variant="ghost"
                size="sm" 
                onClick={() => {
                  setSearchQuery('')
                  setFilterStatus('all')
                  setFilterRole('all')
                  setFilterBaseType('all')
                }}
                className="h-9"
              >
                <XCircle className="h-4 w-4 mr-1" />
                Сбросить
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Список агентов */}
      <Card>
        <CardHeader>
          <CardTitle>Агенты ({filteredAgents.length})</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Название
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Подзаголовок
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Описание
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Где используется
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Статус
                  </th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Быстрые действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredAgents.map((agent: any) => (
                  <tr 
                    key={agent.id} 
                    className="hover:bg-gray-50 cursor-pointer"
                    onClick={() => handleViewAgent(agent.id)}
                  >
                    {/* Название */}
                    <td className="px-6 py-4 whitespace-nowrap" onClick={(e) => e.stopPropagation()}>
                      <div className="text-sm font-medium text-gray-900">
                        {agent.name}
                      </div>
                    </td>
                    
                    {/* Подзаголовок (роль) */}
                    <td className="px-6 py-4 whitespace-nowrap" onClick={(e) => e.stopPropagation()}>
                      <div className="text-sm text-gray-600">
                        {getRoleName(agent.role)}
                      </div>
                    </td>
                    
                    {/* Описание (короткое) */}
                    <td className="px-6 py-4" onClick={(e) => e.stopPropagation()}>
                      <div className="text-sm text-gray-500 max-w-xs truncate">
                        {agent.description}
                      </div>
                    </td>
                    
                    {/* Где используется (ID компаний) */}
                    <td className="px-6 py-4" onClick={(e) => e.stopPropagation()}>
                      {agent.campaignsDetails && agent.campaignsDetails.length > 0 ? (
                        <div className="flex flex-wrap gap-1">
                          {agent.campaignsDetails.slice(0, 3).map((campaign: any) => (
                            <Badge 
                              key={campaign.id} 
                              variant="outline" 
                              className="text-xs cursor-pointer hover:bg-gray-50"
                              onClick={() => router.push(`/companies/${campaign.id}`)}
                            >
                              {campaign.id}
                            </Badge>
                          ))}
                          {agent.campaignsDetails.length > 3 && (
                            <Badge 
                              variant="outline" 
                              className="text-xs cursor-pointer hover:bg-blue-50"
                              onClick={() => handleShowCampaigns(agent)}
                            >
                              +{agent.campaignsDetails.length - 3}
                            </Badge>
                          )}
                        </div>
                      ) : (
                        <span className="text-sm text-gray-400">—</span>
                      )}
                    </td>
                    
                    {/* Статус */}
                    <td className="px-6 py-4 whitespace-nowrap" onClick={(e) => e.stopPropagation()}>
                      {getStatusBadge(agent.status)}
                    </td>
                    
                    {/* Быстрые действия */}
                    <td className="px-6 py-4 whitespace-nowrap text-center" onClick={(e) => e.stopPropagation()}>
                      <div className="flex items-center justify-center space-x-1">
                        {/* Протестировать - с подменю */}
                        <div className="relative group">
                          <Button
                            size="sm"
                            variant="ghost"
                            title="Протестировать"
                            className="hover:bg-blue-50"
                          >
                            <Phone className="h-4 w-4 text-blue-600" />
                          </Button>
                          <div className="absolute top-8 left-0 hidden group-hover:block z-10">
                            <div className="bg-white border rounded-lg shadow-lg p-1 min-w-[160px]">
                              <button
                                onClick={() => handleTestAgent(agent.id)}
                                className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 rounded flex items-center space-x-2"
                              >
                                <Volume2 className="h-4 w-4" />
                                <span>Прослушать голос</span>
                              </button>
                              <button
                                onClick={() => handleTestAgent(agent.id)}
                                className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 rounded flex items-center space-x-2"
                              >
                                <Phone className="h-4 w-4" />
                                <span>Звонок в браузер</span>
                              </button>
                            </div>
                          </div>
                        </div>
                        
                        {/* Скопировать */}
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => handleCopyAgent(agent)}
                          title="Скопировать"
                          className="hover:bg-green-50"
                        >
                          <Copy className="h-4 w-4 text-green-600" />
                        </Button>
                        
                        {/* Удалить */}
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => handleDeleteAgent(agent)}
                          title="Удалить"
                          className="hover:bg-red-50"
                        >
                          <Trash2 className="h-4 w-4 text-red-600" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {filteredAgents.length === 0 && (
            <div className="text-center py-12">
              <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">
                {searchQuery || filterStatus !== 'all' || filterRole !== 'all' 
                  ? 'Агенты не найдены по заданным фильтрам'
                  : 'Пока нет созданных агентов'
                }
              </p>
              {(!searchQuery && filterStatus === 'all' && filterRole === 'all') && (
                <Button className="mt-4" onClick={handleCreateAgent}>
                  <Plus className="h-4 w-4 mr-2" />
                  Создать первого агента
                </Button>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Диалог удаления с проверкой привязок и роли */}
      <Dialog open={deleteDialog.show} onOpenChange={(open) => setDeleteDialog({ show: open, agent: null, action: 'delete' })}>
        <DialogContent className="max-w-md">
          {currentRole === 'marketer' ? (
            /* Для маркетолога - показываем ограничение роли */
            <>
              <DialogHeader>
                <DialogTitle className="flex items-center space-x-2">
                  <Lock className="h-5 w-5 text-red-500" />
                  <span>Действие недоступно</span>
                </DialogTitle>
                <DialogDescription>
                  Ваша роль не позволяет {deleteDialog.action === 'delete' ? 'удалять' : 'архивировать'} агентов
                </DialogDescription>
              </DialogHeader>
              
              <Alert className="border-red-200 bg-red-50">
                <XCircle className="h-4 w-4 text-red-600" />
                <AlertDescription className="text-sm">
                  <div className="space-y-2">
                    <p className="font-medium text-red-800">
                      Роль «Маркетолог» имеет ограниченные права:
                    </p>
                    <ul className="list-disc list-inside text-red-700 space-y-1">
                      <li>Запуск и управление кампаниями</li>
                      <li>Просмотр агентов и их настроек</li>
                      <li className="font-medium">Создание/редактирование/удаление агентов недоступно</li>
                    </ul>
                  </div>
                </AlertDescription>
              </Alert>
              
              {deleteDialog.agent?.campaignsDetails && deleteDialog.agent.campaignsDetails.length > 0 && (
                <div className="mt-4 space-y-3">
                  <p className="text-sm text-gray-600 font-medium">
                    Агент используется в кампаниях:
                  </p>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {deleteDialog.agent.campaignsDetails.map((campaign: any) => (
                      <div 
                        key={campaign.id}
                        className="flex items-center justify-between p-2 border rounded-lg bg-gray-50"
                      >
                        <div className="flex items-center space-x-2">
                          <Building2 className="h-4 w-4 text-gray-500" />
                          <div>
                            <p className="font-medium text-sm">{campaign.name}</p>
                            <p className="text-xs text-gray-500">ID: {campaign.id}</p>
                          </div>
                        </div>
                        <Badge variant="outline" className={
                          campaign.status === 'active' ? 'text-green-700 border-green-300' :
                          campaign.status === 'paused' ? 'text-yellow-700 border-yellow-300' :
                          'text-gray-700 border-gray-300'
                        }>
                          {campaign.status === 'active' ? 'Активна' :
                           campaign.status === 'paused' ? 'На паузе' : 'Завершена'}
                        </Badge>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setDeleteDialog({ show: false, agent: null, action: 'delete' })}
                >
                  Закрыть
                </Button>
              </DialogFooter>
            </>
          ) : (
            /* Для других ролей - показываем привязки к кампаниям */
            <>
              <DialogHeader>
                <DialogTitle className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-yellow-500" />
                  <span>Невозможно {deleteDialog.action === 'delete' ? 'удалить' : 'архивировать'} агента</span>
                </DialogTitle>
                <DialogDescription>
                  Агент &ldquo;{deleteDialog.agent?.name}&rdquo; используется в активных кампаниях
                </DialogDescription>
              </DialogHeader>
              
              <div className="space-y-3 max-h-64 overflow-y-auto">
                <p className="text-sm text-gray-600">
                  Для {deleteDialog.action === 'delete' ? 'удаления' : 'архивирования'} агента необходимо сначала отвязать его от следующих активных кампаний:
                </p>
                
                {deleteDialog.agent?.campaignsDetails?.filter((c: any) => c.status === 'active').map((campaign: any) => (
                  <div 
                    key={campaign.id}
                    className="flex items-center justify-between p-2 border rounded-lg bg-yellow-50 border-yellow-200"
                  >
                    <div className="flex items-center space-x-2">
                      <Building2 className="h-4 w-4 text-yellow-600" />
                      <div>
                        <p className="font-medium text-sm">{campaign.name}</p>
                        <p className="text-xs text-gray-500">ID: {campaign.id}</p>
                      </div>
                    </div>
                    <Badge className="bg-green-100 text-green-800">Активна</Badge>
                  </div>
                ))}
              </div>
              
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setDeleteDialog({ show: false, agent: null, action: 'delete' })}
                >
                  Понятно
                </Button>
                <Button
                  onClick={() => {
                    handleShowCampaigns(deleteDialog.agent)
                    setDeleteDialog({ show: false, agent: null, action: 'delete' })
                  }}
                >
                  Посмотреть кампании
                </Button>
              </DialogFooter>
            </>
          )}
        </DialogContent>
      </Dialog>

      {/* Диалог со списком кампаний */}
      <Dialog open={showCampaignsDialog} onOpenChange={setShowCampaignsDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Кампании с агентом &ldquo;{selectedAgentCampaigns?.name}&rdquo;</DialogTitle>
            <DialogDescription>
              Список кампаний, в которых используется данный агент
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-3 max-h-96 overflow-y-auto">
            {selectedAgentCampaigns?.campaigns?.map((campaign: any) => (
              <div 
                key={campaign.id}
                className="flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 cursor-pointer"
                onClick={() => router.push(`/companies/${campaign.id}`)}
              >
                <div className="flex items-center space-x-3">
                  <Building2 className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="font-medium text-sm">{campaign.name}</p>
                    <p className="text-xs text-gray-500">ID: {campaign.id}</p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {campaign.status === 'active' && (
                    <Badge className="bg-green-100 text-green-800">Активна</Badge>
                  )}
                  {campaign.status === 'paused' && (
                    <Badge className="bg-yellow-100 text-yellow-800">На паузе</Badge>
                  )}
                  {campaign.status === 'completed' && (
                    <Badge className="bg-gray-100 text-gray-800">Завершена</Badge>
                  )}
                  <ChevronRight className="h-4 w-4 text-gray-400" />
                </div>
              </div>
            ))}
            
            {(!selectedAgentCampaigns?.campaigns || selectedAgentCampaigns.campaigns.length === 0) && (
              <p className="text-center text-gray-500 py-4">
                Агент пока не используется в кампаниях
              </p>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/companies/[id]/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Play,
  Pause,
  Square,
  Copy,
  Phone,
  Clock,
  CheckCircle,
  XCircle,
  MessageSquare,
  Users,
  Download,
  FileText,
  Volume2,
  AlertTriangle,
  Check,
  Link2,
  UserCheck,
  PhoneOff,
  Bot,
  Calendar,
  Filter,
  FileDown,
  GitBranch
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { maskPhoneNumber } from '@/lib/utils'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { BaseType } from '@/lib/types'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'
import { DateFilter } from '@/components/ui/date-filter'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'

interface CompanyDetails {
  id: string
  companyId: string
  name: string
  baseType: BaseType
  status: 'active' | 'paused' | 'completed' | 'draft'
  agent: string
  voice: string
  // Метрики передачи в ERP
  totalReceived: number  // Сколько контактов передано ERP
  totalProcessed: number  // Сколько обработано
  totalInProgress: number  // Сколько в работе
  // Декомпозиция обработанных
  successfulTransferred: number  // Успешно передано
  refusals: number  // Отказы
  noAnswers: number  // Недозвоны
  voicemails: number  // Автоответчики (человек)
  robotVoicemails: number  // Автоответчики (роботы)
  progress: number
  historicalConversion: number  // Историческая результативность
  startTime?: Date
  endTime?: Date
}

interface CallRecord {
  id: string
  leadId: string  // ID контакта вместо номера
  dateTime: Date
  result: 'success' | 'refused' | 'no_answer' | 'voicemail' | 'robot_voicemail' | 'busy'
  category: string  // Категория результата
  duration: number
  hasTransferred: boolean
  hasLinkClick: boolean
  hasRegistration: boolean
  transferredToErp: boolean  // Флаг "передано в ERP/B24"
  hasRecording: boolean
  hasTranscript: boolean
  abVariant?: 'A' | 'B'  // Вариант A/B теста
}

// Моковые данные
const mockCompanyDetails: { [key: string]: CompanyDetails } = {
  'obz-1': {
    id: 'obz-1',
    companyId: 'CMP-1A2B3C4D',
    name: 'Новогодняя акция 2025',
    baseType: 'registration' as BaseType,
    status: 'active',
    agent: 'Анна',
    voice: 'Женский дружелюбный',
    totalReceived: 2500,
    totalProcessed: 1847,
    totalInProgress: 653,
    successfulTransferred: 1234,
    refusals: 312,
    noAnswers: 189,
    voicemails: 71,
    robotVoicemails: 41,
    progress: 73.88,
    historicalConversion: 68.4,
    startTime: new Date(Date.now() - 3 * 60 * 60 * 1000)
  },
  'obz-2': {
    id: 'obz-2',
    companyId: 'CMP-5E6F7G8H',
    name: 'Реактивация клиентов',
    baseType: 'reactivation' as BaseType,
    status: 'paused',
    agent: 'Михаил',
    voice: 'Мужской деловой',
    totalReceived: 1800,
    totalProcessed: 456,
    totalInProgress: 1344,
    successfulTransferred: 234,
    refusals: 89,
    noAnswers: 78,
    voicemails: 35,
    robotVoicemails: 20,
    progress: 25.33,
    historicalConversion: 51.3,
    startTime: new Date(Date.now() - 6 * 60 * 60 * 1000)
  },
  'obz-3': {
    id: 'obz-3',
    companyId: 'CMP-9I0J1K2L',
    name: 'Холодная база январь',
    baseType: 'no_answer' as BaseType,
    status: 'completed',
    agent: 'Елена',
    voice: 'Женский энергичный',
    totalReceived: 850,
    totalProcessed: 850,
    totalInProgress: 0,
    successfulTransferred: 445,
    refusals: 178,
    noAnswers: 156,
    voicemails: 51,
    robotVoicemails: 20,
    progress: 100,
    historicalConversion: 52.4,
    startTime: new Date(Date.now() - 24 * 60 * 60 * 1000),
    endTime: new Date(Date.now() - 2 * 60 * 60 * 1000)
  }
}

const mockCallRecords: CallRecord[] = [
  {
    id: 'call-1',
    leadId: 'LEAD-001234',
    dateTime: new Date(Date.now() - 2 * 60 * 60 * 1000),
    result: 'success',
    category: 'Передано успешно',
    duration: 245,
    hasTransferred: true,
    hasLinkClick: true,
    hasRegistration: true,
    transferredToErp: true,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'A'
  },
  {
    id: 'call-2',
    leadId: 'LEAD-002345',
    dateTime: new Date(Date.now() - 3 * 60 * 60 * 1000),
    result: 'refused',
    category: 'Отказ',
    duration: 89,
    hasTransferred: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'B'
  },
  {
    id: 'call-3',
    leadId: 'LEAD-003456',
    dateTime: new Date(Date.now() - 4 * 60 * 60 * 1000),
    result: 'voicemail',
    category: 'Автоответчик',
    duration: 15,
    hasTransferred: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'A'
  },
  {
    id: 'call-6',
    leadId: 'LEAD-004567',
    dateTime: new Date(Date.now() - 7 * 60 * 60 * 1000),
    result: 'robot_voicemail',
    category: 'Робот-автоответчик',
    duration: 5,
    hasTransferred: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'B'
  },
  {
    id: 'call-4',
    leadId: 'LEAD-005678',
    dateTime: new Date(Date.now() - 5 * 60 * 60 * 1000),
    result: 'no_answer',
    category: 'Недозвон',
    duration: 0,
    hasTransferred: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'A'
  },
  {
    id: 'call-5',
    leadId: 'LEAD-006789',
    dateTime: new Date(Date.now() - 6 * 60 * 60 * 1000),
    result: 'success',
    category: 'Передано успешно',
    duration: 312,
    hasTransferred: true,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: true,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'B'
  }
]

export default function CompanyDetailsPage() {
  const router = useRouter()
  const params = useParams()
  const companyId = params.id as string
  
  const [company, setCompany] = useState<CompanyDetails | null>(
    mockCompanyDetails[companyId] || null
  )
  const [callRecords] = useState<CallRecord[]>(mockCallRecords)
  const [isLoading, setIsLoading] = useState(false)
  const [isCopied, setIsCopied] = useState(false)
  // Единый период для всей страницы
  const [globalPeriod, setGlobalPeriod] = useState('all')
  const [globalIntervalStart, setGlobalIntervalStart] = useState('')
  const [globalIntervalEnd, setGlobalIntervalEnd] = useState('')
  const [searchFilter, setSearchFilter] = useState('')
  const [resultFilter, setResultFilter] = useState('all')
  const [showExportModal, setShowExportModal] = useState(false)
  const [exportPeriod, setExportPeriod] = useState('today')
  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([])
  
  // Состояния для графика
  const [selectedMetric, setSelectedMetric] = useState<'success' | 'refusal' | 'noAnswer' | 'voicemail' | 'robot'>('success')
  const [isAbTest, setIsAbTest] = useState(false) // Мок для A/B теста

  const handleCompanyAction = async (action: 'start' | 'pause' | 'stop') => {
    if (!company) return
    
    setIsLoading(true)
    setTimeout(() => {
      setCompany(prev => prev ? {
        ...prev,
        status: action === 'start' ? 'active' : action === 'pause' ? 'paused' : 'completed'
      } : null)
      setIsLoading(false)
    }, 1000)
  }

  const handleCopyCompanyId = () => {
    if (company) {
      navigator.clipboard.writeText(company.companyId)
      setIsCopied(true)
      setTimeout(() => setIsCopied(false), 2000)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активна</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершена</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getResultBadge = (result: string, category: string) => {
    switch (result) {
      case 'success':
        return <Badge className="bg-green-100 text-green-800">{category}</Badge>
      case 'refused':
        return <Badge className="bg-red-100 text-red-800">{category}</Badge>
      case 'no_answer':
        return <Badge className="bg-gray-100 text-gray-800">{category}</Badge>
      case 'voicemail':
        return <Badge className="bg-purple-100 text-purple-800">{category}</Badge>
      case 'robot_voicemail':
        return <Badge className="bg-indigo-100 text-indigo-800">{category}</Badge>
      case 'busy':
        return <Badge className="bg-orange-100 text-orange-800">Занято</Badge>
      default:
        return <Badge>{category}</Badge>
    }
  }

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleExport = () => {
    // Фильтруем данные по периоду и статусам
    const filteredData = callRecords.filter(call => {
      if (selectedStatuses.length > 0 && !selectedStatuses.includes(call.result)) {
        return false
      }
      // Здесь бы была логика фильтрации по периоду
      return true
    })

    // Создаем CSV строку БЕЗ номеров телефонов
    const csvHeader = 'lead_id,call_id,datetime,result,category,duration_seconds,has_transferred,has_link_click,has_registration,transferred_to_erp\n'
    const csvRows = filteredData.map(call => 
      `${call.leadId},${call.id},${call.dateTime.toISOString()},${call.result},${call.category},${call.duration},${call.hasTransferred},${call.hasLinkClick},${call.hasRegistration},${call.transferredToErp}`
    ).join('\n')
    
    const csvContent = csvHeader + csvRows
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `campaign_${company?.id}_calls_${new Date().toISOString().split('T')[0]}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    setShowExportModal(false)
    setSelectedStatuses([])
  }

  const statusOptions = [
    { value: 'success', label: 'Успешные' },
    { value: 'refused', label: 'Отказы' },
    { value: 'no_answer', label: 'Недозвоны' },
    { value: 'voicemail', label: 'Автоответчики' },
    { value: 'robot_voicemail', label: 'Роботы' },
    { value: 'busy', label: 'Занято' }
  ]

  if (!company) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card>
          <CardContent className="p-12">
            <div className="text-center">
              <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h2 className="text-lg font-medium text-gray-900 mb-2">Компания не найдена</h2>
              <p className="text-gray-600 mb-4">
                Компания с ID &quot;{companyId}&quot; не существует или была удалена.
              </p>
              <Button onClick={() => router.push('/companies')}>
                Вернуться к списку
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {company.name}
            </h1>
            <p className="text-gray-600">
              Карточка компании и результаты обзвона
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          {getStatusBadge(company.status)}
          
          <Button 
            variant="outline"
            onClick={() => router.push(`/companies/${company.id}/ab-tests`)}
          >
            <GitBranch className="h-4 w-4 mr-2" />
            A/B тесты
          </Button>
          
          <div className="flex space-x-2">
            {company.status === 'draft' && (
              <Button 
                onClick={() => handleCompanyAction('start')}
                disabled={isLoading}
              >
                <Play className="h-4 w-4 mr-2" />
                Запустить
              </Button>
            )}
            {company.status === 'active' && (
              <>
                <Button 
                  variant="outline"
                  onClick={() => handleCompanyAction('pause')}
                  disabled={isLoading}
                >
                  <Pause className="h-4 w-4 mr-2" />
                  Пауза
                </Button>
                <Button 
                  variant="destructive"
                  onClick={() => handleCompanyAction('stop')}
                  disabled={isLoading}
                >
                  <Square className="h-4 w-4 mr-2" />
                  Завершить
                </Button>
              </>
            )}
            {company.status === 'paused' && (
              <>
                <Button 
                  onClick={() => handleCompanyAction('start')}
                  disabled={isLoading}
                >
                  <Play className="h-4 w-4 mr-2" />
                  Продолжить
                </Button>
                <Button 
                  variant="destructive"
                  onClick={() => handleCompanyAction('stop')}
                  disabled={isLoading}
                >
                  <Square className="h-4 w-4 mr-2" />
                  Завершить
                </Button>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Верхняя информационная панель - расширенный хедер */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-6 gap-6">
            <div>
              <p className="text-sm text-gray-600 mb-1">Статус</p>
              <div className="flex items-center space-x-2">
                {getStatusBadge(company.status)}
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Тип базы</p>
              <Badge className={
                company.baseType === 'registration' ? 'bg-blue-100 text-blue-800' :
                company.baseType === 'no_answer' ? 'bg-yellow-100 text-yellow-800' :
                company.baseType === 'refusals' ? 'bg-red-100 text-red-800' :
                'bg-purple-100 text-purple-800'
              }>
                {company.baseType === 'registration' ? 'Регистрация' :
                 company.baseType === 'no_answer' ? 'Недозвон' :
                 company.baseType === 'refusals' ? 'Отказники' :
                 'Отклики/реактивация'}
              </Badge>
            </div>
            
            <div>
              <p className="text-sm text-gray-600 mb-1">Агент</p>
              <div className="flex items-center">
                <Bot className="h-4 w-4 text-gray-400 mr-2" />
                <span className="font-medium">{company.agent}</span>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Историческая результативность</p>
              <div className="flex items-center">
                <span className="text-xl font-bold text-green-600">{company.historicalConversion}%</span>
                <span className="text-xs text-gray-500 ml-2">успешных звонков за все время</span>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Company ID</p>
              <div className="flex items-center space-x-2">
                <code className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">
                  {company.companyId}
                </code>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleCopyCompanyId}
                >
                  {isCopied ? (
                    <Check className="h-3 w-3 text-green-600" />
                  ) : (
                    <Copy className="h-3 w-3" />
                  )}
                </Button>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Прогресс</p>
              <div className="flex items-center space-x-2">
                <Progress value={company.progress} className="flex-1" />
                <span className="text-sm font-medium">{company.progress}%</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Основные метрики с учетом периода */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Статистика за период</CardTitle>
            <DateFilter
              value={globalPeriod}
              onValueChange={setGlobalPeriod}
              intervalStart={globalIntervalStart}
              intervalEnd={globalIntervalEnd}
              onIntervalChange={(start, end) => {
                setGlobalIntervalStart(start)
                setGlobalIntervalEnd(end)
              }}
              label=""
              className="w-[180px]"
            />
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-6">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-600">Всего принято</p>
                    <p className="text-2xl font-bold text-gray-900">
                      {company.totalReceived.toLocaleString()}
                    </p>
                    <p className="text-xs text-gray-500">
                      контактов от ERP
                    </p>
                  </div>
                  <Users className="h-8 w-8 text-gray-600 opacity-20" />
                </div>
              </CardContent>
            </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Обработано</p>
                <p className="text-2xl font-bold text-blue-600">
                  {company.totalProcessed.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.totalProcessed / company.totalReceived) * 100)}% от принятых
                </p>
              </div>
              <CheckCircle className="h-8 w-8 text-blue-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">В работе</p>
                <p className="text-2xl font-bold text-orange-600">
                  {company.totalInProgress.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.totalInProgress / company.totalReceived) * 100)}% от принятых
                </p>
              </div>
              <Clock className="h-8 w-8 text-orange-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">
                  {company.baseType === 'registration' ? 'Регистрации' :
                   company.baseType === 'no_answer' ? 'Дозвоны' :
                   company.baseType === 'refusals' ? 'Переубеждения' :
                   'Реактивации'}
                </p>
                <p className="text-2xl font-bold text-green-600">
                  {company.successfulTransferred.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.successfulTransferred / company.totalProcessed) * 100)}% конверсия
                </p>
              </div>
              <UserCheck className="h-8 w-8 text-green-600 opacity-20" />
            </div>
          </CardContent>
        </Card>
          </div>
        </CardContent>
      </Card>

      {/* График динамики метрик */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Динамика метрик</CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                Процент от обзвоненных контактов
              </p>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Чекбокс A/B теста */}
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="ab-test"
                  checked={isAbTest}
                  onCheckedChange={(checked) => setIsAbTest(checked as boolean)}
                />
                <Label htmlFor="ab-test" className="text-sm cursor-pointer">
                  A/B тест
                </Label>
              </div>
              
              {/* Переключатель метрик */}
              <div className="flex items-center space-x-2">
                <Label className="text-sm">Метрика:</Label>
                <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
                  <Button
                    size="sm"
                    variant={selectedMetric === 'success' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('success')}
                    className={selectedMetric === 'success' ? 'bg-green-600 hover:bg-green-700' : ''}
                  >
                    Успех
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'refusal' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('refusal')}
                    className={selectedMetric === 'refusal' ? 'bg-red-600 hover:bg-red-700' : ''}
                  >
                    Отказ
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'noAnswer' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('noAnswer')}
                    className={selectedMetric === 'noAnswer' ? 'bg-gray-600 hover:bg-gray-700' : ''}
                  >
                    Недозвон
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'voicemail' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('voicemail')}
                    className={selectedMetric === 'voicemail' ? 'bg-purple-600 hover:bg-purple-700' : ''}
                  >
                    Автоответчик
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'robot' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('robot')}
                    className={selectedMetric === 'robot' ? 'bg-indigo-600 hover:bg-indigo-700' : ''}
                  >
                    Робот
                  </Button>
                </div>
              </div>
              
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* График динамики */}
          <div className="space-y-4">
            {/* Легенда для A/B теста */}
            {isAbTest && (
              <div className="flex items-center justify-end space-x-4 text-sm">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-blue-500 rounded mr-2"></div>
                  <span>Σ (сумма)</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded mr-2"></div>
                  <span>Агент A</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-orange-500 rounded mr-2"></div>
                  <span>Агент B</span>
                </div>
              </div>
            )}
            
            {/* Область графика */}
            <div className="bg-gray-50 rounded-lg p-6">
              {/* График всегда линейный с улучшенным масштабированием */}
              <div className="relative h-64">
                  {/* Линейный график с синхронизацией периода */}
                  <div className="absolute inset-0 flex flex-col">
                    {/* Сетка Y-оси */}
                    <div className="absolute inset-0 flex flex-col justify-between">
                      {[100, 75, 50, 25, 0].map((value) => (
                        <div key={value} className="flex items-center">
                          <span className="text-xs text-gray-400 -ml-10 w-8 text-right">{value}%</span>
                          <div className="flex-1 border-b border-gray-200 ml-2"></div>
                        </div>
                      ))}
                    </div>
                    
                    {/* SVG с графиком */}
                    <svg className="absolute inset-0 w-full h-full" style={{ marginLeft: '0px' }}>
                      {isAbTest ? (
                        /* A/B тест - 3 линии */
                        <>
                          {/* Линия общая (синяя) */}
                          <polyline
                            points="10,35 90,30 170,33 250,28 330,31 410,26 490,29 570,24 650,27 730,22 810,25 890,20"
                            fill="none"
                            stroke="#3b82f6"
                            strokeWidth="3"
                          />
                          
                          {/* Линия Агент A (зеленая) */}
                          <polyline
                            points="10,40 90,33 170,37 250,31 330,34 410,29 490,32 570,27 650,30 730,26 810,28 890,25"
                            fill="none"
                            stroke="#10b981"
                            strokeWidth="3"
                          />
                          
                          {/* Линия Агент B (оранжевая) */}
                          <polyline
                            points="10,32 90,25 170,29 250,23 330,26 410,21 490,24 570,19 650,22 730,18 810,20 890,17"
                            fill="none"
                            stroke="#f97316"
                            strokeWidth="3"
                          />
                        </>
                      ) : (
                        /* Обычный режим - одна линия */
                        <polyline
                          points="10,35 90,30 170,33 250,28 330,31 410,26 490,29 570,24 650,27 730,22 810,25 890,20"
                          fill="none"
                          stroke={
                            selectedMetric === 'success' ? '#10b981' :
                            selectedMetric === 'refusal' ? '#ef4444' :
                            selectedMetric === 'noAnswer' ? '#6b7280' :
                            selectedMetric === 'voicemail' ? '#a855f7' :
                            '#6366f1'
                          }
                          strokeWidth="3"
                        />
                      )}
                    </svg>
                  </div>
                
                {/* Горизонтальные линии сетки */}
                <div className="absolute inset-0 flex flex-col justify-between pointer-events-none">
                  {[100, 75, 50, 25, 0].map((value) => (
                    <div key={value} className="flex items-center">
                      <span className="text-xs text-gray-400 -ml-10 w-8 text-right">{value}%</span>
                      <div className="flex-1 border-b border-gray-200 ml-2"></div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Ось X - динамическая в зависимости от периода */}
              <div className="flex justify-between mt-4 px-2 text-xs text-gray-500">
                {globalPeriod === 'today' ? (
                  ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00'].map(time => (
                    <span key={time}>{time}</span>
                  ))
                ) : globalPeriod === 'week' ? (
                  ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map((day, i) => (
                    <span key={i}>{day}</span>
                  ))
                ) : globalPeriod === 'month' ? (
                  ['1', '5', '10', '15', '20', '25', '30'].map(day => (
                    <span key={day}>{day}</span>
                  ))
                ) : (
                  ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'].map((month, i) => (
                    <span key={i}>{month}</span>
                  ))
                )}
              </div>
            </div>
          </div>
          
          {/* Показатель A/B теста */}
          {isAbTest && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-900 font-medium">A/B тест активен</p>
              <p className="text-xs text-blue-700 mt-1">
                Агент A: конверсия {company.successfulTransferred ? Math.round((company.successfulTransferred / company.totalProcessed) * 100 * 0.95) : 0}% | 
                Агент B: конверсия {company.successfulTransferred ? Math.round((company.successfulTransferred / company.totalProcessed) * 100 * 1.05) : 0}%
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Мониторинг/декомпозиция обработанных контактов по исходам */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Мониторинг обработанных контактов по исходам</CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                Всего обработано: {company.totalProcessed.toLocaleString()} контактов
              </p>
            </div>
            {isAbTest && (
              <div className="flex items-center space-x-4 text-sm">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded mr-2"></div>
                  <span>Агент A</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-orange-500 rounded mr-2"></div>
                  <span>Агент B</span>
                </div>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <div className="flex items-center justify-between mb-2">
                <MessageSquare className="h-5 w-5 text-green-600" />
                <Badge className="bg-green-100 text-green-800">Передано</Badge>
              </div>
              <p className="text-2xl font-bold text-green-600">
                {company.successfulTransferred.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Успешно передано</p>
              <p className="text-xs text-gray-500 mt-1">
                {Math.round((company.successfulTransferred / company.totalProcessed) * 100)}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-green-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(company.successfulTransferred * 0.48).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(company.successfulTransferred * 0.52).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
              <div className="flex items-center justify-between mb-2">
                <XCircle className="h-5 w-5 text-red-600" />
              </div>
              <p className="text-2xl font-bold text-red-600">
                {company.refusals.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Отказы</p>
              <p className="text-xs text-gray-500 mt-1">
                {Math.round((company.refusals / company.totalProcessed) * 100)}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-red-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(company.refusals * 0.55).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(company.refusals * 0.45).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
              <div className="flex items-center justify-between mb-2">
                <PhoneOff className="h-5 w-5 text-gray-600" />
              </div>
              <p className="text-2xl font-bold text-gray-600">
                {company.noAnswers.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Недозвоны</p>
              <p className="text-xs text-gray-500 mt-1">
                {Math.round((company.noAnswers / company.totalProcessed) * 100)}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(company.noAnswers * 0.51).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(company.noAnswers * 0.49).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
              <div className="flex items-center justify-between mb-2">
                <Volume2 className="h-5 w-5 text-purple-600" />
              </div>
              <p className="text-2xl font-bold text-purple-600">
                {company.voicemails.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Автоответчики</p>
              <p className="text-xs text-gray-500 mt-1">
                {Math.round((company.voicemails / company.totalProcessed) * 100)}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-purple-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(company.voicemails * 0.47).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(company.voicemails * 0.53).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-indigo-50 rounded-lg border border-indigo-200">
              <div className="flex items-center justify-between mb-2">
                <Bot className="h-5 w-5 text-indigo-600" />
              </div>
              <p className="text-2xl font-bold text-indigo-600">
                {company.robotVoicemails.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Роботы</p>
              <p className="text-xs text-gray-500 mt-1">
                {Math.round((company.robotVoicemails / company.totalProcessed) * 100)}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-indigo-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(company.robotVoicemails * 0.50).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(company.robotVoicemails * 0.50).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Единая таблица звонков */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Таблица звонков</CardTitle>
            <div className="flex items-center space-x-2">
              <div className="flex items-center space-x-2">
                <Label htmlFor="result-filter" className="text-sm">Статус:</Label>
                <Select value={resultFilter} onValueChange={setResultFilter}>
                  <SelectTrigger id="result-filter" className="w-40">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Все результаты</SelectItem>
                    <SelectItem value="success">Передано успешно</SelectItem>
                    <SelectItem value="refused">Отказ</SelectItem>
                    <SelectItem value="no_answer">Недозвон</SelectItem>
                    <SelectItem value="voicemail">Автоответчик</SelectItem>
                    <SelectItem value="robot_voicemail">Робот-автоответчик</SelectItem>
                    <SelectItem value="busy">Занято</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Input
                placeholder="Поиск по Lead ID..."
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                className="w-48"
              />
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowExportModal(true)}
              >
                <Download className="h-4 w-4 mr-2" />
                Экспорт
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    ID контакта
                  </th>
                  {isAbTest && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      A/B
                    </th>
                  )}
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Дата/время
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Результат
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Длительность
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    Флаги
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {callRecords
                  .filter((call) => {
                    // Фильтр по статусу результата
                    if (resultFilter !== 'all' && call.result !== resultFilter) {
                      return false
                    }
                    // Фильтр по поиску Lead ID
                    if (searchFilter && !call.leadId.toLowerCase().includes(searchFilter.toLowerCase())) {
                      return false
                    }
                    return true
                  })
                  .map((call) => (
                  <tr key={call.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="flex items-center">
                        <span className="font-mono text-sm font-medium text-blue-600">{call.leadId}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="ml-2 h-6 w-6 p-0"
                          onClick={() => navigator.clipboard.writeText(call.leadId)}
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                      </div>
                    </td>
                    {isAbTest && (
                      <td className="px-4 py-3 whitespace-nowrap text-center">
                        <Badge 
                          className={call.abVariant === 'A' 
                            ? "bg-green-100 text-green-800" 
                            : "bg-orange-100 text-orange-800"
                          }
                        >
                          {call.abVariant || 'A'}
                        </Badge>
                      </td>
                    )}
                    <td className="px-4 py-3 whitespace-nowrap text-sm">
                      <div>
                        <div className="flex items-center text-gray-900">
                          <Calendar className="h-3 w-3 mr-1 text-gray-400" />
                          {call.dateTime.toLocaleDateString('ru-RU')}
                        </div>
                        <div className="flex items-center text-gray-500 text-xs">
                          <Clock className="h-3 w-3 mr-1 text-gray-400" />
                          {call.dateTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      {getResultBadge(call.result, call.category)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm">
                      {call.duration > 0 ? formatDuration(call.duration) : '—'}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center justify-center space-x-1">
                        {call.hasTransferred && (
                          <div className="group relative">
                            <MessageSquare className="h-4 w-4 text-blue-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              Успешно передано
                            </span>
                          </div>
                        )}
                        {call.hasLinkClick && (
                          <div className="group relative">
                            <Link2 className="h-4 w-4 text-green-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              Переход по ссылке
                            </span>
                          </div>
                        )}
                        {call.hasRegistration && (
                          <div className="group relative">
                            <UserCheck className="h-4 w-4 text-purple-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              Регистрация
                            </span>
                          </div>
                        )}
                        {call.transferredToErp && (
                          <Badge className="bg-indigo-100 text-indigo-800 text-xs">
                            ERP
                          </Badge>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="flex items-center space-x-1">
                        {call.hasRecording && (
                          <Button size="sm" variant="ghost" title="Прослушать">
                            <Volume2 className="h-4 w-4" />
                          </Button>
                        )}
                        {call.hasTranscript && (
                          <Button size="sm" variant="ghost" title="Транскрипт">
                            <FileText className="h-4 w-4" />
                          </Button>
                        )}
                        <Button size="sm" variant="ghost" title="Экспорт">
                          <Download className="h-3 w-3" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Модальное окно экспорта */}
      <Dialog open={showExportModal} onOpenChange={setShowExportModal}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <FileDown className="h-5 w-5 mr-2" />
              Экспорт таблицы звонков
            </DialogTitle>
            <DialogDescription>
              Настройте параметры экспорта данных в CSV
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="export-period">Период</Label>
              <Select value={exportPeriod} onValueChange={setExportPeriod}>
                <SelectTrigger id="export-period" className="mt-2">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="today">Сегодня</SelectItem>
                  <SelectItem value="yesterday">Вчера</SelectItem>
                  <SelectItem value="week">Последняя неделя</SelectItem>
                  <SelectItem value="month">Последний месяц</SelectItem>
                  <SelectItem value="all">Все время</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Фильтр по статусам</Label>
              <p className="text-xs text-gray-500 mb-3">Выберите статусы для экспорта (если ничего не выбрано - экспортируются все)</p>
              <div className="space-y-2 mt-2">
                {statusOptions.map((status) => (
                  <div key={status.value} className="flex items-center space-x-2">
                    <Checkbox
                      id={status.value}
                      checked={selectedStatuses.includes(status.value)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedStatuses([...selectedStatuses, status.value])
                        } else {
                          setSelectedStatuses(selectedStatuses.filter(s => s !== status.value))
                        }
                      }}
                    />
                    <Label 
                      htmlFor={status.value} 
                      className="text-sm font-normal cursor-pointer"
                    >
                      {status.label}
                    </Label>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-sm text-blue-900 font-medium mb-1">Важно:</p>
              <ul className="text-xs text-blue-700 space-y-1">
                <li>• Экспортируются только ID контактов и метаданные</li>
                <li>• Номера телефонов НЕ включены в экспорт</li>
                <li>• Файл будет сохранен в формате CSV</li>
              </ul>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowExportModal(false)}>
              Отмена
            </Button>
            <Button onClick={handleExport}>
              <Download className="h-4 w-4 mr-2" />
              Скачать CSV
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/obzvoni/new/page.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft, 
  Mic, 
  FileText, 
  Settings, 
  Copy,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  Save,
  Play,
  Check,
  Users,
  Clock
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Switch } from '@/components/ui/switch'

interface CampaignForm {
  name: string
  companyId: string
  agent: string
  voice: string
  instructions: string
  serviceReady: boolean
  balanceOk: boolean
  telephonyOk: boolean
  serviceAvailable: boolean
  // Параметры запуска
  batchSize: number
  maxCalls: number
  retryAttempts: number
  retryInterval: number
  enableSms: boolean
  smsTemplate: string
}

const mockAgents = [
  { id: 'anna-1', name: 'Анна', description: 'Продажи и консультации' },
  { id: 'mikhail-2', name: 'Михаил', description: 'Поддержка и помощь' },
  { id: 'elena-3', name: 'Елена', description: 'Опросы и исследования' },
  { id: 'dmitry-4', name: 'Дмитрий', description: 'Информирование' }
]

const mockVoices = [
  { id: 'voice-1', name: 'Женский дружелюбный', description: 'Теплый, располагающий' },
  { id: 'voice-2', name: 'Мужской деловой', description: 'Уверенный, профессиональный' },
  { id: 'voice-3', name: 'Женский энергичный', description: 'Активный, позитивный' },
  { id: 'voice-4', name: 'Мужской спокойный', description: 'Размеренный, вдумчивый' }
]

export default function NewObzvonPage() {
  const router = useRouter()
  const [form, setForm] = useState<CampaignForm>({
    name: '',
    companyId: `CMP-${Date.now().toString(36).toUpperCase()}`,
    agent: '',
    voice: '',
    instructions: '',
    serviceReady: false,
    balanceOk: false,
    telephonyOk: false,
    serviceAvailable: false,
    batchSize: 50,
    maxCalls: 1000,
    retryAttempts: 3,
    retryInterval: 30,
    enableSms: true,
    smsTemplate: 'Спасибо за разговор! Ссылка на регистрацию: [LINK]'
  })

  const [isLoading, setIsLoading] = useState(false)
  const [isCopied, setIsCopied] = useState(false)
  const [isCheckingService, setIsCheckingService] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)

  const handleInputChange = (field: keyof CampaignForm, value: any) => {
    setForm(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleCopyCompanyId = () => {
    navigator.clipboard.writeText(form.companyId)
    setIsCopied(true)
    setTimeout(() => setIsCopied(false), 2000)
  }

  const checkServiceReadiness = async () => {
    setIsCheckingService(true)
    // Имитация проверки готовности сервиса
    setTimeout(() => {
      const balanceOk = Math.random() > 0.3
      const telephonyOk = Math.random() > 0.2
      const serviceAvailable = Math.random() > 0.1
      
      setForm(prev => ({
        ...prev,
        balanceOk,
        telephonyOk,
        serviceAvailable,
        serviceReady: balanceOk && telephonyOk && serviceAvailable
      }))
      setIsCheckingService(false)
    }, 1500)
  }

  useEffect(() => {
    // Автоматическая проверка готовности при монтировании
    checkServiceReadiness()
  }, [])

  const isStepCompleted = (step: number) => {
    switch (step) {
      case 1:
        return form.name.trim() !== '' && form.serviceReady
      case 2:
        return form.agent !== '' && form.voice !== ''
      case 3:
        return form.instructions.trim() !== ''
      case 4:
        return form.batchSize > 0 && form.maxCalls > 0
      default:
        return false
    }
  }

  const isFormValid = () => {
    return isStepCompleted(1) && isStepCompleted(2) && isStepCompleted(3)
  }

  const handleSave = async (startNow = false) => {
    setIsLoading(true)
    
    // Имитация сохранения
    setTimeout(() => {
      setIsLoading(false)
      if (startNow) {
        router.push('/obzvoni/monitor')
      } else {
        router.push('/obzvoni')
      }
    }, 1500)
  }

  const steps = [
    { id: 1, name: 'Основные настройки', icon: Settings },
    { id: 2, name: 'Настройка агента', icon: Mic },
    { id: 3, name: 'Инструкции', icon: FileText },
    { id: 4, name: 'Параметры запуска', icon: Play }
  ]

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Создание компании
            </h1>
            <p className="text-gray-600">
              Настройте параметры новой компании обзвона
            </p>
          </div>
        </div>
        
        <div className="flex space-x-3">
          <Button variant="outline" onClick={() => handleSave(false)} disabled={isLoading || !form.name}>
            <Save className="h-4 w-4 mr-2" />
            Сохранить
          </Button>
          <Button onClick={() => handleSave(true)} disabled={isLoading || !isFormValid()}>
            <Play className="h-4 w-4 mr-2" />
            Запустить
          </Button>
        </div>
      </div>

      {/* Шаги */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div 
                  className={`flex items-center justify-center w-10 h-10 rounded-full cursor-pointer ${
                    currentStep === step.id 
                      ? 'bg-blue-600 text-white' 
                      : isStepCompleted(step.id)
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                  onClick={() => setCurrentStep(step.id)}
                >
                  <step.icon className="h-5 w-5" />
                </div>
                <div className="ml-3">
                  <p className={`text-sm font-medium ${
                    currentStep === step.id ? 'text-blue-600' : 'text-gray-600'
                  }`}>
                    {step.name}
                  </p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-24 h-0.5 mx-4 ${
                    isStepCompleted(step.id) ? 'bg-green-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Содержимое шагов */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {/* Шаг 1: Основные настройки и готовность сервиса */}
          {currentStep === 1 && (
            <>
              {/* Блок готовности сервиса */}
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle className="flex items-center">
                      <Settings className="h-5 w-5 mr-2" />
                      Готовность сервиса
                    </CardTitle>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={checkServiceReadiness}
                      disabled={isCheckingService}
                    >
                      <RefreshCw className={`h-4 w-4 mr-2 ${isCheckingService ? 'animate-spin' : ''}`} />
                      Проверить
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {/* Баланс */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-full ${form.balanceOk ? 'bg-green-100' : 'bg-red-100'}`}>
                          {form.balanceOk ? (
                            <CheckCircle className="h-5 w-5 text-green-600" />
                          ) : (
                            <XCircle className="h-5 w-5 text-red-600" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium">Баланс</p>
                          <p className="text-sm text-gray-600">
                            {form.balanceOk ? '15,340 ₽' : 'Недостаточно средств'}
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* Телефония */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-full ${form.telephonyOk ? 'bg-green-100' : 'bg-red-100'}`}>
                          {form.telephonyOk ? (
                            <CheckCircle className="h-5 w-5 text-green-600" />
                          ) : (
                            <XCircle className="h-5 w-5 text-red-600" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium">Телефония</p>
                          <p className="text-sm text-gray-600">
                            {form.telephonyOk ? 'Подключена' : 'Не настроена'}
                          </p>
                        </div>
                      </div>
                    </div>

                    {/* Доступность */}
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-full ${form.serviceAvailable ? 'bg-green-100' : 'bg-yellow-100'}`}>
                          {form.serviceAvailable ? (
                            <CheckCircle className="h-5 w-5 text-green-600" />
                          ) : (
                            <AlertCircle className="h-5 w-5 text-yellow-600" />
                          )}
                        </div>
                        <div>
                          <p className="font-medium">Доступность</p>
                          <p className="text-sm text-gray-600">
                            {form.serviceAvailable ? 'Сервис доступен' : 'Ограниченный доступ'}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {!form.serviceReady && (
                    <div className="mt-4 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                      <div className="flex items-start space-x-3">
                        <AlertCircle className="h-5 w-5 text-yellow-600 mt-0.5" />
                        <div>
                          <p className="font-medium text-yellow-900">Требуется внимание</p>
                          <p className="text-sm text-yellow-700 mt-1">
                            Некоторые компоненты системы не готовы. Проверьте настройки перед запуском.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Основные настройки */}
              <Card>
                <CardHeader>
                  <CardTitle>Основные настройки</CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div>
                    <Label htmlFor="name">Название компании *</Label>
                    <Input
                      id="name"
                      placeholder="Например: Новогодняя акция 2025"
                      value={form.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      className="mt-1"
                    />
                  </div>

                  <div>
                    <Label>Company ID</Label>
                    <div className="flex items-center space-x-2 mt-1">
                      <Input
                        value={form.companyId}
                        readOnly
                        className="font-mono bg-gray-50"
                      />
                      <Button
                        variant="outline"
                        size="icon"
                        onClick={handleCopyCompanyId}
                      >
                        {isCopied ? (
                          <Check className="h-4 w-4 text-green-600" />
                        ) : (
                          <Copy className="h-4 w-4" />
                        )}
                      </Button>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      Используйте этот ID для интеграции с внешними системами
                    </p>
                  </div>
                </CardContent>
              </Card>
            </>
          )}

          {/* Шаг 2: Настройка агента */}
          {currentStep === 2 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Mic className="h-5 w-5 mr-2" />
                  Настройка агента
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label>Выберите агента *</Label>
                  <Select value={form.agent} onValueChange={(value) => handleInputChange('agent', value)}>
                    <SelectTrigger className="mt-1">
                      <SelectValue placeholder="Выберите агента для звонков" />
                    </SelectTrigger>
                    <SelectContent>
                      {mockAgents.map((agent) => (
                        <SelectItem key={agent.id} value={agent.id}>
                          <div>
                            <div className="font-medium">{agent.name}</div>
                            <div className="text-xs text-gray-500">{agent.description}</div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label>Выберите голос *</Label>
                  <Select value={form.voice} onValueChange={(value) => handleInputChange('voice', value)}>
                    <SelectTrigger className="mt-1">
                      <SelectValue placeholder="Выберите тип голоса" />
                    </SelectTrigger>
                    <SelectContent>
                      {mockVoices.map((voice) => (
                        <SelectItem key={voice.id} value={voice.id}>
                          <div>
                            <div className="font-medium">{voice.name}</div>
                            <div className="text-xs text-gray-500">{voice.description}</div>
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 3: Инструкции */}
          {currentStep === 3 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <FileText className="h-5 w-5 mr-2" />
                  Инструкции для агента
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div>
                  <Label htmlFor="instructions">Инструкции для агента *</Label>
                  <Textarea
                    id="instructions"
                    placeholder="Опишите, как должен вести себя агент, какую информацию сообщать, как реагировать на вопросы..."
                    value={form.instructions}
                    onChange={(e) => handleInputChange('instructions', e.target.value)}
                    className="mt-1 min-h-[200px]"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Подробные инструкции помогут агенту эффективнее общаться с клиентами
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 4: Параметры запуска */}
          {currentStep === 4 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Play className="h-5 w-5 mr-2" />
                  Параметры запуска
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="batchSize">Размер пакета</Label>
                    <Input
                      id="batchSize"
                      type="number"
                      min="1"
                      max="200"
                      value={form.batchSize}
                      onChange={(e) => handleInputChange('batchSize', parseInt(e.target.value) || 0)}
                      className="mt-1"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Количество одновременных звонков
                    </p>
                  </div>

                  <div>
                    <Label htmlFor="maxCalls">Максимум звонков</Label>
                    <Input
                      id="maxCalls"
                      type="number"
                      min="1"
                      value={form.maxCalls}
                      onChange={(e) => handleInputChange('maxCalls', parseInt(e.target.value) || 0)}
                      className="mt-1"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Общее количество звонков
                    </p>
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <h3 className="font-medium">Настройки повторных звонков</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="retryAttempts">Количество попыток</Label>
                      <Input
                        id="retryAttempts"
                        type="number"
                        min="0"
                        max="10"
                        value={form.retryAttempts}
                        onChange={(e) => handleInputChange('retryAttempts', parseInt(e.target.value) || 0)}
                        className="mt-1"
                      />
                    </div>

                    <div>
                      <Label htmlFor="retryInterval">Интервал (минуты)</Label>
                      <Input
                        id="retryInterval"
                        type="number"
                        min="5"
                        max="1440"
                        value={form.retryInterval}
                        onChange={(e) => handleInputChange('retryInterval', parseInt(e.target.value) || 0)}
                        className="mt-1"
                      />
                    </div>
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-base font-medium">SMS уведомления</Label>
                      <p className="text-sm text-gray-600">
                        Отправлять SMS после успешного звонка
                      </p>
                    </div>
                    <Switch
                      checked={form.enableSms}
                      onCheckedChange={(checked) => handleInputChange('enableSms', checked)}
                    />
                  </div>

                  {form.enableSms && (
                    <div>
                      <Label htmlFor="smsTemplate">Шаблон SMS</Label>
                      <Textarea
                        id="smsTemplate"
                        value={form.smsTemplate}
                        onChange={(e) => handleInputChange('smsTemplate', e.target.value)}
                        className="mt-1"
                        rows={3}
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Используйте [LINK] для вставки ссылки
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Боковая панель */}
        <div className="space-y-4">
          {/* Сводка */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Сводка компании</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm text-gray-600">Название</p>
                <p className="font-medium">{form.name || 'Не указано'}</p>
              </div>

              <div>
                <p className="text-sm text-gray-600">Company ID</p>
                <p className="font-mono text-sm">{form.companyId}</p>
              </div>

              {form.agent && (
                <div>
                  <p className="text-sm text-gray-600">Агент</p>
                  <p className="font-medium">
                    {mockAgents.find(a => a.id === form.agent)?.name}
                  </p>
                </div>
              )}

              {form.voice && (
                <div>
                  <p className="text-sm text-gray-600">Голос</p>
                  <p className="font-medium">
                    {mockVoices.find(v => v.id === form.voice)?.name}
                  </p>
                </div>
              )}

              {form.instructions && (
                <div>
                  <p className="text-sm text-gray-600">Инструкции</p>
                  <Badge className="bg-green-100 text-green-800">✓</Badge>
                </div>
              )}

              <Separator />

              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Готовность</span>
                  {form.serviceReady ? (
                    <Badge className="bg-green-100 text-green-800">✓</Badge>
                  ) : (
                    <Badge className="bg-yellow-100 text-yellow-800">!</Badge>
                  )}
                </div>
                {steps.map((step) => (
                  <div key={step.id} className="flex items-center justify-between">
                    <span className="text-sm">{step.name}</span>
                    {isStepCompleted(step.id) ? (
                      <Badge className="bg-green-100 text-green-800">✓</Badge>
                    ) : (
                      <Badge variant="outline">—</Badge>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Навигация по шагам */}
          <Card>
            <CardContent className="p-4">
              <div className="flex flex-col space-y-2">
                <Button
                  variant={currentStep > 1 ? 'outline' : 'ghost'}
                  disabled={currentStep === 1}
                  onClick={() => setCurrentStep(currentStep - 1)}
                  className="w-full"
                >
                  Предыдущий шаг
                </Button>
                <Button
                  variant={currentStep < 4 ? 'default' : 'ghost'}
                  disabled={currentStep === 4}
                  onClick={() => setCurrentStep(currentStep + 1)}
                  className="w-full"
                >
                  Следующий шаг
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Быстрые действия */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Быстрые действия</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => router.push('/agents')}
              >
                <Settings className="h-4 w-4 mr-2" />
                Настроить агентов
              </Button>
              <Button 
                variant="outline" 
                className="w-full justify-start"
                onClick={() => router.push('/settings/telephony')}
              >
                <Mic className="h-4 w-4 mr-2" />
                Настройки телефонии
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/app/page.tsx">
'use client'

import { redirect } from 'next/navigation'

export default function HomePage() {
  // Редирект на страницу компаний
  redirect('/companies')
}
</file>

<file path="src/lib/mock-data.ts">
import { 
  Lead, 
  Campaign, 
  Call, 
  Task, 
  Sms, 
  Script, 
  SmsTemplate,
  AutomationRule,
  RolePermissions,
  Agent,
  Voice,
  VoiceLibrary,
  AgentVersion,
  ABTest,
  PromptTemplate,
  CampaignMetrics,
  QueueStatus,
  AppSettings,
  UserRole
} from './types';

// Моковые лиды
export const mockLeads: Lead[] = [
  {
    id: 'lead-1',
    phone: '+79001234567',
    name: 'Алексей Петров',
    timezone: 'Europe/Moscow',
    language: 'ru',
    segment: 'VIP',
    consentSms: true,
    status: 'success',
    blacklist: false,
    createdAt: new Date('2024-01-15T10:00:00Z'),
    updatedAt: new Date('2024-01-15T14:30:00Z'),
    lastCallAt: new Date('2024-01-15T14:30:00Z'),
    registrationDate: new Date('2024-01-15T15:45:00Z'),
    tags: ['high-value', 'interested'],
  },
  {
    id: 'lead-2',
    phone: '+79007654321',
    name: 'Мария Иванова',
    timezone: 'Europe/Moscow',
    language: 'ru',
    segment: 'Regular',
    consentSms: false,
    status: 'called',
    blacklist: false,
    createdAt: new Date('2024-01-15T09:00:00Z'),
    updatedAt: new Date('2024-01-15T13:15:00Z'),
    lastCallAt: new Date('2024-01-15T13:15:00Z'),
    tags: ['needs-followup'],
  },
  {
    id: 'lead-3',
    phone: '+79009876543',
    name: 'Дмитрий Сидоров',
    timezone: 'Europe/Moscow',
    language: 'ru',
    segment: 'New',
    consentSms: true,
    status: 'in_queue',
    blacklist: false,
    createdAt: new Date('2024-01-15T11:00:00Z'),
    updatedAt: new Date('2024-01-15T11:00:00Z'),
    tags: ['first-time'],
  },
  {
    id: 'lead-4',
    phone: '+79005555555',
    name: 'Елена Козлова',
    timezone: 'Europe/Moscow',
    language: 'ru',
    segment: 'Regular',
    consentSms: true,
    status: 'refused',
    blacklist: false,
    createdAt: new Date('2024-01-15T08:00:00Z'),
    updatedAt: new Date('2024-01-15T12:45:00Z'),
    lastCallAt: new Date('2024-01-15T12:45:00Z'),
    tags: ['objections', 'timing-issues'],
  },
  {
    id: 'lead-5',
    phone: '+79001111111',
    name: 'Андрей Морозов',
    timezone: 'Europe/Moscow',
    language: 'ru',
    segment: 'VIP',
    consentSms: false,
    status: 'blacklisted',
    blacklist: true,
    createdAt: new Date('2024-01-14T15:00:00Z'),
    updatedAt: new Date('2024-01-15T10:20:00Z'),
    lastCallAt: new Date('2024-01-15T10:20:00Z'),
    tags: ['aggressive', 'do-not-call'],
  },
];

// Функция для генерации названий кампаний
const generateCampaignName = () => {
  const today = new Date();
  const dateStr = today.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
  const scriptNum = Math.floor(Math.random() * 15) + 1;
  const baseNum = Math.floor(Math.random() * 9999) + 1000;
  return `${dateStr}: скрипт №${scriptNum}, база №${baseNum}`;
};

// Моковые кампании
export const mockCampaigns: Campaign[] = [
  {
    id: 'obz-1',
    name: 'Тестовый запуск №1',
    description: 'Тестовая кампания для демонстрации',
    baseType: 'registration',
    source: 'segment',
    sourceConfig: {
      segmentId: 'vip-segment',
      filters: { minDeposit: 1000 }
    },
    scriptId: 'script-1',
    scriptVersion: 'A',
    callWindows: [
      {
        dayOfWeek: 1,
        startTime: '09:00',
        endTime: '18:00',
        timezone: 'Europe/Moscow'
      },
      {
        dayOfWeek: 2,
        startTime: '09:00',
        endTime: '18:00',
        timezone: 'Europe/Moscow'
      }
    ],
    attemptsPolicy: {
      no_answer: { maxAttempts: 3, intervalMinutes: 120 },
      busy: { maxAttempts: 2, intervalMinutes: 30 },
      voicemail: { action: 'retry', maxAttempts: 1, intervalMinutes: 240 }
    },
    concurrency: 5,
    priority: 8,
    state: 'running',
    category: 'acquisition',
    createdAt: new Date('2024-01-10T09:00:00Z'),
    updatedAt: new Date('2024-01-15T10:00:00Z'),
    startedAt: new Date('2024-01-15T10:00:00Z'),
    settings: {
      enableSms: true,
      autoEscalation: true,
      recordCalls: true,
      enableTranscription: true
    },
    stats: {
      totalLeads: 1250,
      processed: 847,
      successful: 623,
      refused: 224,
      pending: 403
    }
  },
  {
    id: 'obz-2',
    name: 'Реактивация неактивных',
    description: 'Возврат клиентов, не заходивших более 90 дней',
    baseType: 'reactivation',
    source: 'csv',
    sourceConfig: {
      csvFile: 'inactive_users_90days.csv'
    },
    scriptId: 'script-2',
    scriptVersion: 'B',
    callWindows: [
      {
        dayOfWeek: 3,
        startTime: '10:00',
        endTime: '17:00',
        timezone: 'Europe/Moscow'
      }
    ],
    attemptsPolicy: {
      no_answer: { maxAttempts: 2, intervalMinutes: 180 },
      busy: { maxAttempts: 1, intervalMinutes: 60 },
      voicemail: { action: 'stop' }
    },
    concurrency: 3,
    priority: 5,
    state: 'paused',
    category: 'reactivation',
    createdAt: new Date('2024-01-12T14:00:00Z'),
    updatedAt: new Date('2024-01-15T11:30:00Z'),
    startedAt: new Date('2024-01-14T09:00:00Z'),
    settings: {
      enableSms: true,
      autoEscalation: false,
      recordCalls: true,
      enableTranscription: false
    },
    stats: {
      totalLeads: 2100,
      processed: 456,
      successful: 298,
      refused: 158,
      pending: 1644
    }
  },
  {
    id: 'obz-3',
    name: 'Холодная база январь',
    description: 'Знакомство с продуктом для новых лидов',
    baseType: 'registration',
    source: 'manual',
    scriptId: 'script-3',
    scriptVersion: 'A',
    callWindows: [
      {
        dayOfWeek: 5,
        startTime: '11:00',
        endTime: '16:00',
        timezone: 'Europe/Moscow'
      }
    ],
    attemptsPolicy: {
      no_answer: { maxAttempts: 1, intervalMinutes: 60 },
      busy: { maxAttempts: 1, intervalMinutes: 30 },
      voicemail: { action: 'stop' }
    },
    concurrency: 2,
    priority: 3,
    state: 'draft',
    category: 'acquisition',
    createdAt: new Date('2024-01-15T12:00:00Z'),
    updatedAt: new Date('2024-01-15T12:00:00Z'),
    settings: {
      enableSms: false,
      autoEscalation: false,
      recordCalls: true,
      enableTranscription: true
    },
    stats: {
      totalLeads: 850,
      processed: 0,
      successful: 0,
      refused: 0,
      pending: 850
    }
  }
];

// Моковые звонки
export const mockCalls: Call[] = [
  {
    id: 'call-1',
    leadId: 'lead-1',
    campaignId: 'campaign-1',
    startedAt: new Date('2024-01-15T14:30:00Z'),
    endedAt: new Date('2024-01-15T14:37:30Z'),
    duration: 450,
    outcome: 'answer_success',
    consentSms: true,
    transcript: [
      {
        timestamp: 0,
        speaker: 'agent',
        text: 'Добрый день! Меня зовут Анна, я звоню от AIGAMING.BOT. У нас для вас специальное предложение.'
      },
      {
        timestamp: 8,
        speaker: 'client',
        text: 'Здравствуйте, слушаю вас.'
      },
      {
        timestamp: 12,
        speaker: 'agent',
        text: 'Мы подготовили для VIP клиентов эксклюзивный бонус 200% на депозит. Вас интересует?'
      },
      {
        timestamp: 25,
        speaker: 'client',
        text: 'Да, звучит интересно. А какие условия?'
      },
      {
        timestamp: 32,
        speaker: 'agent',
        text: 'Отлично! Могу отправить вам SMS с подробностями и ссылкой для активации. Согласны?'
      },
      {
        timestamp: 42,
        speaker: 'client',
        text: 'Да, конечно, отправляйте.'
      }
    ],
    audioUrl: '/demo/call-1-recording.mp3',
    summary: 'Клиент заинтересован в специальном предложении, дал согласие на SMS',
    tags: ['interested', 'vip-offer', 'consent-given'],
    attemptNumber: 1,
  },
  {
    id: 'call-2',
    leadId: 'lead-2',
    campaignId: 'campaign-1',
    startedAt: new Date('2024-01-15T13:15:00Z'),
    endedAt: new Date('2024-01-15T13:18:15Z'),
    duration: 195,
    outcome: 'answer_refuse',
    consentSms: false,
    transcript: [
      {
        timestamp: 0,
        speaker: 'agent',
        text: 'Добрый день! Меня зовут Анна, я звоню от AIGAMING.BOT.'
      },
      {
        timestamp: 6,
        speaker: 'client',
        text: 'Я не интересуюсь азартными играми, спасибо.'
      },
      {
        timestamp: 12,
        speaker: 'agent',
        text: 'Понимаю. А может быть вас заинтересуют спортивные ставки?'
      },
      {
        timestamp: 18,
        speaker: 'client',
        text: 'Нет, меня это совсем не интересует. Не звоните больше, пожалуйста.'
      }
    ],
    audioUrl: '/demo/call-2-recording.mp3',
    summary: 'Клиент категорически не заинтересован, просит не звонить',
    tags: ['not-interested', 'do-not-call-request'],
    attemptNumber: 1,
  },
  {
    id: 'call-3',
    leadId: 'lead-4',
    campaignId: 'campaign-2',
    startedAt: new Date('2024-01-15T12:45:00Z'),
    endedAt: new Date('2024-01-15T12:50:30Z'),
    duration: 330,
    outcome: 'answer_refuse',
    consentSms: false,
    transcript: [
      {
        timestamp: 0,
        speaker: 'agent',
        text: 'Здравствуйте! Звоню по поводу вашего аккаунта в казино.'
      },
      {
        timestamp: 8,
        speaker: 'client',
        text: 'Да, слушаю.'
      },
      {
        timestamp: 12,
        speaker: 'agent',
        text: 'Мы заметили, что вы давно не заходили. У нас есть специальное предложение для возврата.'
      },
      {
        timestamp: 22,
        speaker: 'client',
        text: 'Знаете, сейчас не лучшее время для игр. Может быть позже.'
      }
    ],
    audioUrl: '/demo/call-3-recording.mp3',
    summary: 'Клиент не готов играть сейчас, возможно заинтересуется позже',
    tags: ['timing-issues', 'maybe-later'],
    attemptNumber: 1,
    nextAttemptAt: new Date('2024-01-22T12:45:00Z'),
  },
  {
    id: 'call-4',
    leadId: 'lead-4',
    campaignId: 'campaign-2',
    startedAt: new Date('2024-01-15T11:15:00Z'),
    endedAt: new Date('2024-01-15T11:18:45Z'),
    duration: 225,
    outcome: 'answer_success',
    consentSms: true,
    transcript: [
      {
        timestamp: 0,
        speaker: 'agent',
        text: 'Здравствуйте! Звоню по поводу нашего предложения для клиентов.'
      },
      {
        timestamp: 5,
        speaker: 'client',
        text: 'Да, слушаю.'
      },
      {
        timestamp: 8,
        speaker: 'agent',
        text: 'У нас есть специальное предложение по возврату бонуса. Интересно?'
      },
      {
        timestamp: 15,
        speaker: 'client',
        text: 'Можете отправить детали по SMS.'
      }
    ],
    audioUrl: '/demo/call-4-recording.mp3',
    summary: 'Клиент согласился получить информацию по SMS',
    tags: ['interested', 'sms-requested'],
    attemptNumber: 1,
  },
  {
    id: 'call-5',
    leadId: 'lead-5',
    campaignId: 'campaign-1',
    startedAt: new Date('2024-01-15T13:22:00Z'),
    endedAt: new Date('2024-01-15T13:24:15Z'),
    duration: 135,
    outcome: 'no_answer',
    consentSms: false,
    transcript: [],
    audioUrl: '/demo/call-5-recording.mp3',
    summary: 'Не ответили на звонок',
    tags: ['no-answer'],
    attemptNumber: 1,
    nextAttemptAt: new Date('2024-01-15T15:22:00Z'),
  },
  {
    id: 'call-6',
    leadId: 'lead-1',
    campaignId: 'campaign-3',
    startedAt: new Date('2024-01-15T16:30:00Z'),
    endedAt: new Date('2024-01-15T16:35:20Z'),
    duration: 320,
    outcome: 'answer_refuse',
    consentSms: false,
    transcript: [
      {
        timestamp: 0,
        speaker: 'agent',
        text: 'Добрый день! Звоню с предложением по нашим услугам.'
      },
      {
        timestamp: 4,
        speaker: 'client',
        text: 'Не интересно, спасибо.'
      },
      {
        timestamp: 7,
        speaker: 'agent',
        text: 'Понимаю. Хорошего дня!'
      }
    ],
    audioUrl: '/demo/call-6-recording.mp3',
    summary: 'Клиент отказался от предложения',
    tags: ['refused', 'quick-refusal'],
    attemptNumber: 1,
  }
];

// Моковые задачи
export const mockTasks: Task[] = [
  {
    id: 'task-1',
    leadId: 'lead-2',
    callId: 'call-2',
    title: 'Обработать отказ клиента',
    description: 'Клиент категорически отказался, просит не звонить. Нужно добавить в черный список.',
    reason: 'answer_refuse',
    priority: 'medium',
    status: 'pending',
    assigneeRole: 'manager',
    dueAt: new Date('2024-01-16T10:00:00Z'),
    createdAt: new Date('2024-01-15T13:20:00Z'),
    updatedAt: new Date('2024-01-15T13:20:00Z'),
  },
  {
    id: 'task-2',
    leadId: 'lead-4',
    callId: 'call-3',
    title: 'Запланировать повторный звонок',
    description: 'Клиент сказал "может быть позже". Запланировать звонок через неделю.',
    reason: 'maybe_later',
    priority: 'low',
    status: 'completed',
    assigneeRole: 'manager',
    dueAt: new Date('2024-01-16T14:00:00Z'),
    createdAt: new Date('2024-01-15T12:55:00Z'),
    updatedAt: new Date('2024-01-15T15:30:00Z'),
    completedAt: new Date('2024-01-15T15:30:00Z'),
  },
  {
    id: 'task-3',
    leadId: 'lead-1',
    title: 'Проверить регистрацию',
    description: 'Клиент получил SMS, но регистрация не завершена. Связаться для уточнения.',
    reason: 'incomplete_registration',
    priority: 'high',
    status: 'in_progress',
    assigneeRole: 'manager',
    assigneeId: 'manager-1',
    dueAt: new Date('2024-01-16T09:00:00Z'),
    createdAt: new Date('2024-01-15T16:00:00Z'),
    updatedAt: new Date('2024-01-15T17:00:00Z'),
  }
];

// Моковые SMS шаблоны
export const mockSmsTemplates: SmsTemplate[] = [
  {
    id: 'template-1',
    name: 'Специальный бонус VIP',
    text: 'Привет, {name}! Твой эксклюзивный бонус 200% ждет активации: {link}. {brand}',
    variables: ['name', 'link', 'brand'],
    category: 'promotion',
    language: 'ru',
    isActive: true,
  },
  {
    id: 'template-2',
    name: 'Возврат неактивных',
    text: 'Скучаем по тебе, {name}! Специальное предложение для возврата: {link}. {brand}',
    variables: ['name', 'link', 'brand'],
    category: 'reactivation',
    language: 'ru',
    isActive: true,
  },
  {
    id: 'template-3',
    name: 'Подтверждение регистрации',
    text: '{name}, завершите регистрацию и получите бонус: {link}. Поддержка: {support}. {brand}',
    variables: ['name', 'link', 'support', 'brand'],
    category: 'confirmation',
    language: 'ru',
    isActive: true,
  }
];

// Моковые SMS
export const mockSms: Sms[] = [
  {
    id: 'sms-1',
    leadId: 'lead-1',
    templateId: 'template-1',
    text: 'Привет, Алексей! Твой эксклюзивный бонус 200% ждет активации: https://aigaming.bot/bonus/special2024. AIGAMING.BOT',
    status: 'delivered',
    sentAt: new Date('2024-01-15T14:40:00Z'),
    deliveredAt: new Date('2024-01-15T14:40:30Z'),
  },
  {
    id: 'sms-2',
    leadId: 'lead-3',
    templateId: 'template-2',
    text: 'Скучаем по тебе, Дмитрий! Специальное предложение для возврата: https://aigaming.bot/return. AIGAMING.BOT',
    status: 'sent',
    sentAt: new Date('2024-01-15T15:00:00Z'),
  }
];

// Моковые скрипты
export const mockScripts: Script[] = [
  {
    id: 'script-1',
    name: 'Скрипт привлечения №1',
    description: 'Скрипт для привлечения VIP клиентов',
    version: '1.0',
    isActive: true,
    language: 'ru',
    nodes: [
      {
        id: 'start',
        type: 'message',
        content: 'Добрый день! Меня зовут {agent_name}, я звоню от {brand}. У нас для вас специальное предложение.',
        variables: ['agent_name', 'brand'],
        branches: { continue: 'offer' }
      },
      {
        id: 'offer',
        type: 'question',
        content: 'Мы подготовили для VIP клиентов эксклюзивный бонус 200% на депозит. Вас интересует?',
        branches: { 
          yes: 'consent', 
          no: 'objection',
          maybe: 'clarify'
        }
      },
      {
        id: 'consent',
        type: 'question',
        content: 'Отлично! Могу отправить вам SMS с подробностями и ссылкой для активации. Согласны?',
        branches: { 
          yes: 'success',
          no: 'no_sms'
        }
      },
      {
        id: 'success',
        type: 'action',
        content: 'Спасибо! SMS будет отправлена в течение минуты. Хорошего дня!',
        actions: [
          { type: 'set_consent', value: true },
          { type: 'end_call', value: 'answer_success' }
        ]
      }
    ],
    startNodeId: 'start',
    createdAt: new Date('2024-01-10T10:00:00Z'),
    updatedAt: new Date('2024-01-12T15:00:00Z'),
  }
];

// Моковые правила автоматизации
export const mockAutomationRules: AutomationRule[] = [
  {
    id: 'rule-1',
    name: 'Отправка SMS при согласии',
    trigger: {
      event: 'call_completed',
      conditions: [
        { field: 'outcome', operator: 'equals', value: 'answer_success' },
        { field: 'consentSms', operator: 'equals', value: true }
      ]
    },
    actions: [
      {
        type: 'send_sms',
        config: {
          templateId: 'template-1',
          delay: 60 // секунд
        }
      }
    ],
    isActive: true,
    priority: 1
  },
  {
    id: 'rule-2',
    name: 'Создание задачи при отказе',
    trigger: {
      event: 'call_completed',
      conditions: [
        { field: 'outcome', operator: 'equals', value: 'answer_refuse' }
      ]
    },
    actions: [
      {
        type: 'create_task',
        config: {
          title: 'Обработать отказ клиента',
          priority: 'medium',
          assigneeRole: 'manager',
          dueHours: 24
        }
      }
    ],
    isActive: true,
    priority: 2
  }
];

// Права доступа по ролям
export const rolePermissions: Record<UserRole, RolePermissions> = {
  admin: {
    role: 'admin',
    permissions: {
      campaigns: { view: true, create: true, edit: true, start: true, pause: true, delete: true },
      leads: { view: true, edit: true, delete: true, export: true },
      calls: { view: true, listen: true, transcript: true, edit_outcome: true },
      tasks: { view: true, create: true, assign: true, complete: true },
      sms: { send: true, view_templates: true, edit_templates: true },
      scripts: { view: true, edit: true, create: true },
      analytics: { view: true, export: true }
    }
  },
  marketer: {
    role: 'marketer',
    permissions: {
      campaigns: { view: true, create: true, edit: true, start: true, pause: true, delete: false },
      leads: { view: true, edit: false, delete: false, export: true },
      calls: { view: true, listen: false, transcript: true, edit_outcome: false },
      tasks: { view: true, create: true, assign: false, complete: false },
      sms: { send: false, view_templates: true, edit_templates: false },
      scripts: { view: true, edit: false, create: false },
      analytics: { view: true, export: true }
    }
  },
  supervisor: {
    role: 'supervisor',
    permissions: {
      campaigns: { view: true, create: false, edit: false, start: true, pause: true, delete: false },
      leads: { view: true, edit: true, delete: false, export: true },
      calls: { view: true, listen: true, transcript: true, edit_outcome: true },
      tasks: { view: true, create: true, assign: true, complete: true },
      sms: { send: true, view_templates: true, edit_templates: false },
      scripts: { view: true, edit: false, create: false },
      analytics: { view: true, export: false }
    }
  },
  manager: {
    role: 'manager',
    permissions: {
      campaigns: { view: true, create: false, edit: false, start: false, pause: false, delete: false },
      leads: { view: true, edit: true, delete: false, export: false },
      calls: { view: true, listen: true, transcript: true, edit_outcome: true },
      tasks: { view: true, create: true, assign: false, complete: true },
      sms: { send: true, view_templates: true, edit_templates: false },
      scripts: { view: true, edit: false, create: false },
      analytics: { view: false, export: false }
    }
  }
};

// Моковые метрики кампаний
export const mockCampaignMetrics: Record<string, CampaignMetrics> = {
  'campaign-1': {
    totalCalls: 45,
    successfulCalls: 12,
    answerRate: 73.3,
    successRate: 26.7,
    smsConsentRate: 75.0,
    refusalRate: 17.8,
    averageCallDuration: 285,
    costPerLead: 125.50,
    registrationRate: 58.3
  },
  'campaign-2': {
    totalCalls: 85,
    successfulCalls: 15,
    answerRate: 65.9,
    successRate: 17.6,
    smsConsentRate: 46.7,
    refusalRate: 29.4,
    averageCallDuration: 195,
    costPerLead: 89.20,
    registrationRate: 33.3
  },
  'campaign-3': {
    totalCalls: 0,
    successfulCalls: 0,
    answerRate: 0,
    successRate: 0,
    smsConsentRate: 0,
    refusalRate: 0,
    averageCallDuration: 0,
    costPerLead: 0,
    registrationRate: 0
  }
};

// Статус очереди
export const mockQueueStatus: QueueStatus = {
  active: 8,
  waiting: 2047, // 403 + 1644 (из активных и приостановленных кампаний)
  errors: 3,
  totalProcessed: 1303 // 847 + 456 (обработанные из активных кампаний)
};

// Настройки приложения по умолчанию
export const defaultAppSettings: AppSettings = {
  currentUser: {
    role: 'admin',
    permissions: rolePermissions.admin
  },
  brands: ['AIGAMING.BOT', 'LuckyWheel', 'GoldenPlay'],
  selectedBrand: 'AIGAMING.BOT',
  brandEnabled: true
};

// Утилиты для работы с моковыми данными
export const mockDataUtils = {
  // Получить лиды по кампании
  getLeadsByCampaign: (campaignId: string): Lead[] => {
    return mockLeads.filter(lead => {
      const call = mockCalls.find(c => c.leadId === lead.id);
      return call?.campaignId === campaignId;
    });
  },

  // Получить звонки по лиду
  getCallsByLead: (leadId: string): Call[] => {
    return mockCalls.filter(call => call.leadId === leadId);
  },

  // Получить задачи по лиду
  getTasksByLead: (leadId: string): Task[] => {
    return mockTasks.filter(task => task.leadId === leadId);
  },

  // Получить SMS по лиду
  getSmsByLead: (leadId: string): Sms[] => {
    return mockSms.filter(sms => sms.leadId === leadId);
  },

  // Обновить статус лида
  updateLeadStatus: (leadId: string, status: Lead['status']) => {
    const lead = mockLeads.find(l => l.id === leadId);
    if (lead) {
      lead.status = status;
      lead.updatedAt = new Date();
    }
  },

  // Обновить состояние кампании
  updateCampaignState: (campaignId: string, state: Campaign['state']) => {
    const campaign = mockCampaigns.find(c => c.id === campaignId);
    if (campaign) {
      campaign.state = state;
      campaign.updatedAt = new Date();
      if (state === 'running' && !campaign.startedAt) {
        campaign.startedAt = new Date();
      }
    }
  },

  // Создать новую задачу
  createTask: (task: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {
    const newTask: Task = {
      ...task,
      id: `task-${Date.now()}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    mockTasks.push(newTask);
    return newTask;
  },

  // Отправить SMS
  sendSms: (leadId: string, templateId: string, variables: Record<string, string>) => {
    const template = mockSmsTemplates.find(t => t.id === templateId);
    if (!template) return null;

    let text = template.text;
    template.variables.forEach(variable => {
      text = text.replace(`{${variable}}`, variables[variable] || '');
    });

    const newSms: Sms = {
      id: `sms-${Date.now()}`,
      leadId,
      templateId,
      text,
      status: 'sent',
      sentAt: new Date()
    };
    
    mockSms.push(newSms);
    return newSms;
  }
};

// Моковые данные для голосов
export const mockVoices: Voice[] = [
  {
    id: 'voice-anna-1',
    name: 'Анна (дружелюбная)',
    gender: 'female',
    language: 'ru-RU',
    style: 'friendly',
    provider: 'elevenlabs',
    sampleUrl: '/samples/anna-friendly.mp3',
    settings: {
      speed: 1.0,
      pitch: 0,
      volume: 0.8,
      stability: 0.75
    }
  },
  {
    id: 'voice-anna-2',
    name: 'Анна (деловая)',
    gender: 'female',
    language: 'ru-RU',
    style: 'formal',
    provider: 'elevenlabs',
    sampleUrl: '/samples/anna-formal.mp3',
    settings: {
      speed: 0.95,
      pitch: -2,
      volume: 0.8,
      stability: 0.8
    }
  },
  {
    id: 'voice-mikhail-1',
    name: 'Михаил (деловой)',
    gender: 'male',
    language: 'ru-RU',
    style: 'formal',
    provider: 'elevenlabs',
    sampleUrl: '/samples/mikhail-formal.mp3',
    settings: {
      speed: 0.9,
      pitch: -5,
      volume: 0.85,
      stability: 0.85
    }
  },
  {
    id: 'voice-elena-1',
    name: 'Елена (профессиональная)',
    gender: 'female',
    language: 'ru-RU',
    style: 'formal',
    provider: 'yandex',
    sampleUrl: '/samples/elena-professional.mp3',
    settings: {
      speed: 1.0,
      pitch: 0,
      volume: 0.8,
      stability: 0.8
    }
  },
  {
    id: 'voice-dmitry-1',
    name: 'Дмитрий (энергичный)',
    gender: 'male',
    language: 'ru-RU',
    style: 'energetic',
    provider: 'elevenlabs',
    sampleUrl: '/samples/dmitry-energetic.mp3',
    settings: {
      speed: 1.1,
      pitch: 2,
      volume: 0.9,
      stability: 0.7
    }
  }
];

// Моковые данные для агентов
export const mockAgents: Agent[] = [
  {
    id: 'agent-1',
    name: 'Анна - Регистрация',
    description: 'Агент для регистрации новых пользователей',
    baseType: 'registration',
    role: 'registration_agent',
    voiceId: 'voice-anna-1',
    status: 'active',
    campaigns: ['obz-1', 'obz-3'],
    settings: {
      responseDelay: 500,
      maxSilenceDuration: 3,
      interruptionHandling: true
    },
    prompts: [
      {
        id: 'prompt-1',
        stage: 'greeting',
        title: 'Приветствие',
        prompt: 'Здравствуйте! Меня зовут Анна, я звоню от компании. У вас есть минутка для разговора?',
        conditions: [
          {
            if: 'время_дня == утро',
            then: 'Доброе утро! Меня зовут Анна...'
          },
          {
            if: 'время_дня == вечер',
            then: 'Добрый вечер! Меня зовут Анна...'
          }
        ],
        fallback: 'Здравствуйте! Меня зовут Анна, я звоню от компании.'
      },
      {
        id: 'prompt-2',
        stage: 'consent_question',
        title: 'Вопрос о согласии',
        prompt: 'Мы предлагаем вам зарегистрироваться на нашей платформе. Могу я отправить вам ссылку для регистрации по SMS?',
        fallback: 'Хотели бы вы получить информацию о регистрации?'
      },
      {
        id: 'prompt-3',
        stage: 'rejection_response',
        title: 'Ответ на отказ',
        prompt: 'Понимаю. Возможно, вас заинтересует в будущем. Хорошего дня!',
        fallback: 'Спасибо за время. До свидания!'
      }
    ],
    createdAt: new Date('2024-01-10T10:00:00Z'),
    updatedAt: new Date('2024-01-15T14:30:00Z'),
    version: 2,
    createdBy: 'admin'
  },
  {
    id: 'agent-2',
    name: 'Михаил - Реактивация',
    description: 'Агент для возврата неактивных клиентов',
    baseType: 'reactivation',
    role: 'reactivation_agent',
    voiceId: 'voice-mikhail-1',
    status: 'active',
    campaigns: ['obz-2'],
    settings: {
      responseDelay: 300,
      maxSilenceDuration: 4,
      interruptionHandling: true
    },
    prompts: [
      {
        id: 'prompt-4',
        stage: 'greeting',
        title: 'Приветствие',
        prompt: 'Здравствуйте! Это Михаил из компании. Мы заметили, что вы давно не заходили к нам. Хотел предложить специальное предложение.',
        fallback: 'Здравствуйте! Это Михаил, у нас есть специальное предложение для вас.'
      },
      {
        id: 'prompt-5',
        stage: 'offer_presentation',
        title: 'Презентация предложения',
        prompt: 'Мы приготовили для вас персональный бонус 100% к депозиту. Интересно?',
        fallback: 'У нас есть специальный бонус для вас.'
      }
    ],
    createdAt: new Date('2024-01-12T09:00:00Z'),
    updatedAt: new Date('2024-01-14T16:00:00Z'),
    version: 1,
    createdBy: 'admin'
  },
  {
    id: 'agent-3',
    name: 'Елена - Холодные звонки',
    description: 'Агент для работы с холодной базой',
    baseType: 'registration',
    role: 'cold_calling_agent',
    voiceId: 'voice-elena-1',
    status: 'inactive',
    campaigns: [],
    settings: {
      responseDelay: 700,
      maxSilenceDuration: 2,
      interruptionHandling: false
    },
    prompts: [
      {
        id: 'prompt-6',
        stage: 'greeting',
        title: 'Приветствие',
        prompt: 'Добрый день! Меня зовут Елена. Я представляю компанию, которая специализируется на...',
        fallback: 'Добрый день! Это Елена из компании.'
      }
    ],
    createdAt: new Date('2024-01-05T15:00:00Z'),
    updatedAt: new Date('2024-01-05T15:00:00Z'),
    version: 1,
    createdBy: 'admin'
  }
];

// Каталог голосов
export const mockVoiceLibrary: VoiceLibrary = {
  voices: mockVoices,
  categories: [
    {
      id: 'female-friendly',
      name: 'Женские дружелюбные',
      description: 'Теплые женские голоса для клиентского сервиса',
      voiceIds: ['voice-anna-1']
    },
    {
      id: 'female-formal',
      name: 'Женские деловые',
      description: 'Профессиональные женские голоса',
      voiceIds: ['voice-anna-2', 'voice-elena-1']
    },
    {
      id: 'male-formal',
      name: 'Мужские деловые',
      description: 'Авторитетные мужские голоса',
      voiceIds: ['voice-mikhail-1']
    },
    {
      id: 'male-energetic',
      name: 'Мужские энергичные',
      description: 'Динамичные мужские голоса для активных продаж',
      voiceIds: ['voice-dmitry-1']
    }
  ]
};

// Шаблоны промтов
export const mockPromptTemplates: PromptTemplate[] = [
  {
    id: 'template-1',
    name: 'Дружелюбное приветствие',
    description: 'Теплое приветствие для клиентского сервиса',
    stage: 'greeting',
    template: 'Здравствуйте, {client_name}! Меня зовут {agent_name}, я звоню от компании {company_name}. У вас есть минутка для разговора?',
    variables: ['client_name', 'agent_name', 'company_name'],
    category: 'greeting',
    tags: ['friendly', 'personal'],
    createdAt: new Date('2024-01-10T10:00:00Z'),
    updatedAt: new Date('2024-01-15T14:30:00Z'),
    usageCount: 15
  },
  {
    id: 'template-2',
    name: 'Деловое приветствие',
    description: 'Формальное приветствие для B2B',
    stage: 'greeting',
    template: 'Добрый день! Это {agent_name} из {company_name}. Я звоню по поводу {reason}. Удобно ли сейчас говорить?',
    variables: ['agent_name', 'company_name', 'reason'],
    category: 'greeting',
    tags: ['formal', 'business'],
    createdAt: new Date('2024-01-12T09:00:00Z'),
    updatedAt: new Date('2024-01-12T09:00:00Z'),
    usageCount: 8
  },
  {
    id: 'template-3',
    name: 'Обработка возражения "нет времени"',
    description: 'Стандартный ответ на возражение о времени',
    stage: 'objection_handling',
    template: 'Понимаю, что у вас мало времени. Это займет буквально минуту. {value_proposition}',
    variables: ['value_proposition'],
    category: 'objection_handling',
    tags: ['time_objection', 'brief'],
    createdAt: new Date('2024-01-08T15:00:00Z'),
    updatedAt: new Date('2024-01-10T12:00:00Z'),
    usageCount: 23
  }
];

// Версии агентов
export const mockAgentVersions: AgentVersion[] = [
  {
    id: 'version-1-1',
    agentId: 'agent-1',
    version: 1,
    name: 'Базовая версия',
    description: 'Первоначальная версия агента регистрации',
    prompts: mockAgents[0].prompts,
    settings: mockAgents[0].settings,
    createdAt: new Date('2024-01-10T10:00:00Z'),
    createdBy: 'admin',
    status: 'active',
    isBaseline: true
  },
  {
    id: 'version-1-2',
    agentId: 'agent-1',
    version: 2,
    name: 'Улучшенная версия',
    description: 'Более персонализированные промты',
    prompts: [
      {
        id: 'prompt-1-v2',
        stage: 'greeting',
        title: 'Персонализированное приветствие',
        prompt: 'Добрый день! Меня зовут Анна, я звоню от нашей компании специально для вас. Видела, что вы интересовались нашими услугами. У вас есть пара минут?',
        conditions: [
          {
            if: 'время_дня == утро',
            then: 'Доброе утро! Меня зовут Анна...'
          },
          {
            if: 'время_дня == вечер',
            then: 'Добрый вечер! Меня зовут Анна...'
          }
        ],
        fallback: 'Здравствуйте! Меня зовут Анна, я звоню специально для вас.'
      },
      {
        id: 'prompt-2-v2',
        stage: 'consent_question',
        title: 'Вопрос с выгодой',
        prompt: 'У нас есть специальное предложение именно для таких клиентов как вы. Могу я отправить детали по SMS, чтобы вы могли изучить их в удобное время?',
        fallback: 'Хотели бы вы получить персональное предложение?'
      }
    ],
    settings: {
      responseDelay: 300, // Быстрее отвечает
      maxSilenceDuration: 2, // Меньше ждет
      interruptionHandling: true
    },
    createdAt: new Date('2024-01-15T14:30:00Z'),
    createdBy: 'admin',
    status: 'draft'
  }
];

// A/B тесты
export const mockABTests: ABTest[] = [
  {
    id: 'ab-test-1',
    name: 'Персонализация vs Стандарт',
    description: 'Тестирование персонализированных промтов против стандартных',
    agentId: 'agent-1',
    status: 'running',
    variants: [
      {
        id: 'variant-a',
        name: 'A (Контроль)',
        versionId: 'version-1-1',
        trafficAllocation: 50,
        isControl: true
      },
      {
        id: 'variant-b',
        name: 'B (Персонализация)',
        versionId: 'version-1-2',
        trafficAllocation: 50
      }
    ],
    settings: {
      duration: 14,
      minSampleSize: 1000,
      confidenceLevel: 95,
      primaryMetric: 'conversion_rate',
      secondaryMetrics: ['sms_consent_rate', 'avg_call_duration'],
      autoStop: true,
      trafficRampUp: {
        enabled: true,
        startPercent: 10,
        rampUpDays: 3
      }
    },
    metrics: {
      totalCalls: 847,
      variantMetrics: {
        'variant-a': {
          calls: 423,
          conversions: 289,
          conversionRate: 68.3,
          avgDuration: 145,
          smsConsents: 201,
          smsConsentRate: 47.5,
          successRate: 68.3
        },
        'variant-b': {
          calls: 424,
          conversions: 318,
          conversionRate: 75.0,
          avgDuration: 132,
          smsConsents: 234,
          smsConsentRate: 55.2,
          successRate: 75.0
        }
      },
      statisticalSignificance: {
        'variant-b': {
          pValue: 0.032,
          isSignificant: true,
          confidenceInterval: [2.1, 11.3],
          uplift: 9.8
        }
      },
      winner: 'variant-b'
    },
    createdAt: new Date('2024-01-15T10:00:00Z'),
    startedAt: new Date('2024-01-15T12:00:00Z'),
    createdBy: 'admin'
  }
];
</file>

<file path="src/app/settings/page.tsx">
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Input } from '@/components/ui/input'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import {
  Plug,
  Webhook,
  Settings,
  Activity,
  Shield,
  CheckSquare,
  Database,
  Bell,
  Search,
  Calendar,
  Download,
  ChevronRight,
  Clock,
  Server,
  Zap,
  HardDrive
} from 'lucide-react'

type SystemType = 'asterisk' | 'erp_api' | 'internal_api' | 'queue' | 'auth' | 'storage'
type EventClass = 'connectivity' | 'auth_permission' | 'timeout_ratelimit' | 'validation_schema' | 'request_response' | 'mapping_integration' | 'other_unexpected'

interface ErrorGroup {
  id: string
  system: SystemType
  systemName: string
  lastErrorTime: string
  totalEvents: number
  uniqueCodes: number
  isActive: boolean
  incidents: ErrorIncident[]
}

interface ErrorIncident {
  id: string
  timestamp: string
  eventClass: EventClass
  errorCode: string
  message: string
  companyId?: string
  details: any
}

const systemInfo: Record<SystemType, { name: string; icon: any; color: string }> = {
  asterisk: { name: 'Asterisk (телефония)', icon: Zap, color: 'bg-purple-100 text-purple-800' },
  erp_api: { name: 'ERP API / Hook', icon: Database, color: 'bg-blue-100 text-blue-800' },
  internal_api: { name: 'Внутренний API', icon: Server, color: 'bg-green-100 text-green-800' },
  queue: { name: 'Очередь/шина', icon: Activity, color: 'bg-orange-100 text-orange-800' },
  auth: { name: 'Аутентификация/ключи', icon: Shield, color: 'bg-yellow-100 text-yellow-800' },
  storage: { name: 'Хранилище/файлы', icon: HardDrive, color: 'bg-gray-100 text-gray-800' }
}

const eventClassInfo: Record<EventClass, string> = {
  connectivity: 'Connectivity',
  auth_permission: 'Auth/Permission',
  timeout_ratelimit: 'Timeout/Rate limit',
  validation_schema: 'Validation/Schema',
  request_response: 'Request/Response',
  mapping_integration: 'Mapping/Integration',
  other_unexpected: 'Other/Unexpected'
}

const mockErrorGroups: ErrorGroup[] = [
  {
    id: 'group-1',
    system: 'asterisk',
    systemName: 'Asterisk (телефония)',
    lastErrorTime: '12:43 сегодня',
    totalEvents: 57,
    uniqueCodes: 3,
    isActive: true,
    incidents: [
      {
        id: 'inc-1',
        timestamp: '2025-09-22 12:43:18',
        eventClass: 'connectivity',
        errorCode: 'AST_503',
        message: 'Connection lost to Asterisk server at pbx.yourcompany.com',
        companyId: 'COMP-001',
        details: {
          server: 'pbx.yourcompany.com',
          port: 5038,
          retryCount: 5,
          lastAttempt: '12:43:18'
        }
      },
      {
        id: 'inc-2',
        timestamp: '2025-09-22 12:35:22',
        eventClass: 'timeout_ratelimit',
        errorCode: 'AST_408',
        message: 'Connection timeout after 30 seconds',
        companyId: 'COMP-002',
        details: {
          server: 'pbx.yourcompany.com',
          timeout: 30000,
          attempt: 3
        }
      }
    ]
  },
  {
    id: 'group-2',
    system: 'erp_api',
    systemName: 'ERP API / Hook',
    lastErrorTime: '2025-09-22 14:28',
    totalEvents: 24,
    uniqueCodes: 5,
    isActive: false,
    incidents: [
      {
        id: 'inc-3',
        timestamp: '2025-09-22 14:28:45',
        eventClass: 'auth_permission',
        errorCode: 'ERP_401',
        message: 'API key expired or invalid',
        companyId: 'COMP-003',
        details: {
          endpoint: '/api/v2/auth',
          statusCode: 401,
          apiKeyLastChars: '...a4b2'
        }
      }
    ]
  },
  {
    id: 'group-3',
    system: 'internal_api',
    systemName: 'Внутренний API',
    lastErrorTime: '2025-09-21 23:45',
    totalEvents: 12,
    uniqueCodes: 2,
    isActive: false,
    incidents: [
      {
        id: 'inc-5',
        timestamp: '2025-09-21 23:45:30',
        eventClass: 'request_response',
        errorCode: 'API_500',
        message: 'Internal server error on /api/campaigns/sync',
        details: {
          url: '/api/campaigns/sync',
          statusCode: 500,
          method: 'POST'
        }
      }
    ]
  },
  {
    id: 'group-4',
    system: 'auth',
    systemName: 'Аутентификация/ключи',
    lastErrorTime: '2025-09-22 10:15',
    totalEvents: 8,
    uniqueCodes: 1,
    isActive: true,
    incidents: [
      {
        id: 'inc-6',
        timestamp: '2025-09-22 10:15:00',
        eventClass: 'auth_permission',
        errorCode: 'AUTH_TOKEN_EXPIRED',
        message: 'JWT token has expired',
        companyId: 'COMP-005',
        details: {
          tokenId: 'tok_abc123',
          expiresAt: '2025-09-22 10:00:00',
          userId: 'user_456'
        }
      }
    ]
  }
]

const settingsSections = [
  {
    title: 'Хаб интеграций',
    description: 'Подключение к ERP/CRM системам, телефонии и SMS-провайдерам',
    icon: Plug,
    href: '/settings/integrations',
    color: 'text-blue-600',
    bgColor: 'bg-blue-50'
  },
  {
    title: 'Центр вебхуков и событий',
    description: 'Мониторинг исходящих статусов звонков и событий системы',
    icon: Webhook,
    href: '/settings/webhooks',
    color: 'text-purple-600',
    bgColor: 'bg-purple-50'
  },
  {
    title: 'Логи ошибок',
    description: 'Негативные события интеграций (хранение 30 дней с автоочисткой)',
    icon: Bell,
    href: '/settings/notifications',
    color: 'text-red-600',
    bgColor: 'bg-red-50'
  }
]

const quickStats = [
  { label: 'Активные интеграции', value: '5', icon: Activity, color: 'text-green-600' },
  { label: 'События за сегодня', value: '1,234', icon: Webhook, color: 'text-blue-600' },
  { label: 'Передано ID в ERP', value: '892', icon: Shield, color: 'text-red-600' },
  { label: 'Задач в очереди', value: '23', icon: CheckSquare, color: 'text-orange-600' }
]

export default function SettingsPage() {
  const router = useRouter()
  const [errorGroups] = useState<ErrorGroup[]>(mockErrorGroups)
  const [selectedPeriod, setSelectedPeriod] = useState<string>('24h')
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedGroup, setSelectedGroup] = useState<ErrorGroup | null>(null)
  const [incidentSearch, setIncidentSearch] = useState('')
  const [eventClassFilter, setEventClassFilter] = useState<string>('all')
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 10

  const getSystemIcon = (system: SystemType) => {
    const Icon = systemInfo[system].icon
    return <Icon className="h-4 w-4 text-gray-500" />
  }

  const getEventClassBadge = (eventClass: EventClass) => {
    return <Badge variant="outline">{eventClassInfo[eventClass]}</Badge>
  }

  const formatLastError = (time: string) => {
    if (time.includes('сегодня')) {
      return time
    }
    const date = new Date(time)
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.floor(diffMs / 60000)
    
    if (diffMins < 5) {
      return `${diffMins} мин назад`
    }
    return time
  }

  const filteredGroups = errorGroups.filter(group => {
    if (searchQuery && 
        !group.systemName.toLowerCase().includes(searchQuery.toLowerCase())) {
      return false
    }
    return true
  })

  const filteredIncidents = selectedGroup?.incidents.filter(incident => {
    if (eventClassFilter !== 'all' && incident.eventClass !== eventClassFilter) {
      return false
    }
    if (incidentSearch) {
      const search = incidentSearch.toLowerCase()
      return incident.message.toLowerCase().includes(search) ||
             incident.errorCode.toLowerCase().includes(search) ||
             (incident.companyId && incident.companyId.toLowerCase().includes(search))
    }
    return true
  }) || []

  const paginatedIncidents = filteredIncidents.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  )

  const totalPages = Math.ceil(filteredIncidents.length / itemsPerPage)

  const exportData = (format: 'csv' | 'json') => {
    const dataToExport = selectedGroup ? filteredIncidents : filteredGroups
    
    if (format === 'json') {
      const json = JSON.stringify(dataToExport, null, 2)
      const blob = new Blob([json], { type: 'application/json' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `error-logs-${new Date().toISOString()}.json`
      a.click()
    } else {
      let csv = ''
      if (selectedGroup) {
        csv = 'Время,Класс события,Код,Сообщение,ID компании\n'
        filteredIncidents.forEach(incident => {
          csv += `"${incident.timestamp}","${eventClassInfo[incident.eventClass]}","${incident.errorCode}","${incident.message}","${incident.companyId || ''}"\n`
        })
      } else {
        csv = 'Группа/Система,Последняя ошибка,Всего событий,Уникальных кодов,Статус\n'
        filteredGroups.forEach(group => {
          csv += `"${group.systemName}","${group.lastErrorTime}",${group.totalEvents},${group.uniqueCodes},"${group.isActive ? 'Идут сейчас' : 'Нет новых'}"\n`
        })
      }
      const blob = new Blob([csv], { type: 'text/csv' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `error-logs-${new Date().toISOString()}.csv`
      a.click()
    }
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <div className="flex items-center space-x-3 mb-2">
          <Settings className="h-8 w-8 text-gray-700" />
          <h1 className="text-3xl font-bold">Настройки и интеграции</h1>
        </div>
        <p className="text-gray-600">
          Управление подключениями, согласиями и настройками системы
        </p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        {quickStats.map((stat, index) => (
          <Card key={index} className="hover:shadow-md transition-shadow">
            <CardContent className="p-4">
              <div className="flex items-start justify-between">
                <div>
                  <p className="text-sm text-gray-600">{stat.label}</p>
                  <p className="text-2xl font-bold mt-1">{stat.value}</p>
                </div>
                <stat.icon className={`h-8 w-8 ${stat.color} opacity-60`} />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Settings Sections Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {settingsSections.map((section, index) => (
          <Card
            key={index}
            className="hover:shadow-lg transition-all cursor-pointer group"
            onClick={() => router.push(section.href)}
          >
            <CardHeader>
              <div className={`w-12 h-12 rounded-lg ${section.bgColor} flex items-center justify-center mb-3`}>
                <section.icon className={`h-6 w-6 ${section.color}`} />
              </div>
              <CardTitle className="group-hover:text-blue-600 transition-colors">
                {section.title}
              </CardTitle>
              <CardDescription className="mt-2">
                {section.description}
              </CardDescription>
            </CardHeader>
          </Card>
        ))}
      </div>

      {/* System Health */}
      <Card className="mt-8">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <Database className="h-5 w-5 text-gray-600" />
              <CardTitle>Состояние системы</CardTitle>
            </div>
            <div className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
              <span className="text-sm text-green-600 font-medium">Все системы работают</span>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <span className="text-sm text-gray-600">API Gateway</span>
              <span className="text-sm font-medium text-green-600">Активен</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <span className="text-sm text-gray-600">Webhook Processor</span>
              <span className="text-sm font-medium text-green-600">Активен</span>
            </div>
            <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
              <span className="text-sm text-gray-600">SMS Gateway</span>
              <span className="text-sm font-medium text-green-600">Активен</span>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Error Logs Section */}
      <Card className="mt-8">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 rounded-lg bg-red-50 flex items-center justify-center">
                <Bell className="h-6 w-6 text-red-600" />
              </div>
              <div>
                <CardTitle>Логи ошибок</CardTitle>
                <CardDescription>
                  Сводка по системам • Хранение 30 дней с автоочисткой
                </CardDescription>
              </div>
            </div>
            <Button variant="outline" size="sm" onClick={() => router.push('/settings/notifications')}>
              Все логи
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {/* Filter Bar */}
          <div className="flex items-center space-x-4 mb-6 p-4 bg-gray-50 rounded-lg">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по названию группы..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>
              <SelectTrigger className="w-[180px]">
                <Calendar className="h-4 w-4 mr-2" />
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="today">Сегодня</SelectItem>
                <SelectItem value="24h">24 часа</SelectItem>
                <SelectItem value="7d">7 дней</SelectItem>
                <SelectItem value="30d">30 дней</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex space-x-2">
              <Button variant="outline" size="sm" onClick={() => exportData('csv')}>
                <Download className="h-4 w-4 mr-2" />
                CSV
              </Button>
              <Button variant="outline" size="sm" onClick={() => exportData('json')}>
                <Download className="h-4 w-4 mr-2" />
                JSON
              </Button>
            </div>
          </div>
          
          {/* Error Groups Table */}
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Группа / Система</TableHead>
                <TableHead>Последняя ошибка</TableHead>
                <TableHead className="text-center">Всего событий</TableHead>
                <TableHead className="text-center">Уникальных кодов</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead className="text-right">Действие</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredGroups.map((group) => (
                <TableRow 
                  key={group.id} 
                  className="cursor-pointer hover:bg-gray-50"
                  onClick={() => setSelectedGroup(group)}
                >
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getSystemIcon(group.system)}
                      <div>
                        <p className="font-medium">{group.systemName}</p>
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-1 text-sm">
                      <Clock className="h-3 w-3 text-gray-400" />
                      <span className={group.isActive ? 'text-red-600 font-medium' : 'text-gray-600'}>
                        {formatLastError(group.lastErrorTime)}
                      </span>
                    </div>
                  </TableCell>
                  <TableCell className="text-center">
                    <span className="font-semibold text-lg">{group.totalEvents}</span>
                  </TableCell>
                  <TableCell className="text-center">
                    <Badge variant="secondary">{group.uniqueCodes}</Badge>
                  </TableCell>
                  <TableCell>
                    {group.isActive ? (
                      <div className="flex items-center space-x-1">
                        <span className="relative flex h-2 w-2">
                          <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                          <span className="relative inline-flex rounded-full h-2 w-2 bg-red-500"></span>
                        </span>
                        <span className="text-sm text-red-600 font-medium">Идут сейчас</span>
                      </div>
                    ) : (
                      <span className="text-sm text-gray-500">Нет новых</span>
                    )}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button variant="ghost" size="sm" className="text-blue-600">
                      Открыть
                      <ChevronRight className="h-4 w-4 ml-1" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {/* Dialog for Error Details */}
      <Dialog open={!!selectedGroup} onOpenChange={() => setSelectedGroup(null)}>
        <DialogContent className="max-w-6xl max-h-[80vh] overflow-hidden flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center space-x-2">
              <span>Детали группы:</span>
              <span className="font-bold">{selectedGroup?.systemName}</span>
            </DialogTitle>
            <DialogDescription>
              Список инцидентов с фильтрацией по классу события
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex items-center space-x-4 my-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по сообщению, коду или ID компании..."
                  value={incidentSearch}
                  onChange={(e) => setIncidentSearch(e.target.value)}
                  className="pl-9"
                />
              </div>
            </div>
            <Select value={eventClassFilter} onValueChange={setEventClassFilter}>
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Все классы" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все классы событий</SelectItem>
                <SelectItem value="connectivity">Connectivity</SelectItem>
                <SelectItem value="auth_permission">Auth/Permission</SelectItem>
                <SelectItem value="timeout_ratelimit">Timeout/Rate limit</SelectItem>
                <SelectItem value="validation_schema">Validation/Schema</SelectItem>
                <SelectItem value="request_response">Request/Response</SelectItem>
                <SelectItem value="mapping_integration">Mapping/Integration</SelectItem>
                <SelectItem value="other_unexpected">Other/Unexpected</SelectItem>
              </SelectContent>
            </Select>
            <Button variant="outline" size="sm" onClick={() => exportData('csv')}>
              <Download className="h-4 w-4 mr-2" />
              Экспорт
            </Button>
          </div>

          <div className="flex-1 overflow-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Время</TableHead>
                  <TableHead>Класс события</TableHead>
                  <TableHead>Код ошибки</TableHead>
                  <TableHead>Сообщение</TableHead>
                  <TableHead>ID компании</TableHead>
                  <TableHead>Детали</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {paginatedIncidents.map((incident) => (
                  <TableRow key={incident.id}>
                    <TableCell className="font-mono text-sm whitespace-nowrap">
                      {incident.timestamp}
                    </TableCell>
                    <TableCell>
                      {getEventClassBadge(incident.eventClass)}
                    </TableCell>
                    <TableCell>
                      <code className="text-sm bg-gray-100 px-2 py-1 rounded">
                        {incident.errorCode}
                      </code>
                    </TableCell>
                    <TableCell className="max-w-md">
                      <p className="text-sm">{incident.message}</p>
                    </TableCell>
                    <TableCell>
                      {incident.companyId ? (
                        <Badge variant="outline">{incident.companyId}</Badge>
                      ) : (
                        <span className="text-gray-400">—</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <details className="cursor-pointer">
                        <summary className="text-sm text-blue-600 hover:underline">
                          JSON
                        </summary>
                        <pre className="mt-2 p-2 bg-gray-100 rounded text-xs overflow-auto max-w-xs">
                          {JSON.stringify(incident.details, null, 2)}
                        </pre>
                      </details>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>

          {totalPages > 1 && (
            <div className="flex items-center justify-between mt-4 pt-4 border-t">
              <p className="text-sm text-gray-600">
                Показано {((currentPage - 1) * itemsPerPage) + 1} - {Math.min(currentPage * itemsPerPage, filteredIncidents.length)} из {filteredIncidents.length}
              </p>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                  disabled={currentPage === 1}
                >
                  Назад
                </Button>
                <div className="flex items-center space-x-1">
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    let pageNum
                    if (totalPages <= 5) {
                      pageNum = i + 1
                    } else if (currentPage <= 3) {
                      pageNum = i + 1
                    } else if (currentPage >= totalPages - 2) {
                      pageNum = totalPages - 4 + i
                    } else {
                      pageNum = currentPage - 2 + i
                    }
                    return (
                      <Button
                        key={pageNum}
                        variant={currentPage === pageNum ? "default" : "outline"}
                        size="sm"
                        onClick={() => setCurrentPage(pageNum)}
                        className="w-8 h-8 p-0"
                      >
                        {pageNum}
                      </Button>
                    )
                  })}
                </div>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}
                  disabled={currentPage === totalPages}
                >
                  Вперед
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/agents/new/page.tsx">
'use client'

import React, { useRef, useState } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft,
  Save,
  Play,
  Volume2,
  Settings,
  MessageSquare,
  User,
  AlertCircle,
  FileUp,
  Phone,
  Shield,
  Eye,
  Mic,
  CheckSquare,
  Copy,
  FileText
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { mockVoices, mockVoiceLibrary } from '@/lib/mock-data'
import { Agent, BaseType } from '@/lib/types'
import { CallTestModal } from '@/components/call-test-modal'

interface AgentForm {
  name: string
  subtitle: string // Подзаголовок/описание назначения
  description: string
  voiceId: string
  responseDelay: number
  interruptionHandling: boolean
  instruction: string // Инструкция (промт)
  knowledgeFiles?: File[] | null // Файлы знаний
  knowledgeFileNames?: string[] | null
  createdBy?: string // Кто создал
  model?: string
}


export default function NewAgentPage() {
  const router = useRouter()
  const [form, setForm] = useState<AgentForm>({
    name: '',
    subtitle: '',
    description: '',
    voiceId: '',
    responseDelay: 500,
    interruptionHandling: true,
    instruction: '',
    knowledgeFiles: null,
    knowledgeFileNames: null,
    createdBy: 'admin@company.com', // Мок данные
    model: 'gpt-4o'
  })
  const [isLoading, setIsLoading] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const [callStatus, setCallStatus] = useState<'idle' | 'calling' | 'ringing' | 'in_call'>('idle')
  const [testInput, setTestInput] = useState('')
  const [testResponse, setTestResponse] = useState('')
  const [isVoiceCall, setIsVoiceCall] = useState(false)
  const [isCallModalOpen, setIsCallModalOpen] = useState(false)
  const recognitionRef = useRef<any | null>(null)

  const handleInputChange = (field: keyof AgentForm, value: any) => {
    setForm(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleSave = async (asDraft = true) => {
    setIsLoading(true)
    
    // Имитация сохранения
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    console.log('Saving agent:', { ...form, status: asDraft ? 'inactive' : 'active' })
    
    setIsLoading(false)
    router.push('/agents')
  }

  const isStepCompleted = (step: number) => {
    switch (step) {
      case 1:
        return form.name && form.subtitle && form.description
      case 2:
        return form.voiceId
      case 3:
        return true
      case 4:
        return true
      default:
        return false
    }
  }

  const getVoiceById = (voiceId: string) => {
    return mockVoices.find(v => v.id === voiceId)
  }


  // Голосовой режим через микрофон (без телефонии)
  const startVoiceCall = () => {
    const SR: any = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition
    if (!SR) {
      alert('Браузер не поддерживает распознавание речи')
      return
    }
    const rec = new SR()
    rec.lang = 'ru-RU'
    rec.continuous = true
    rec.interimResults = false
    rec.onresult = (event: any) => {
      const transcript = Array.from(event.results)
        .map((r: any) => r[0].transcript)
        .join(' ')
      if (transcript) {
        const response = form.instruction
          ? `Ответ агента (по инструкции): ${form.instruction.slice(0, 60)}...`
          : 'Ответ агента: готов к работе.'
        setTestResponse(`${transcript} → ${response}`)
      }
    }
    rec.onend = () => {
      if (isVoiceCall) rec.start()
    }
    rec.start()
    recognitionRef.current = rec
    setIsVoiceCall(true)
    setCallStatus('in_call')
  }

  const stopVoiceCall = () => {
    try { recognitionRef.current?.stop?.() } catch {}
    recognitionRef.current = null
    setIsVoiceCall(false)
  }

  const steps = [
    { id: 1, name: 'Основная информация', icon: User },
    { id: 2, name: 'Голос (TTS)', icon: Volume2 },
    { id: 3, name: 'Промтинг', icon: MessageSquare },
    { id: 4, name: 'Итоги', icon: CheckSquare }
  ]

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Создание агента
            </h1>
            <p className="text-gray-600">
              Настройте параметры AI-агента для обзвонов
            </p>
          </div>
        </div>
        
        <div className="flex space-x-3">
          <Button 
            variant="outline" 
            onClick={() => {
              // Логика создания копии
              console.log('Создание копии агента')
            }}
            disabled={!form.name}
          >
            <Copy className="h-4 w-4 mr-2" />
            Создать копию
          </Button>
          <Button variant="outline" onClick={() => handleSave(true)} disabled={isLoading}>
            <FileText className="h-4 w-4 mr-2" />
            Сохранить как черновик
          </Button>
          <Button onClick={() => handleSave(false)} disabled={isLoading || !isStepCompleted(3)}>
            <Play className="h-4 w-4 mr-2" />
            Создать и активировать
          </Button>
        </div>
      </div>

      {/* Шаги */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div 
                  className={`flex items-center justify-center w-10 h-10 rounded-full cursor-pointer ${
                    currentStep === step.id 
                      ? 'bg-blue-600 text-white' 
                      : isStepCompleted(step.id)
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                  onClick={() => setCurrentStep(step.id)}
                >
                  <step.icon className="h-5 w-5" />
                </div>
                <div className="ml-3">
                  <p className={`text-sm font-medium ${
                    currentStep === step.id ? 'text-blue-600' : 'text-gray-600'
                  }`}>
                    {step.name}
                  </p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-24 h-0.5 mx-4 ${
                    isStepCompleted(step.id) ? 'bg-green-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Содержимое шагов */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          {/* Шаг 1: Роль/этап */}
          {currentStep === 1 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <User className="h-5 w-5 mr-2" />
                  Основная информация
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label htmlFor="name">Заголовок *</Label>
                  <Input
                    id="name"
                    placeholder="Например: Анна - Регистрация"
                    value={form.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="subtitle">Подзаголовок/описание назначения *</Label>
                  <Input
                    id="subtitle"
                    placeholder="Краткое описание назначения агента"
                    value={form.subtitle}
                    onChange={(e) => handleInputChange('subtitle', e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="description">Описание *</Label>
                  <Textarea
                    id="description"
                    placeholder="Опишите назначение и функции агента..."
                    value={form.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="mt-1 min-h-[100px]"
                  />
                </div>

                {/* Поле "Кто создал" */}
                <div className="pt-4 border-t">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Кто создал:</span>
                    <span className="font-medium">{form.createdBy}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 2: Выбор голоса */}
          {currentStep === 2 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Volume2 className="h-5 w-5 mr-2" />
                  Выбор голоса
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {mockVoiceLibrary.categories.map((category) => (
                  <div key={category.id}>
                    <h3 className="font-medium text-gray-900 mb-3">{category.name}</h3>
                    <p className="text-sm text-gray-600 mb-4">{category.description}</p>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {category.voiceIds.map((voiceId) => {
                        const voice = getVoiceById(voiceId)
                        if (!voice) return null
                        
                        return (
                          <Card 
                            key={voice.id} 
                            className={`cursor-pointer transition-colors ${
                              form.voiceId === voice.id ? 'ring-2 ring-blue-500' : 'hover:bg-gray-50'
                            }`}
                            onClick={() => handleInputChange('voiceId', voice.id)}
                          >
                            <CardContent className="p-4">
                              <div className="flex items-center justify-between">
                                <div>
                                  <h4 className="font-medium">{voice.name}</h4>
                                  <div className="flex items-center space-x-2 mt-1">
                                    <Badge variant="outline" className="text-xs">
                                      {voice.gender === 'male' ? 'Мужской' : 'Женский'}
                                    </Badge>
                                    <Badge variant="outline" className="text-xs">
                                      {voice.style}
                                    </Badge>
                                    <Badge variant="outline" className="text-xs">
                                      {voice.provider}
                                    </Badge>
                                  </div>
                                </div>
                                <Button size="sm" variant="outline">
                                  <Play className="h-4 w-4" />
                                </Button>
                              </div>
                            </CardContent>
                          </Card>
                        )
                      })}
                    </div>
                    {category.id !== mockVoiceLibrary.categories[mockVoiceLibrary.categories.length - 1].id && (
                      <Separator className="mt-6" />
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Шаг 3: Промтинг и настройки */}
          {currentStep === 3 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <MessageSquare className="h-5 w-5 mr-2" />
                  Инструкция и файлы знаний
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Инструкция (промт) */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Инструкция (промт)</Label>
                  <Textarea
                    id="instruction"
                    placeholder="Опишите инструкции для агента..."
                    value={form.instruction}
                    onChange={(e) => handleInputChange('instruction', e.target.value)}
                    className="min-h-[200px] font-mono text-sm bg-gray-50 border-gray-200"
                  />
                </div>


                {/* Файлы знаний */}
                <div className="space-y-2">
                  <Label className="text-sm font-medium">Файлы знаний</Label>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors">
                    <FileUp className="h-10 w-10 text-gray-400 mx-auto mb-3" />
                    <p className="text-sm text-gray-600 mb-2">
                      Перетащите файлы сюда или кликните для выбора
                    </p>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => document.getElementById('knowledge-files')?.click()}
                    >
                      Выбрать файлы
                    </Button>
                    <input
                      id="knowledge-files"
                      type="file"
                      multiple
                      className="hidden"
                      accept=".txt,.pdf,.md,.doc,.docx"
                      onChange={(e) => {
                        const files = Array.from(e.target.files || [])
                        handleInputChange('knowledgeFiles', files.length > 0 ? files : null)
                        handleInputChange('knowledgeFileNames', files.length > 0 ? files.map(f => f.name) : null)
                      }}
                    />
                    {form.knowledgeFileNames && form.knowledgeFileNames.length > 0 && (
                      <div className="mt-4 space-y-2">
                        {form.knowledgeFileNames.map((fileName, index) => (
                          <div key={index} className="flex items-center justify-between text-sm bg-gray-50 p-2 rounded">
                            <span className="text-gray-700">{fileName}</span>
                            <button
                              type="button"
                              onClick={() => {
                                const newFiles = form.knowledgeFileNames?.filter((_, i) => i !== index)
                                handleInputChange('knowledgeFileNames', newFiles?.length ? newFiles : null)
                              }}
                              className="text-red-500 hover:text-red-700"
                            >
                              Удалить
                            </button>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              
                {/* Тестирование */}
                <div className="border-t pt-6">
                  <h3 className="text-sm font-medium mb-4">ТЕСТИРОВАНИЕ</h3>
                  
                  <div className="grid grid-cols-2 gap-4">
                    {/* Тест по телефону */}
                    <Card className="p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center space-x-2">
                          <Phone className="h-5 w-5 text-blue-600" />
                          <Label className="text-sm font-medium">Тест по телефону</Label>
                        </div>
                      </div>
                      <p className="text-xs text-gray-600 mb-3">
                        Используется тестовый номер из интеграций
                      </p>
                      <Button
                        className="w-full"
                        variant="outline"
                        onClick={() => {
                          setCallStatus('calling')
                          setTimeout(() => setCallStatus('ringing'), 600)
                        }}
                      >
                        <Phone className="h-4 w-4 mr-2" />
                        Запустить тест
                      </Button>
                    </Card>

                    {/* Тест через микрофон */}
                    <Card className="p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center space-x-2">
                          <Mic className="h-5 w-5 text-green-600" />
                          <Label className="text-sm font-medium">Тест через микрофон</Label>
                        </div>
                      </div>
                      <p className="text-xs text-gray-600 mb-3">
                        Голосовое взаимодействие в браузере
                      </p>
                      <Button
                        className="w-full"
                        variant="outline"
                        onClick={() => setIsCallModalOpen(true)}
                      >
                        <Mic className="h-4 w-4 mr-2" />
                        Начать разговор
                      </Button>
                    </Card>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 4: Итоговые настройки */}
          {currentStep === 4 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <CheckSquare className="h-5 w-5 mr-2" />
                  Итоговые настройки
                </CardTitle>
                <CardDescription>
                  Проверьте все настройки перед сохранением агента
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Основная информация */}
                <div>
                  <h3 className="text-sm font-semibold mb-3 text-gray-700">Основная информация</h3>
                  <div className="space-y-2 bg-gray-50 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Заголовок:</span>
                      <span className="text-sm font-medium">{form.name || 'Не указано'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Подзаголовок:</span>
                      <span className="text-sm font-medium">{form.subtitle || 'Не указано'}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Описание:</span>
                      <span className="text-sm font-medium">
                        {form.description ? (form.description.length > 30 ? form.description.substring(0, 30) + '...' : form.description) : 'Не указано'}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Голос */}
                <div>
                  <h3 className="text-sm font-semibold mb-3 text-gray-700">Голос и TTS</h3>
                  <div className="space-y-2 bg-gray-50 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Голос:</span>
                      <span className="text-sm font-medium">
                        {mockVoices.find(v => v.id === form.voiceId)?.name || 'Не выбран'}
                      </span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Задержка ответа:</span>
                      <span className="text-sm font-medium">{form.responseDelay} мс</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">Обработка прерываний:</span>
                      <span className="text-sm font-medium">
                        {form.interruptionHandling ? 'Включена' : 'Выключена'}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Промптинг */}
                <div>
                  <h3 className="text-sm font-semibold mb-3 text-gray-700">Системные инструкции</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-sm text-gray-700 whitespace-pre-wrap">
                      {form.instruction || 'Не заданы'}
                    </p>
                  </div>
                </div>

                {/* Документы */}
                <div>
                  <h3 className="text-sm font-semibold mb-3 text-gray-700">Документы</h3>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <div className="flex justify-between">
                      <span className="text-sm text-gray-600">База знаний:</span>
                      <span className="text-sm font-medium">
                        {form.knowledgeFileNames?.[0] || 'Не загружена'}
                      </span>
                    </div>
                  </div>
                </div>

                <Separator />

                {/* Кнопка сохранения */}
                <div className="flex justify-end space-x-3">
                  <Button
                    variant="outline"
                    onClick={() => handleSave(true)}
                    disabled={isLoading}
                  >
                    Сохранить как черновик
                  </Button>
                  <Button
                    onClick={() => handleSave(false)}
                    disabled={isLoading || !isStepCompleted(1) || !isStepCompleted(2)}
                  >
                    {isLoading ? (
                      <>
                        <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2" />
                        Сохранение...
                      </>
                    ) : (
                      <>
                        <Save className="h-4 w-4 mr-2" />
                        Сохранить и активировать
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Предпросмотр агента */}
        <div className="lg:col-span-1">
          <Card className="sticky top-6">
            <CardHeader>
              <CardTitle>Предпросмотр агента</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <p className="text-sm text-gray-600">Название</p>
                <p className="font-medium">{form.name || 'Без названия'}</p>
              </div>

              {form.description && (
                <div>
                  <p className="text-sm text-gray-600">Описание</p>
                  <p className="text-sm">{form.description}</p>
                </div>
              )}

              {form.description && (
                <div>
                  <p className="text-sm text-gray-600">Описание</p>
                  <p className="text-sm">{form.description}</p>
                </div>
              )}

              {form.voiceId && (
                <div>
                  <p className="text-sm text-gray-600">Голос</p>
                  <div className="flex items-center space-x-2">
                    <Volume2 className="h-4 w-4 text-gray-400" />
                    <span className="font-medium">{getVoiceById(form.voiceId)?.name}</span>
                  </div>
                </div>
              )}

              <Separator />

              <div className="space-y-2">
                <h4 className="font-medium">Настройки</h4>
                <div className="text-sm space-y-1">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Задержка ответа:</span>
                    <span>{form.responseDelay} мс</span>
                  </div>
                  {/* Макс. тишина удалена */}
                  <div className="flex justify-between">
                    <span className="text-gray-600">Прерывания:</span>
                    <span>{form.interruptionHandling ? 'Включены' : 'Отключены'}</span>
                  </div>
                  {form.instruction && (
                    <div className="text-xs text-gray-600 mt-2">Инструкция задана</div>
                  )}
                  {form.knowledgeFileNames?.[0] && (
                    <div className="text-xs text-gray-600">Документ: {form.knowledgeFileNames[0]}</div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Навигация между шагами */}
      <Card>
        <CardContent className="p-6">
          <div className="flex justify-between">
            <Button
              variant="outline"
              onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}
              disabled={currentStep === 1}
            >
              Предыдущий шаг
            </Button>
            <Button
              onClick={() => setCurrentStep(Math.min(4, currentStep + 1))}
              disabled={currentStep === 4 || !isStepCompleted(currentStep)}
            >
              Следующий шаг
            </Button>
          </div>
        </CardContent>
      </Card>
      
      {/* Call Test Modal */}
      <CallTestModal 
        isOpen={isCallModalOpen}
        onClose={() => setIsCallModalOpen(false)}
        agentName={form.name || 'AI Agent'}
      />
    </div>
  )
}
</file>

<file path="src/app/companies/page.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Plus, 
  Play, 
  Pause, 
  Square, 
  Filter, 
  RefreshCw,
  Monitor,
  Users,
  Phone,
  Clock,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Search,
  Calendar,
  User,
  Settings,
  TrendingUp,
  Activity,
  MessageSquare,
  Volume2,
  UserCheck,
  PhoneOff,
  PhoneMissed,
  Bot,
  Download,
  FileText,
  GitBranch
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { maskPhoneNumber, formatCallDuration } from '@/lib/utils'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Input } from '@/components/ui/input'
import { DateFilter } from '@/components/ui/date-filter'
import { mockCampaigns } from '@/lib/mock-data'
import { Campaign, CampaignState, BaseType } from '@/lib/types'
import { getStatusColor, getStatusText, calculatePercentage } from '@/lib/utils'

interface ObzvonCampaign {
  id: string
  name: string
  description: string
  baseType: BaseType
  agent: string
  agentStage?: string
  database: string
  script: string
  status: 'active' | 'paused' | 'completed' | 'draft'
  totalNumbers: number
  calledNumbers: number
  successfulConnections: number
  transferredSuccessfully: number
  transfers: number
  retries: number
  startTime?: Date
  endTime?: Date
  progress: number
  // Дополнительные поля для декомпозиции
  refusals: number
  noAnswers: number
  voicemails: number
  busyNumbers: number
  // A/B тестирование
  hasABTest?: boolean
  abTestVariants?: {
    A: { agent: string; calls: number; conversions: number }
    B: { agent: string; calls: number; conversions: number }
  }
}

const mockObzvonCampaigns: ObzvonCampaign[] = [
  {
    id: 'obz-1',
    name: 'Тестовый обзвон 2',
    description: 'Тестирование новых скриптов для регистрации',
    baseType: 'registration',
    agent: 'Анна (голос 1)',
    agentStage: 'Приветствие',
    database: 'Тестовая база №3413 (1,250 номеров)',
    script: 'Тестовый скрипт обзвона',
    status: 'active',
    totalNumbers: 1250,
    calledNumbers: 847,
    successfulConnections: 623,
    transferredSuccessfully: 445,
    transfers: 89,
    retries: 156,
    refusals: 178,
    noAnswers: 224,
    voicemails: 38,
    busyNumbers: 42,
    startTime: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 часа назад
    progress: 68,
    hasABTest: true,
    abTestVariants: {
      A: { agent: 'Анна', calls: 423, conversions: 222 },
      B: { agent: 'Елена', calls: 424, conversions: 223 }
    }
  },
  {
    id: 'obz-2',
    name: 'Реактивация неактивных',
    description: 'Возвращение клиентов, неактивных более 90 дней',
    baseType: 'reactivation',
    agent: 'Михаил (голос 2)',
    agentStage: 'Напоминание',
    database: 'Неактивные 90 дней (2,100 номеров)',
    script: 'Возвращение с бонусом',
    status: 'active',
    totalNumbers: 2100,
    calledNumbers: 456,
    successfulConnections: 298,
    transferredSuccessfully: 156,
    transfers: 34,
    retries: 89,
    refusals: 142,
    noAnswers: 158,
    voicemails: 22,
    busyNumbers: 18,
    startTime: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 часов назад
    progress: 22,
    hasABTest: false
  },
  {
    id: 'obz-3',
    name: 'Холодная база январь',
    description: 'Обзвон новых лидов из январской выгрузки',
    baseType: 'registration',
    agent: 'Елена (голос 3)',
    agentStage: 'Холодный звонок',
    database: 'Новые лиды (850 номеров)',
    script: 'Знакомство с продуктом',
    status: 'draft',
    totalNumbers: 850,
    calledNumbers: 0,
    successfulConnections: 0,
    transferredSuccessfully: 0,
    transfers: 0,
    retries: 0,
    refusals: 0,
    noAnswers: 0,
    voicemails: 0,
    busyNumbers: 0,
    progress: 0
  },
  {
    id: 'obz-4',
    name: 'Работа с отказниками',
    description: 'Переубеждение клиентов с особыми условиями',
    baseType: 'refusals',
    agent: 'Ольга (голос 4)',
    agentStage: 'Переубеждение',
    database: 'Отказники Q4 (1,800 номеров)',
    script: 'Специальное предложение',
    status: 'active',
    totalNumbers: 1800,
    calledNumbers: 1245,
    successfulConnections: 856,
    transferredSuccessfully: 312,
    transfers: 156,
    retries: 389,
    refusals: 544,
    noAnswers: 389,
    voicemails: 67,
    busyNumbers: 89,
    startTime: new Date(Date.now() - 24 * 60 * 60 * 1000), // 24 часа назад
    progress: 69
  }
]

export default function ObzvoniPage() {
  const router = useRouter()
  const [campaigns, setCampaigns] = useState<ObzvonCampaign[]>(mockObzvonCampaigns)
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterAgent, setFilterAgent] = useState<string>('all')
  const [filterBaseType, setFilterBaseType] = useState<string>('all')
  const [searchQuery, setSearchQuery] = useState<string>('')
  const [searchIdQuery, setSearchIdQuery] = useState<string>('')
  const [isLoading, setIsLoading] = useState(false)
  // Единый период для всей страницы
  const [globalPeriod, setGlobalPeriod] = useState<string>('all')
  const [globalIntervalStart, setGlobalIntervalStart] = useState<string>('')
  const [globalIntervalEnd, setGlobalIntervalEnd] = useState<string>('')


  // Статистика в реальном времени (только по активным кампаниям)
  const activeCampaigns = campaigns.filter(c => c.status === 'active')

  const handleRefresh = async () => {
    setIsLoading(true)
    // Имитация обновления данных
    setTimeout(() => {
      setIsLoading(false)
    }, 1000)
  }

  const handleCampaignAction = (campaignId: string, action: 'start' | 'pause' | 'stop') => {
    setCampaigns(prev => prev.map(campaign => {
      if (campaign.id === campaignId) {
        switch (action) {
          case 'start':
            return { ...campaign, status: 'active' as const }
          case 'pause':
            return { ...campaign, status: 'paused' as const }
          case 'stop':
            return { ...campaign, status: 'completed' as const }
          default:
            return campaign
        }
      }
      return campaign
    }))
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активна</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершена</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getBaseTypeBadge = (baseType: BaseType) => {
    switch (baseType) {
      case 'registration':
        return <Badge className="bg-blue-100 text-blue-800">Регистрация</Badge>
      case 'no_answer':
        return <Badge className="bg-orange-100 text-orange-800">Недозвон</Badge>
      case 'refusals':
        return <Badge className="bg-red-100 text-red-800">Отказники</Badge>
      case 'reactivation':
        return <Badge className="bg-purple-100 text-purple-800">Реактивация</Badge>
      default:
        return <Badge>{baseType}</Badge>
    }
  }

  // Получение уникальных агентов для фильтра
  const uniqueAgents = Array.from(new Set(campaigns.map(c => c.agent)))

  const filteredCampaigns = campaigns.filter(campaign => {
    const matchesStatus = filterStatus === 'all' || campaign.status === filterStatus
    const matchesAgent = filterAgent === 'all' || campaign.agent === filterAgent
    const matchesBaseType = filterBaseType === 'all' || campaign.baseType === filterBaseType
    const matchesSearch = searchQuery === '' || 
      campaign.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      campaign.database.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesId = searchIdQuery === '' || 
      campaign.id.toLowerCase().includes(searchIdQuery.toLowerCase())
    
    return matchesStatus && matchesAgent && matchesBaseType && matchesSearch && matchesId
  })

  // Применяем глобальный период ко всем данным
  const getFilteredByPeriod = (campaigns: ObzvonCampaign[]) => {
    return campaigns.filter(campaign => {
      if (globalPeriod === 'all') return true
      if (!campaign.startTime) return false
      
      const now = new Date()
      const campaignDate = campaign.startTime
      
      switch (globalPeriod) {
        case 'today':
          const today = new Date()
          today.setHours(0, 0, 0, 0)
          const campaignDay = new Date(campaignDate)
          campaignDay.setHours(0, 0, 0, 0)
          return campaignDay.getTime() === today.getTime()
        case 'week':
          const weekAgo = new Date()
          weekAgo.setDate(weekAgo.getDate() - 7)
          return campaignDate >= weekAgo
        case 'month':
          const monthAgo = new Date()
          monthAgo.setMonth(monthAgo.getMonth() - 1)
          return campaignDate >= monthAgo
        case 'interval':
          if (!globalIntervalStart || !globalIntervalEnd) return true
          const start = new Date(globalIntervalStart)
          const end = new Date(globalIntervalEnd)
          end.setHours(23, 59, 59, 999)
          return campaignDate >= start && campaignDate <= end
        default:
          return true
      }
    })
  }

  const filteredByPeriod = getFilteredByPeriod(filteredCampaigns)
  
  // Подсчет статистики на основе отфильтрованных кампаний С УЧЕТОМ ПЕРИОДА
  const totalActive = filteredByPeriod.filter(c => c.status === 'active').length
  const totalCalls = filteredByPeriod.reduce((sum, c) => sum + c.calledNumbers, 0)
  const totalSuccess = filteredByPeriod.reduce((sum, c) => sum + c.successfulConnections, 0)
  const totalTransferredSuccessfully = filteredByPeriod.reduce((sum, c) => sum + c.transferredSuccessfully, 0)
  const totalRefusals = filteredByPeriod.reduce((sum, c) => sum + (c.refusals || 0), 0)
  const totalNoAnswers = filteredByPeriod.reduce((sum, c) => sum + (c.noAnswers || 0), 0)
  const totalVoicemails = filteredByPeriod.reduce((sum, c) => sum + (c.voicemails || 0), 0)
  const totalBusy = filteredByPeriod.reduce((sum, c) => sum + (c.busyNumbers || 0), 0)
  const totalReceived = filteredByPeriod.reduce((sum, c) => sum + c.totalNumbers, 0)
  const totalInProgress = filteredByPeriod.reduce((sum, c) => sum + (c.totalNumbers - c.calledNumbers), 0)

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">
            Компании
          </h1>
          <p className="text-gray-600">
            Управление компаниями обзвона
          </p>
        </div>
        
        <div className="flex space-x-3">
          <Button variant="outline" onClick={handleRefresh} disabled={isLoading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            Обновить
          </Button>
          
          <Button variant="outline" onClick={() => router.push('/companies/ab-tests')}>
            <TrendingUp className="h-4 w-4 mr-2" />
            A/B тесты
          </Button>
          
          <Button onClick={() => router.push('/companies/new')}>
            <Plus className="h-4 w-4 mr-2" />
            Создать кампанию
          </Button>
        </div>
      </div>

      {/* Основная статистика по активным кампаниям */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные кампании</p>
                <p className="text-2xl font-bold text-gray-900">{totalActive}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Phone className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего звонков</p>
                <p className="text-2xl font-bold text-gray-900">{totalCalls.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Успешные соединения</p>
                <p className="text-2xl font-bold text-gray-900">{totalSuccess.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Clock className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">В работе</p>
                <p className="text-2xl font-bold text-gray-900">{totalInProgress.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <UserCheck className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Передано успешно</p>
                <p className="text-2xl font-bold text-gray-900">{totalTransferredSuccessfully.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Декомпозиция обработанных контактов по исходам */}
      {filteredByPeriod.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Декомпозиция обработанных контактов по исходам</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  Статистика по {filteredByPeriod.length} кампаний (с учетом всех фильтров). Всего обработано: {totalCalls.toLocaleString()} контактов
                </p>
              </div>
              <DateFilter
                value={globalPeriod}
                onValueChange={setGlobalPeriod}
                intervalStart={globalIntervalStart}
                intervalEnd={globalIntervalEnd}
                onIntervalChange={(start, end) => {
                  setGlobalIntervalStart(start)
                  setGlobalIntervalEnd(end)
                }}
                label=""
                className="w-[180px]"
              />
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
              <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center justify-between mb-2">
                  <MessageSquare className="h-5 w-5 text-green-600" />
                  <Badge className="bg-green-100 text-green-800">Передано</Badge>
                </div>
                <p className="text-2xl font-bold text-green-600">
                  {totalTransferredSuccessfully.toLocaleString()}
                </p>
                <p className="text-sm text-gray-600">Успешные/передано</p>
                <p className="text-xs text-gray-500 mt-1">
                  {totalCalls > 0 ? Math.round((totalTransferredSuccessfully / totalCalls) * 100) : 0}% от обработанных
                </p>
              </div>

              <div className="p-4 bg-red-50 rounded-lg border border-red-200">
                <div className="flex items-center justify-between mb-2">
                  <XCircle className="h-5 w-5 text-red-600" />
                </div>
                <p className="text-2xl font-bold text-red-600">
                  {totalRefusals > 0 ? totalRefusals.toLocaleString() : '0'}
                </p>
                <p className="text-sm text-gray-600">Отказы</p>
                <p className="text-xs text-gray-500 mt-1">
                  {totalCalls > 0 && totalRefusals > 0 ? Math.round((totalRefusals / totalCalls) * 100) : 0}% от обработанных
                </p>
              </div>

              <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div className="flex items-center justify-between mb-2">
                  <PhoneOff className="h-5 w-5 text-gray-600" />
                </div>
                <p className="text-2xl font-bold text-gray-600">
                  {totalNoAnswers > 0 ? totalNoAnswers.toLocaleString() : '0'}
                </p>
                <p className="text-sm text-gray-600">Недозвоны</p>
                <p className="text-xs text-gray-500 mt-1">
                  {totalCalls > 0 && totalNoAnswers > 0 ? Math.round((totalNoAnswers / totalCalls) * 100) : 0}% от обработанных
                </p>
              </div>

              <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                <div className="flex items-center justify-between mb-2">
                  <Bot className="h-5 w-5 text-purple-600" />
                </div>
                <p className="text-2xl font-bold text-purple-600">
                  {totalVoicemails > 0 ? totalVoicemails.toLocaleString() : '0'}
                </p>
                <p className="text-sm text-gray-600">Автоответчики</p>
                <p className="text-xs text-gray-500 mt-1">
                  {totalCalls > 0 && totalVoicemails > 0 ? Math.round((totalVoicemails / totalCalls) * 100) : 0}% от обработанных
                </p>
              </div>

              <div className="p-4 bg-orange-50 rounded-lg border border-orange-200">
                <div className="flex items-center justify-between mb-2">
                  <PhoneMissed className="h-5 w-5 text-orange-600" />
                </div>
                <p className="text-2xl font-bold text-orange-600">
                  {totalBusy > 0 ? totalBusy.toLocaleString() : '0'}
                </p>
                <p className="text-sm text-gray-600">Занято</p>
                <p className="text-xs text-gray-500 mt-1">
                  {totalCalls > 0 && totalBusy > 0 ? Math.round((totalBusy / totalCalls) * 100) : 0}% от обработанных
                </p>
              </div>
            </div>
            
            <div className="mt-4 pt-4 border-t">
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  <span className="font-medium">Общая конверсия:</span>
                  <span className="ml-2 text-lg font-bold text-green-600">
                    {totalCalls > 0 ? ((totalTransferredSuccessfully / totalCalls) * 100).toFixed(1) : 0}%
                  </span>
                </div>
                <div className="text-sm text-gray-600">
                  <span className="font-medium">Осталось обработать:</span>
                  <span className="ml-2 text-lg font-bold text-orange-600">
                    {totalInProgress.toLocaleString()}
                  </span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Фильтры в линию */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col space-y-3">
            <div className="flex items-center space-x-3">
              {/* Поиск по названию/ID */}
              <div className="relative flex-1 max-w-sm">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по названию или ID..."
                  value={searchQuery || searchIdQuery}
                  onChange={(e) => {
                    setSearchQuery(e.target.value)
                    setSearchIdQuery(e.target.value)
                  }}
                  className="pl-10 h-9"
                />
              </div>

              {/* Фильтр периода (глобальный) */}
              <DateFilter
                value={globalPeriod}
                onValueChange={setGlobalPeriod}
                intervalStart={globalIntervalStart}
                intervalEnd={globalIntervalEnd}
                onIntervalChange={(start, end) => {
                  setGlobalIntervalStart(start)
                  setGlobalIntervalEnd(end)
                }}
                label=""
                className="w-[160px]"
              />

              {/* Фильтр по статусу */}
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger className="w-[150px] h-9">
                  <SelectValue placeholder="Статус" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все статусы</SelectItem>
                  <SelectItem value="active">Активные</SelectItem>
                  <SelectItem value="paused">На паузе</SelectItem>
                  <SelectItem value="completed">Завершённые</SelectItem>
                  <SelectItem value="draft">Черновики</SelectItem>
                </SelectContent>
              </Select>

              {/* Фильтр по агенту */}
              <Select value={filterAgent} onValueChange={setFilterAgent}>
                <SelectTrigger className="w-[180px] h-9">
                  <SelectValue placeholder="Агент" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все агенты</SelectItem>
                {uniqueAgents.map((agent) => (
                  <SelectItem key={agent} value={agent}>
                    {agent}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            {/* Фильтр по типу базы */}
            <Select value={filterBaseType} onValueChange={setFilterBaseType}>
              <SelectTrigger className="w-[150px] h-9">
                <SelectValue placeholder="Тип базы" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Все типы</SelectItem>
                <SelectItem value="registration">Регистрация</SelectItem>
                <SelectItem value="no_answer">Недозвон</SelectItem>
                <SelectItem value="refusals">Отказники</SelectItem>
                <SelectItem value="reactivation">Реактивация</SelectItem>
              </SelectContent>
            </Select>

            {/* Кнопка сброса фильтров */}
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => {
                setFilterStatus('all')
                setFilterAgent('all')
                setFilterBaseType('all')
                setSearchQuery('')
                setSearchIdQuery('')
                setGlobalPeriod('all')
                setGlobalIntervalStart('')
                setGlobalIntervalEnd('')
              }}
              className="whitespace-nowrap"
            >
              Сбросить
            </Button>
          </div>

          {/* Индикатор активных фильтров */}
          {(filterStatus !== 'all' || filterAgent !== 'all' || filterBaseType !== 'all' || searchQuery !== '' || searchIdQuery !== '' || globalPeriod !== 'all') && (
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <span>Активные фильтры:</span>
              {filterStatus !== 'all' && (
                <Badge variant="outline">Статус: {filterStatus}</Badge>
              )}
              {filterAgent !== 'all' && (
                <Badge variant="outline">Агент: {filterAgent}</Badge>
              )}
              {filterBaseType !== 'all' && (
                <Badge variant="outline">Тип базы: {filterBaseType}</Badge>
              )}
              {globalPeriod !== 'all' && (
                <Badge variant="outline">
                  Период: {globalPeriod === 'interval' && globalIntervalStart && globalIntervalEnd 
                    ? `${new Date(globalIntervalStart).toLocaleDateString()} - ${new Date(globalIntervalEnd).toLocaleDateString()}`
                    : globalPeriod === 'today' ? 'День'
                    : globalPeriod === 'week' ? 'Неделя'
                    : globalPeriod === 'month' ? 'Месяц'
                    : globalPeriod}
                </Badge>
              )}
              {searchQuery !== '' && (
                <Badge variant="outline">Поиск: &quot;{searchQuery}&quot;</Badge>
              )}
              <span className="text-gray-500">
                Показано: {filteredCampaigns.length} из {campaigns.length}
              </span>
            </div>
          )}
        </div>
        </CardContent>
      </Card>

      {/* Таблица кампаний */}
      <Card>
        <CardHeader>
          <CardTitle>Кампании ({filteredCampaigns.length})</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    ID
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Название
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Описание
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Тип базы
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Размер базы
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Статус
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Агент
                  </th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    A/B тест
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredCampaigns.map((campaign) => (
                  <tr key={campaign.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-mono font-medium text-gray-900">
                        {campaign.id}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">
                        {campaign.name}
                      </div>
                    </td>
                    <td className="px-6 py-4">
                      <div className="text-sm text-gray-600 max-w-xs truncate">
                        {campaign.description}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getBaseTypeBadge(campaign.baseType)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {campaign.totalNumbers.toLocaleString()}
                      </div>
                      <div className="text-xs text-gray-500">Обработано: {campaign.progress}%</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(campaign.status)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{campaign.agent}</div>
                      {campaign.agentStage && (
                        <div className="text-xs text-gray-500">Этап: {campaign.agentStage}</div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-center">
                      {campaign.hasABTest ? (
                        <div className="flex flex-col items-center space-y-1">
                          <div className="flex items-center space-x-2">
                            <GitBranch className="h-4 w-4 text-purple-600" />
                            <span className="text-xs font-medium text-purple-600">Активен</span>
                          </div>
                          {campaign.abTestVariants && (
                            <div className="flex space-x-1">
                              <Badge variant="outline" className="text-xs px-1 py-0">
                                A: {campaign.abTestVariants.A.agent.substring(0, 3)}
                              </Badge>
                              <Badge variant="outline" className="text-xs px-1 py-0">
                                B: {campaign.abTestVariants.B.agent.substring(0, 3)}
                              </Badge>
                            </div>
                          )}
                        </div>
                      ) : (
                        <span className="text-gray-400 text-xs">—</span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2">
                        {campaign.status === 'draft' && (
                          <Button
                            size="sm"
                            onClick={() => handleCampaignAction(campaign.id, 'start')}
                            title="Запустить"
                          >
                            <Play className="h-4 w-4" />
                          </Button>
                        )}
                        {campaign.status === 'active' && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleCampaignAction(campaign.id, 'pause')}
                            title="Пауза"
                          >
                            <Pause className="h-4 w-4" />
                          </Button>
                        )}
                        {campaign.status === 'paused' && (
                          <Button
                            size="sm"
                            onClick={() => handleCampaignAction(campaign.id, 'start')}
                            title="Продолжить"
                          >
                            <Play className="h-4 w-4" />
                          </Button>
                        )}
                        {(campaign.status === 'active' || campaign.status === 'paused') && (
                          <Button
                            size="sm"
                            variant="destructive"
                            onClick={() => handleCampaignAction(campaign.id, 'stop')}
                            title="Завершить"
                          >
                            <Square className="h-4 w-4" />
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => router.push(`/companies/${campaign.id}`)}
                          title="Открыть детали"
                        >
                          <Monitor className="h-4 w-4" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {filteredCampaigns.length === 0 && (
        <Card>
          <CardContent className="py-12">
            <div className="text-center">
              <p className="text-gray-500 mb-4">
                Нет кампаний, соответствующих выбранному фильтру
              </p>
              <Button onClick={() => router.push('/companies/new')}>
                <Plus className="h-4 w-4 mr-2" />
                Создать первую кампанию
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Мониторинг (вставлен с /obzvoni/monitor) */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Мониторинг обзвонов</CardTitle>
            <div className="flex items-center space-x-2">
              <Button variant="outline" onClick={() => router.push('/obzvoni/monitor')}>Открыть полноэкранно</Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Общие метрики */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <Phone className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Активные звонки</p>
                    <p className="text-2xl font-bold text-gray-900">{mockCampaigns.length > 0 ? 3 : 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Users className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">В очереди</p>
                    <p className="text-2xl font-bold text-gray-900">1,240</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <Activity className="h-6 w-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Обработано</p>
                    <p className="text-2xl font-bold text-gray-900">1,303</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <CheckCircle className="h-6 w-6 text-orange-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Успешность</p>
                    <p className="text-2xl font-bold text-gray-900">46.8%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <MessageSquare className="h-6 w-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Автоответчики</p>
                    <p className="text-2xl font-bold text-gray-900">38</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Таблица звонков */}
          <div className="space-y-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">Таблица звонков</h3>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Экспорт
              </Button>
            </div>
            
            {/* Фильтры для таблицы звонков */}
            <div className="flex items-center space-x-3 mb-4">
              <Select defaultValue="all">
                <SelectTrigger className="w-[200px]">
                  <SelectValue placeholder="Кампания" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все кампании</SelectItem>
                  <SelectItem value="test">Тестовый обзвон базы</SelectItem>
                  <SelectItem value="reactive">Реактивация неактивных</SelectItem>
                  <SelectItem value="registration">База регистраций</SelectItem>
                </SelectContent>
              </Select>
              
              <Select defaultValue="all">
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Статус" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все статусы</SelectItem>
                  <SelectItem value="talking">Разговор</SelectItem>
                  <SelectItem value="completed">Завершен</SelectItem>
                  <SelectItem value="voicemail">Автоответчик</SelectItem>
                  <SelectItem value="connecting">Соединение</SelectItem>
                </SelectContent>
              </Select>
              
              <Select defaultValue="all">
                <SelectTrigger className="w-[160px]">
                  <SelectValue placeholder="Агент" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все агенты</SelectItem>
                  <SelectItem value="anna">Анна</SelectItem>
                  <SelectItem value="mikhail">Михаил</SelectItem>
                  <SelectItem value="elena">Елена</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b bg-gray-50">
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">ID</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Статус</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Агент</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Дата/Время</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Длительность</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Теги</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Транскрибация</th>
                    <th className="text-left py-3 px-4 text-sm font-medium text-gray-700">Скачать аудио</th>
                  </tr>
                </thead>
                <tbody>
                  {[
                    { 
                      id: 'CNT-001234', 
                      status: 'talking', 
                      agent: 'Анна', 
                      datetime: '15.09.2025 14:32', 
                      duration: 120,
                      tags: ['Презентация', 'Интерес'],
                      transcription: 'Доступна',
                      audioUrl: '#'
                    },
                    { 
                      id: 'CNT-001235', 
                      status: 'completed', 
                      agent: 'Михаил', 
                      datetime: '15.09.2025 14:28', 
                      duration: 240,
                      tags: ['Отказ', 'Перезвонить'],
                      transcription: 'Доступна',
                      audioUrl: '#'
                    },
                    { 
                      id: 'CNT-001236', 
                      status: 'voicemail', 
                      agent: 'Елена', 
                      datetime: '15.09.2025 14:25', 
                      duration: 45,
                      tags: ['Автоответчик'],
                      transcription: 'Недоступна',
                      audioUrl: '#'
                    },
                    { 
                      id: 'CNT-001237', 
                      status: 'connecting', 
                      agent: 'Анна', 
                      datetime: '15.09.2025 14:35', 
                      duration: 5,
                      tags: [],
                      transcription: 'Недоступна',
                      audioUrl: '#'
                    },
                    { 
                      id: 'CNT-001238', 
                      status: 'completed', 
                      agent: 'Михаил', 
                      datetime: '15.09.2025 14:20', 
                      duration: 360,
                      tags: ['Успех', 'Передано успешно'],
                      transcription: 'Доступна',
                      audioUrl: '#'
                    },
                  ].map((row) => (
                    <tr key={row.id} className="border-b hover:bg-gray-50">
                      <td className="py-3 px-4 text-sm font-mono text-gray-900">{row.id}</td>
                      <td className="py-3 px-4 text-sm">
                        <div className="flex items-center space-x-2">
                          {row.status === 'talking' ? (
                            <>
                              <Volume2 className="h-4 w-4 text-green-600" />
                              <span className="text-green-600">Разговор</span>
                            </>
                          ) : row.status === 'completed' ? (
                            <>
                              <CheckCircle className="h-4 w-4 text-blue-600" />
                              <span className="text-blue-600">Завершен</span>
                            </>
                          ) : row.status === 'voicemail' ? (
                            <>
                              <MessageSquare className="h-4 w-4 text-purple-600" />
                              <span className="text-purple-600">Автоответчик</span>
                            </>
                          ) : (
                            <>
                              <Phone className="h-4 w-4 text-orange-600" />
                              <span className="text-orange-600">Соединение</span>
                            </>
                          )}
                        </div>
                      </td>
                      <td className="py-3 px-4 text-sm text-gray-700">{row.agent}</td>
                      <td className="py-3 px-4 text-sm text-gray-600">{row.datetime}</td>
                      <td className="py-3 px-4 text-sm font-medium text-gray-700">{formatCallDuration(row.duration)}</td>
                      <td className="py-3 px-4 text-sm">
                        <div className="flex flex-wrap gap-1">
                          {row.tags.map((tag, idx) => (
                            <Badge 
                              key={idx} 
                              variant="outline" 
                              className={
                                tag === 'Успех' || tag === 'Передано успешно' ? 'text-green-700 border-green-300' :
                                tag === 'Отказ' ? 'text-red-700 border-red-300' :
                                tag === 'Автоответчик' ? 'text-purple-700 border-purple-300' :
                                'text-gray-700 border-gray-300'
                              }
                            >
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </td>
                      <td className="py-3 px-4 text-sm">
                        {row.transcription === 'Доступна' ? (
                          <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-800">
                            <FileText className="h-4 w-4 mr-1" />
                            Открыть
                          </Button>
                        ) : (
                          <span className="text-gray-400">—</span>
                        )}
                      </td>
                      <td className="py-3 px-4 text-sm">
                        <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-800">
                          <Download className="h-4 w-4 mr-1" />
                          Скачать
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/obzvoni/[id]/page.tsx">
'use client'

import React, { useState } from 'react'
import { useRouter, useParams } from 'next/navigation'
import { 
  ArrowLeft,
  Play,
  Pause,
  Square,
  Copy,
  Phone,
  Clock,
  CheckCircle,
  XCircle,
  MessageSquare,
  Users,
  Download,
  FileText,
  Volume2,
  AlertTriangle,
  Check,
  Link2,
  UserCheck,
  PhoneOff,
  Bot,
  Calendar,
  Filter,
  FileDown,
  GitBranch
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { maskPhoneNumber } from '@/lib/utils'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { BaseType } from '@/lib/types'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'
import { DateFilter } from '@/components/ui/date-filter'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'

interface CompanyDetails {
  id: string
  companyId: string
  name: string
  baseType: BaseType
  status: 'active' | 'paused' | 'completed' | 'draft'
  agent: string
  voice: string
  // Метрики передачи в ERP
  totalReceived: number  // Сколько контактов передано ERP
  totalProcessed: number  // Сколько обработано
  totalInProgress: number  // Сколько в работе
  // Декомпозиция обработанных
  successfulConsent: number  // Успешные/согласие (SMS)
  refusals: number  // Отказы
  noAnswers: number  // Недозвоны
  voicemails: number  // Автоответчики (человек)
  robotVoicemails: number  // Автоответчики (роботы)
  progress: number
  historicalConversion: number  // Историческая результативность
  startTime?: Date
  endTime?: Date
}

interface CallRecord {
  id: string
  leadId: string  // ID контакта вместо номера
  dateTime: Date
  result: 'success' | 'refused' | 'no_answer' | 'voicemail' | 'robot_voicemail' | 'busy'
  category: string  // Категория результата
  duration: number
  hasSms: boolean
  hasLinkClick: boolean
  hasRegistration: boolean
  transferredToErp: boolean  // Флаг "передано в ERP/B24"
  hasRecording: boolean
  hasTranscript: boolean
  abVariant?: 'A' | 'B'  // Вариант A/B теста
}

// Моковые данные
const mockCompanyDetails: { [key: string]: CompanyDetails } = {
  'obz-1': {
    id: 'obz-1',
    companyId: 'CMP-1A2B3C4D',
    name: 'Новогодняя акция 2025',
    baseType: 'registration' as BaseType,
    status: 'active',
    agent: 'Анна',
    voice: 'Женский дружелюбный',
    totalReceived: 2500,
    totalProcessed: 1847,
    totalInProgress: 653,
    successfulConsent: 1234,
    refusals: 312,
    noAnswers: 189,
    voicemails: 71,
    robotVoicemails: 41,
    progress: 73.88,
    historicalConversion: 68.4,
    startTime: new Date(Date.now() - 3 * 60 * 60 * 1000)
  },
  'obz-2': {
    id: 'obz-2',
    companyId: 'CMP-5E6F7G8H',
    name: 'Реактивация клиентов',
    baseType: 'reactivation' as BaseType,
    status: 'paused',
    agent: 'Михаил',
    voice: 'Мужской деловой',
    totalReceived: 1800,
    totalProcessed: 456,
    totalInProgress: 1344,
    successfulConsent: 234,
    refusals: 89,
    noAnswers: 78,
    voicemails: 35,
    robotVoicemails: 20,
    progress: 25.33,
    historicalConversion: 51.3,
    startTime: new Date(Date.now() - 6 * 60 * 60 * 1000)
  },
  'obz-3': {
    id: 'obz-3',
    companyId: 'CMP-9I0J1K2L',
    name: 'Холодная база январь',
    baseType: 'no_answer' as BaseType,
    status: 'completed',
    agent: 'Елена',
    voice: 'Женский энергичный',
    totalReceived: 850,
    totalProcessed: 850,
    totalInProgress: 0,
    successfulConsent: 445,
    refusals: 178,
    noAnswers: 156,
    voicemails: 51,
    robotVoicemails: 20,
    progress: 100,
    historicalConversion: 52.4,
    startTime: new Date(Date.now() - 24 * 60 * 60 * 1000),
    endTime: new Date(Date.now() - 2 * 60 * 60 * 1000)
  }
}

const mockCallRecords: CallRecord[] = [
  {
    id: 'call-1',
    leadId: 'LEAD-001234',
    dateTime: new Date(Date.now() - 2 * 60 * 60 * 1000),
    result: 'success',
    category: 'Согласие',
    duration: 245,
    hasSms: true,
    hasLinkClick: true,
    hasRegistration: true,
    transferredToErp: true,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'A'
  },
  {
    id: 'call-2',
    leadId: 'LEAD-002345',
    dateTime: new Date(Date.now() - 3 * 60 * 60 * 1000),
    result: 'refused',
    category: 'Отказ',
    duration: 89,
    hasSms: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'B'
  },
  {
    id: 'call-3',
    leadId: 'LEAD-003456',
    dateTime: new Date(Date.now() - 4 * 60 * 60 * 1000),
    result: 'voicemail',
    category: 'Автоответчик',
    duration: 15,
    hasSms: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'A'
  },
  {
    id: 'call-6',
    leadId: 'LEAD-004567',
    dateTime: new Date(Date.now() - 7 * 60 * 60 * 1000),
    result: 'robot_voicemail',
    category: 'Робот-автоответчик',
    duration: 5,
    hasSms: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'B'
  },
  {
    id: 'call-4',
    leadId: 'LEAD-005678',
    dateTime: new Date(Date.now() - 5 * 60 * 60 * 1000),
    result: 'no_answer',
    category: 'Недозвон',
    duration: 0,
    hasSms: false,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: false,
    hasRecording: false,
    hasTranscript: false,
    abVariant: 'A'
  },
  {
    id: 'call-5',
    leadId: 'LEAD-006789',
    dateTime: new Date(Date.now() - 6 * 60 * 60 * 1000),
    result: 'success',
    category: 'Согласие',
    duration: 312,
    hasSms: true,
    hasLinkClick: false,
    hasRegistration: false,
    transferredToErp: true,
    hasRecording: true,
    hasTranscript: true,
    abVariant: 'B'
  }
]

export default function CompanyDetailsPage() {
  const router = useRouter()
  const params = useParams()
  const companyId = params.id as string
  
  const [company, setCompany] = useState<CompanyDetails | null>(
    mockCompanyDetails[companyId] || null
  )
  const [callRecords] = useState<CallRecord[]>(mockCallRecords)
  const [isLoading, setIsLoading] = useState(false)
  const [isCopied, setIsCopied] = useState(false)
  const [dateFilter, setDateFilter] = useState('today')
  const [dateFilterIntervalStart, setDateFilterIntervalStart] = useState('')
  const [dateFilterIntervalEnd, setDateFilterIntervalEnd] = useState('')
  const [searchFilter, setSearchFilter] = useState('')
  const [resultFilter, setResultFilter] = useState('all')
  const [showExportModal, setShowExportModal] = useState(false)
  const [exportPeriod, setExportPeriod] = useState('today')
  const [selectedStatuses, setSelectedStatuses] = useState<string[]>([])
  
  // Состояния для графика
  const [selectedMetric, setSelectedMetric] = useState<'success' | 'refusal' | 'noAnswer' | 'voicemail' | 'robot'>('success')
  const [chartDateFilter, setChartDateFilter] = useState<'day' | 'interval' | 'intraday'>('day')
  const [isAbTest, setIsAbTest] = useState(false) // Мок для A/B теста
  const [intervalStart, setIntervalStart] = useState(new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0])
  const [intervalEnd, setIntervalEnd] = useState(new Date().toISOString().split('T')[0])

  const handleCompanyAction = async (action: 'start' | 'pause' | 'stop') => {
    if (!company) return
    
    setIsLoading(true)
    setTimeout(() => {
      setCompany(prev => prev ? {
        ...prev,
        status: action === 'start' ? 'active' : action === 'pause' ? 'paused' : 'completed'
      } : null)
      setIsLoading(false)
    }, 1000)
  }

  const handleCopyCompanyId = () => {
    if (company) {
      navigator.clipboard.writeText(company.companyId)
      setIsCopied(true)
      setTimeout(() => setIsCopied(false), 2000)
    }
  }

  // Фильтрованные записи звонков
  const filteredCallRecords = callRecords.filter((call) => {
    // Фильтр по статусу результата
    if (resultFilter !== 'all' && call.result !== resultFilter) {
      return false
    }
    // Фильтр по поиску Lead ID
    if (searchFilter && !call.leadId.toLowerCase().includes(searchFilter.toLowerCase())) {
      return false
    }
    // Фильтр по периоду
    if (dateFilter !== 'all') {
      const callDate = new Date(call.dateTime)
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      switch (dateFilter) {
        case 'today':
          const todayEnd = new Date(today)
          todayEnd.setDate(todayEnd.getDate() + 1)
          if (callDate < today || callDate >= todayEnd) return false
          break
        case 'week':
          const weekAgo = new Date(today)
          weekAgo.setDate(weekAgo.getDate() - 7)
          if (callDate < weekAgo) return false
          break
        case 'month':
          const monthAgo = new Date(today)
          monthAgo.setMonth(monthAgo.getMonth() - 1)
          if (callDate < monthAgo) return false
          break
        case 'interval':
          if (!dateFilterIntervalStart || !dateFilterIntervalEnd) return true
          const start = new Date(dateFilterIntervalStart)
          const end = new Date(dateFilterIntervalEnd)
          end.setHours(23, 59, 59, 999)
          if (callDate < start || callDate > end) return false
          break
      }
    }
    return true
  })

  // Вычисляем статистику на основе отфильтрованных записей
  const filteredStats = {
    totalProcessed: filteredCallRecords.length,
    successfulConsent: filteredCallRecords.filter(c => c.result === 'success').length,
    refusals: filteredCallRecords.filter(c => c.result === 'refused').length,
    noAnswers: filteredCallRecords.filter(c => c.result === 'no_answer').length,
    voicemails: filteredCallRecords.filter(c => c.result === 'voicemail').length,
    robotVoicemails: filteredCallRecords.filter(c => c.result === 'robot_voicemail').length,
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активна</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершена</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const getResultBadge = (result: string, category: string) => {
    switch (result) {
      case 'success':
        return <Badge className="bg-green-100 text-green-800">{category}</Badge>
      case 'refused':
        return <Badge className="bg-red-100 text-red-800">{category}</Badge>
      case 'no_answer':
        return <Badge className="bg-gray-100 text-gray-800">{category}</Badge>
      case 'voicemail':
        return <Badge className="bg-purple-100 text-purple-800">{category}</Badge>
      case 'robot_voicemail':
        return <Badge className="bg-indigo-100 text-indigo-800">{category}</Badge>
      case 'busy':
        return <Badge className="bg-orange-100 text-orange-800">Занято</Badge>
      default:
        return <Badge>{category}</Badge>
    }
  }

  const formatDuration = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const handleExport = () => {
    // Фильтруем данные по периоду и статусам
    const filteredData = callRecords.filter(call => {
      if (selectedStatuses.length > 0 && !selectedStatuses.includes(call.result)) {
        return false
      }
      // Здесь бы была логика фильтрации по периоду
      return true
    })

    // Создаем CSV строку БЕЗ номеров телефонов
    const csvHeader = 'lead_id,call_id,datetime,result,category,duration_seconds,has_sms,has_link_click,has_registration,transferred_to_erp\n'
    const csvRows = filteredData.map(call => 
      `${call.leadId},${call.id},${call.dateTime.toISOString()},${call.result},${call.category},${call.duration},${call.hasSms},${call.hasLinkClick},${call.hasRegistration},${call.transferredToErp}`
    ).join('\n')
    
    const csvContent = csvHeader + csvRows
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    const url = URL.createObjectURL(blob)
    link.setAttribute('href', url)
    link.setAttribute('download', `campaign_${company?.id}_calls_${new Date().toISOString().split('T')[0]}.csv`)
    link.style.visibility = 'hidden'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    
    setShowExportModal(false)
    setSelectedStatuses([])
  }

  const statusOptions = [
    { value: 'success', label: 'Успешные' },
    { value: 'refused', label: 'Отказы' },
    { value: 'no_answer', label: 'Недозвоны' },
    { value: 'voicemail', label: 'Автоответчики' },
    { value: 'robot_voicemail', label: 'Роботы' },
    { value: 'busy', label: 'Занято' }
  ]

  if (!company) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Card>
          <CardContent className="p-12">
            <div className="text-center">
              <AlertTriangle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h2 className="text-lg font-medium text-gray-900 mb-2">Компания не найдена</h2>
              <p className="text-gray-600 mb-4">
                Компания с ID &quot;{companyId}&quot; не существует или была удалена.
              </p>
              <Button onClick={() => router.push('/companies')}>
                Вернуться к списку
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              {company.name}
            </h1>
            <p className="text-gray-600">
              Карточка компании и результаты обзвона
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          {getStatusBadge(company.status)}
          
          <Button 
            variant="outline"
            onClick={() => router.push(`/companies/${company.id}/ab-tests`)}
          >
            <GitBranch className="h-4 w-4 mr-2" />
            A/B тесты
          </Button>
          
          <div className="flex space-x-2">
            {company.status === 'draft' && (
              <Button 
                onClick={() => handleCompanyAction('start')}
                disabled={isLoading}
              >
                <Play className="h-4 w-4 mr-2" />
                Запустить
              </Button>
            )}
            {company.status === 'active' && (
              <>
                <Button 
                  variant="outline"
                  onClick={() => handleCompanyAction('pause')}
                  disabled={isLoading}
                >
                  <Pause className="h-4 w-4 mr-2" />
                  Пауза
                </Button>
                <Button 
                  variant="destructive"
                  onClick={() => handleCompanyAction('stop')}
                  disabled={isLoading}
                >
                  <Square className="h-4 w-4 mr-2" />
                  Завершить
                </Button>
              </>
            )}
            {company.status === 'paused' && (
              <>
                <Button 
                  onClick={() => handleCompanyAction('start')}
                  disabled={isLoading}
                >
                  <Play className="h-4 w-4 mr-2" />
                  Продолжить
                </Button>
                <Button 
                  variant="destructive"
                  onClick={() => handleCompanyAction('stop')}
                  disabled={isLoading}
                >
                  <Square className="h-4 w-4 mr-2" />
                  Завершить
                </Button>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Верхняя информационная панель - расширенный хедер */}
      <Card>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-6 gap-6">
            <div>
              <p className="text-sm text-gray-600 mb-1">Статус</p>
              <div className="flex items-center space-x-2">
                {getStatusBadge(company.status)}
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Тип базы</p>
              <Badge className={
                company.baseType === 'registration' ? 'bg-blue-100 text-blue-800' :
                company.baseType === 'no_answer' ? 'bg-yellow-100 text-yellow-800' :
                company.baseType === 'refusals' ? 'bg-red-100 text-red-800' :
                'bg-purple-100 text-purple-800'
              }>
                {company.baseType === 'registration' ? 'Регистрация' :
                 company.baseType === 'no_answer' ? 'Недозвон' :
                 company.baseType === 'refusals' ? 'Отказники' :
                 'Отклики/реактивация'}
              </Badge>
            </div>
            
            <div>
              <p className="text-sm text-gray-600 mb-1">Агент</p>
              <div className="flex items-center">
                <Bot className="h-4 w-4 text-gray-400 mr-2" />
                <span className="font-medium">{company.agent}</span>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Историческая результативность</p>
              <div className="flex items-center">
                <span className="text-xl font-bold text-green-600">{company.historicalConversion}%</span>
                <span className="text-xs text-gray-500 ml-2">успешных звонков за все время</span>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Company ID</p>
              <div className="flex items-center space-x-2">
                <code className="font-mono text-sm bg-gray-100 px-2 py-1 rounded">
                  {company.companyId}
                </code>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleCopyCompanyId}
                >
                  {isCopied ? (
                    <Check className="h-3 w-3 text-green-600" />
                  ) : (
                    <Copy className="h-3 w-3" />
                  )}
                </Button>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-600 mb-1">Прогресс</p>
              <div className="flex items-center space-x-2">
                <Progress value={company.progress} className="flex-1" />
                <span className="text-sm font-medium">{company.progress}%</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Основные метрики - 4 плитки */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Всего принято</p>
                <p className="text-2xl font-bold text-gray-900">
                  {company.totalReceived.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  контактов от ERP
                </p>
              </div>
              <Users className="h-8 w-8 text-gray-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Обработано</p>
                <p className="text-2xl font-bold text-blue-600">
                  {company.totalProcessed.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.totalProcessed / company.totalReceived) * 100)}% от принятых
                </p>
              </div>
              <CheckCircle className="h-8 w-8 text-blue-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">В работе</p>
                <p className="text-2xl font-bold text-orange-600">
                  {company.totalInProgress.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.totalInProgress / company.totalReceived) * 100)}% от принятых
                </p>
              </div>
              <Clock className="h-8 w-8 text-orange-600 opacity-20" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">
                  {company.baseType === 'registration' ? 'Регистрации' :
                   company.baseType === 'no_answer' ? 'Дозвоны' :
                   company.baseType === 'refusals' ? 'Переубеждения' :
                   'Реактивации'}
                </p>
                <p className="text-2xl font-bold text-green-600">
                  {company.successfulConsent.toLocaleString()}
                </p>
                <p className="text-xs text-gray-500">
                  {Math.round((company.successfulConsent / company.totalProcessed) * 100)}% конверсия
                </p>
              </div>
              <UserCheck className="h-8 w-8 text-green-600 opacity-20" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* График динамики метрик */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Динамика метрик</CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                Процент от обзвоненных контактов
              </p>
            </div>
            
            <div className="flex items-center space-x-4">
              {/* Чекбокс A/B теста */}
              <div className="flex items-center space-x-2">
                <Checkbox 
                  id="ab-test"
                  checked={isAbTest}
                  onCheckedChange={(checked) => setIsAbTest(checked as boolean)}
                />
                <Label htmlFor="ab-test" className="text-sm cursor-pointer">
                  A/B тест
                </Label>
              </div>
              
              {/* Переключатель метрик */}
              <div className="flex items-center space-x-2">
                <Label className="text-sm">Метрика:</Label>
                <div className="flex space-x-1 bg-gray-100 rounded-lg p-1">
                  <Button
                    size="sm"
                    variant={selectedMetric === 'success' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('success')}
                    className={selectedMetric === 'success' ? 'bg-green-600 hover:bg-green-700' : ''}
                  >
                    Успех
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'refusal' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('refusal')}
                    className={selectedMetric === 'refusal' ? 'bg-red-600 hover:bg-red-700' : ''}
                  >
                    Отказ
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'noAnswer' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('noAnswer')}
                    className={selectedMetric === 'noAnswer' ? 'bg-gray-600 hover:bg-gray-700' : ''}
                  >
                    Недозвон
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'voicemail' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('voicemail')}
                    className={selectedMetric === 'voicemail' ? 'bg-purple-600 hover:bg-purple-700' : ''}
                  >
                    Автоответчик
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'robot' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('robot')}
                    className={selectedMetric === 'robot' ? 'bg-indigo-600 hover:bg-indigo-700' : ''}
                  >
                    Робот
                  </Button>
                </div>
              </div>
              
              {/* Фильтр даты */}
              <div className="flex items-center space-x-2">
                <Label className="text-sm">Период:</Label>
                <Select value={chartDateFilter} onValueChange={(value: any) => setChartDateFilter(value)}>
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="day">День</SelectItem>
                    <SelectItem value="interval">Интервал</SelectItem>
                    <SelectItem value="intraday">Внутри дня</SelectItem>
                  </SelectContent>
                </Select>
                
                {/* Выбор дат для интервала */}
                {chartDateFilter === 'interval' && (
                  <>
                    <Input
                      type="date"
                      value={intervalStart}
                      onChange={(e) => setIntervalStart(e.target.value)}
                      className="w-32"
                    />
                    <span className="text-sm text-gray-500">—</span>
                    <Input
                      type="date"
                      value={intervalEnd}
                      onChange={(e) => setIntervalEnd(e.target.value)}
                      className="w-32"
                    />
                  </>
                )}
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* График динамики */}
          <div className="space-y-4">
            {/* Легенда для A/B теста */}
            {isAbTest && chartDateFilter === 'interval' && (
              <div className="flex items-center justify-end space-x-4 text-sm">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-blue-500 rounded mr-2"></div>
                  <span>Общий</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded mr-2"></div>
                  <span>Агент A</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-orange-500 rounded mr-2"></div>
                  <span>Агент B</span>
                </div>
              </div>
            )}
            
            {/* Область графика */}
            <div className="bg-gray-50 rounded-lg p-6">
              {/* График - линейный для интервала, столбчатый для остальных */}
              <div className="relative h-64">
                {chartDateFilter === 'interval' ? (
                  /* Линейный график для интервала */
                  <div className="absolute inset-0 flex flex-col">
                    {/* Сетка Y-оси */}
                    <div className="absolute inset-0 flex flex-col justify-between">
                      {[100, 75, 50, 25, 0].map((value) => (
                        <div key={value} className="flex items-center">
                          <span className="text-xs text-gray-400 -ml-10 w-8 text-right">{value}%</span>
                          <div className="flex-1 border-b border-gray-200 ml-2"></div>
                        </div>
                      ))}
                    </div>
                    
                    {/* SVG с графиком */}
                    <svg className="absolute inset-0 w-full h-full" style={{ marginLeft: '0px' }}>
                      {isAbTest ? (
                        /* A/B тест - 3 линии */
                        <>
                          {/* Линия общая (синяя) */}
                          <polyline
                            points="10,35 90,30 170,33 250,28 330,31 410,26 490,29 570,24 650,27 730,22 810,25 890,20"
                            fill="none"
                            stroke="#3b82f6"
                            strokeWidth="3"
                          />
                          
                          {/* Линия Агент A (зеленая) */}
                          <polyline
                            points="10,40 90,33 170,37 250,31 330,34 410,29 490,32 570,27 650,30 730,26 810,28 890,25"
                            fill="none"
                            stroke="#10b981"
                            strokeWidth="3"
                          />
                          
                          {/* Линия Агент B (оранжевая) */}
                          <polyline
                            points="10,32 90,25 170,29 250,23 330,26 410,21 490,24 570,19 650,22 730,18 810,20 890,17"
                            fill="none"
                            stroke="#f97316"
                            strokeWidth="3"
                          />
                        </>
                      ) : (
                        /* Обычный режим - одна линия */
                        <polyline
                          points="10,35 90,30 170,33 250,28 330,31 410,26 490,29 570,24 650,27 730,22 810,25 890,20"
                          fill="none"
                          stroke={
                            selectedMetric === 'success' ? '#10b981' :
                            selectedMetric === 'refusal' ? '#ef4444' :
                            selectedMetric === 'noAnswer' ? '#6b7280' :
                            selectedMetric === 'voicemail' ? '#a855f7' :
                            '#6366f1'
                          }
                          strokeWidth="3"
                        />
                      )}
                    </svg>
                  </div>
                ) : (
                  /* Столбчатая диаграмма для остальных режимов */
                  <div className="absolute inset-0 flex items-end justify-between gap-2">
                    {[65, 72, 68, 74, 71, 76, 73, 78, 75, 79, 77, 80].map((value, index) => {
                      const metricColors = {
                        success: 'bg-green-500',
                        refusal: 'bg-red-500',
                        noAnswer: 'bg-gray-500',
                        voicemail: 'bg-purple-500',
                        robot: 'bg-indigo-500'
                      }
                      const mainColor = metricColors[selectedMetric]
                      
                      return (
                        <div key={index} className="flex-1 flex flex-col justify-end items-center relative">
                          {/* Значение над столбцом */}
                          <span className="text-xs text-gray-600 absolute -top-5">
                            {value}%
                          </span>
                          
                          {/* Группа столбцов */}
                          <div className="w-full flex items-end gap-0.5">
                            {isAbTest ? (
                              <>
                                {/* A/B тест - 3 столбца */}
                                <div 
                                  className="flex-1 bg-blue-500 opacity-80 rounded-t"
                                  style={{ height: `${(value / 100) * 160}px` }}
                                  title={`Общий: ${value}%`}
                                />
                                <div 
                                  className="flex-1 bg-green-500 opacity-80 rounded-t"
                                  style={{ height: `${((value - 5) / 100) * 160}px` }}
                                  title={`Агент A: ${value - 5}%`}
                                />
                                <div 
                                  className="flex-1 bg-orange-500 opacity-80 rounded-t"
                                  style={{ height: `${((value + 3) / 100) * 160}px` }}
                                  title={`Агент B: ${value + 3}%`}
                                />
                              </>
                            ) : (
                              /* Обычный режим - один столбец */
                              <div 
                                className={`w-full ${mainColor} rounded-t transition-all duration-300`}
                                style={{ height: `${(value / 100) * 160}px` }}
                              />
                            )}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                )}
                
                {/* Горизонтальные линии сетки */}
                <div className="absolute inset-0 flex flex-col justify-between pointer-events-none">
                  {[100, 75, 50, 25, 0].map((value) => (
                    <div key={value} className="flex items-center">
                      <span className="text-xs text-gray-400 -ml-10 w-8 text-right">{value}%</span>
                      <div className="flex-1 border-b border-gray-200 ml-2"></div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Ось X */}
              <div className="flex justify-between mt-4 px-2 text-xs text-gray-500">
                {chartDateFilter === 'intraday' ? (
                  ['00:00', '02:00', '04:00', '06:00', '08:00', '10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00'].map(time => (
                    <span key={time}>{time}</span>
                  ))
                ) : chartDateFilter === 'interval' ? (
                  ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт'].map((day, i) => (
                    <span key={i}>{day}</span>
                  ))
                ) : (
                  Array.from({ length: 12 }, (_, i) => (
                    <span key={i}>{i + 1}</span>
                  ))
                )}
              </div>
            </div>
          </div>
          
          {/* Показатель A/B теста */}
          {isAbTest && (
            <div className="mt-4 p-3 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-900 font-medium">A/B тест активен</p>
              <p className="text-xs text-blue-700 mt-1">
                Агент A: конверсия {company.successfulConsent ? Math.round((company.successfulConsent / company.totalProcessed) * 100 * 0.95) : 0}% | 
                Агент B: конверсия {company.successfulConsent ? Math.round((company.successfulConsent / company.totalProcessed) * 100 * 1.05) : 0}%
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Мониторинг/декомпозиция обработанных контактов по исходам */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Мониторинг обработанных контактов по исходам</CardTitle>
              <p className="text-sm text-gray-600 mt-1">
                Всего обработано: {filteredStats.totalProcessed.toLocaleString()} контактов
              </p>
            </div>
            {isAbTest && (
              <div className="flex items-center space-x-4 text-sm">
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded mr-2"></div>
                  <span>Агент A</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-orange-500 rounded mr-2"></div>
                  <span>Агент B</span>
                </div>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
            <div className="p-4 bg-green-50 rounded-lg border border-green-200">
              <div className="flex items-center justify-between mb-2">
                <MessageSquare className="h-5 w-5 text-green-600" />
                <Badge className="bg-green-100 text-green-800">SMS</Badge>
              </div>
              <p className="text-2xl font-bold text-green-600">
                {filteredStats.successfulConsent.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Успешные/согласие</p>
              <p className="text-xs text-gray-500 mt-1">
                {filteredStats.totalProcessed > 0 ? Math.round((filteredStats.successfulConsent / filteredStats.totalProcessed) * 100) : 0}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-green-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(filteredStats.successfulConsent * 0.48).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(filteredStats.successfulConsent * 0.52).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-red-50 rounded-lg border border-red-200">
              <div className="flex items-center justify-between mb-2">
                <XCircle className="h-5 w-5 text-red-600" />
              </div>
              <p className="text-2xl font-bold text-red-600">
                {filteredStats.refusals.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Отказы</p>
              <p className="text-xs text-gray-500 mt-1">
                {filteredStats.totalProcessed > 0 ? Math.round((filteredStats.refusals / filteredStats.totalProcessed) * 100) : 0}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-red-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(filteredStats.refusals * 0.55).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(filteredStats.refusals * 0.45).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
              <div className="flex items-center justify-between mb-2">
                <PhoneOff className="h-5 w-5 text-gray-600" />
              </div>
              <p className="text-2xl font-bold text-gray-600">
                {filteredStats.noAnswers.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Недозвоны</p>
              <p className="text-xs text-gray-500 mt-1">
                {filteredStats.totalProcessed > 0 ? Math.round((filteredStats.noAnswers / filteredStats.totalProcessed) * 100) : 0}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-gray-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(filteredStats.noAnswers * 0.51).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(filteredStats.noAnswers * 0.49).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
              <div className="flex items-center justify-between mb-2">
                <Volume2 className="h-5 w-5 text-purple-600" />
              </div>
              <p className="text-2xl font-bold text-purple-600">
                {filteredStats.voicemails.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Автоответчики</p>
              <p className="text-xs text-gray-500 mt-1">
                {filteredStats.totalProcessed > 0 ? Math.round((filteredStats.voicemails / filteredStats.totalProcessed) * 100) : 0}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-purple-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(filteredStats.voicemails * 0.47).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(filteredStats.voicemails * 0.53).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>

            <div className="p-4 bg-indigo-50 rounded-lg border border-indigo-200">
              <div className="flex items-center justify-between mb-2">
                <Bot className="h-5 w-5 text-indigo-600" />
              </div>
              <p className="text-2xl font-bold text-indigo-600">
                {filteredStats.robotVoicemails.toLocaleString()}
              </p>
              <p className="text-sm text-gray-600">Роботы</p>
              <p className="text-xs text-gray-500 mt-1">
                {filteredStats.totalProcessed > 0 ? Math.round((filteredStats.robotVoicemails / filteredStats.totalProcessed) * 100) : 0}% от обработанных
              </p>
              {isAbTest && (
                <div className="mt-3 pt-3 border-t border-indigo-200">
                  <div className="flex justify-between text-xs">
                    <span className="text-green-700">A: {Math.round(filteredStats.robotVoicemails * 0.50).toLocaleString()}</span>
                    <span className="text-orange-700">B: {Math.round(filteredStats.robotVoicemails * 0.50).toLocaleString()}</span>
                  </div>
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Единая таблица звонков */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Таблица звонков</CardTitle>
            <div className="flex items-center space-x-2">
              <DateFilter
                value={dateFilter}
                onValueChange={setDateFilter}
                intervalStart={dateFilterIntervalStart}
                intervalEnd={dateFilterIntervalEnd}
                onIntervalChange={(start, end) => {
                  setDateFilterIntervalStart(start)
                  setDateFilterIntervalEnd(end)
                }}
                label="Период:"
                className="w-40"
              />
              
              <div className="flex items-center space-x-2">
                <Label htmlFor="result-filter" className="text-sm">Статус:</Label>
                <Select value={resultFilter} onValueChange={setResultFilter}>
                  <SelectTrigger id="result-filter" className="w-40">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Все результаты</SelectItem>
                    <SelectItem value="success">Согласие</SelectItem>
                    <SelectItem value="refused">Отказ</SelectItem>
                    <SelectItem value="no_answer">Недозвон</SelectItem>
                    <SelectItem value="voicemail">Автоответчик</SelectItem>
                    <SelectItem value="robot_voicemail">Робот-автоответчик</SelectItem>
                    <SelectItem value="busy">Занято</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              <Input
                placeholder="Поиск по Lead ID..."
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                className="w-48"
              />
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => setShowExportModal(true)}
              >
                <Download className="h-4 w-4 mr-2" />
                Экспорт
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    ID контакта
                  </th>
                  {isAbTest && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      A/B
                    </th>
                  )}
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Дата/время
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Результат
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Длительность
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    Флаги
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredCallRecords.map((call) => (
                  <tr key={call.id} className="hover:bg-gray-50">
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="flex items-center">
                        <span className="font-mono text-sm font-medium text-blue-600">{call.leadId}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          className="ml-2 h-6 w-6 p-0"
                          onClick={() => navigator.clipboard.writeText(call.leadId)}
                        >
                          <Copy className="h-3 w-3" />
                        </Button>
                      </div>
                    </td>
                    {isAbTest && (
                      <td className="px-4 py-3 whitespace-nowrap text-center">
                        <Badge 
                          className={call.abVariant === 'A' 
                            ? "bg-green-100 text-green-800" 
                            : "bg-orange-100 text-orange-800"
                          }
                        >
                          {call.abVariant || 'A'}
                        </Badge>
                      </td>
                    )}
                    <td className="px-4 py-3 whitespace-nowrap text-sm">
                      <div>
                        <div className="flex items-center text-gray-900">
                          <Calendar className="h-3 w-3 mr-1 text-gray-400" />
                          {call.dateTime.toLocaleDateString('ru-RU')}
                        </div>
                        <div className="flex items-center text-gray-500 text-xs">
                          <Clock className="h-3 w-3 mr-1 text-gray-400" />
                          {call.dateTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      {getResultBadge(call.result, call.category)}
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap text-sm">
                      {call.duration > 0 ? formatDuration(call.duration) : '—'}
                    </td>
                    <td className="px-4 py-3">
                      <div className="flex items-center justify-center space-x-1">
                        {call.hasSms && (
                          <div className="group relative">
                            <MessageSquare className="h-4 w-4 text-blue-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              SMS отправлено
                            </span>
                          </div>
                        )}
                        {call.hasLinkClick && (
                          <div className="group relative">
                            <Link2 className="h-4 w-4 text-green-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              Переход по ссылке
                            </span>
                          </div>
                        )}
                        {call.hasRegistration && (
                          <div className="group relative">
                            <UserCheck className="h-4 w-4 text-purple-600" />
                            <span className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-1 px-2 py-1 text-xs text-white bg-gray-800 rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap">
                              Регистрация
                            </span>
                          </div>
                        )}
                        {call.transferredToErp && (
                          <Badge className="bg-indigo-100 text-indigo-800 text-xs">
                            ERP
                          </Badge>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-3 whitespace-nowrap">
                      <div className="flex items-center space-x-1">
                        {call.hasRecording && (
                          <Button size="sm" variant="ghost" title="Прослушать">
                            <Volume2 className="h-4 w-4" />
                          </Button>
                        )}
                        {call.hasTranscript && (
                          <Button size="sm" variant="ghost" title="Транскрипт">
                            <FileText className="h-4 w-4" />
                          </Button>
                        )}
                        <Button size="sm" variant="ghost" title="Экспорт">
                          <Download className="h-3 w-3" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {/* Модальное окно экспорта */}
      <Dialog open={showExportModal} onOpenChange={setShowExportModal}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <FileDown className="h-5 w-5 mr-2" />
              Экспорт таблицы звонков
            </DialogTitle>
            <DialogDescription>
              Настройте параметры экспорта данных в CSV
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="export-period">Период</Label>
              <Select value={exportPeriod} onValueChange={setExportPeriod}>
                <SelectTrigger id="export-period" className="mt-2">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="today">Сегодня</SelectItem>
                  <SelectItem value="yesterday">Вчера</SelectItem>
                  <SelectItem value="week">Последняя неделя</SelectItem>
                  <SelectItem value="month">Последний месяц</SelectItem>
                  <SelectItem value="all">Все время</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label>Фильтр по статусам</Label>
              <p className="text-xs text-gray-500 mb-3">Выберите статусы для экспорта (если ничего не выбрано - экспортируются все)</p>
              <div className="space-y-2 mt-2">
                {statusOptions.map((status) => (
                  <div key={status.value} className="flex items-center space-x-2">
                    <Checkbox
                      id={status.value}
                      checked={selectedStatuses.includes(status.value)}
                      onCheckedChange={(checked) => {
                        if (checked) {
                          setSelectedStatuses([...selectedStatuses, status.value])
                        } else {
                          setSelectedStatuses(selectedStatuses.filter(s => s !== status.value))
                        }
                      }}
                    />
                    <Label 
                      htmlFor={status.value} 
                      className="text-sm font-normal cursor-pointer"
                    >
                      {status.label}
                    </Label>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
              <p className="text-sm text-blue-900 font-medium mb-1">Важно:</p>
              <ul className="text-xs text-blue-700 space-y-1">
                <li>• Экспортируются только ID контактов и метаданные</li>
                <li>• Номера телефонов НЕ включены в экспорт</li>
                <li>• Файл будет сохранен в формате CSV</li>
              </ul>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowExportModal(false)}>
              Отмена
            </Button>
            <Button onClick={handleExport}>
              <Download className="h-4 w-4 mr-2" />
              Скачать CSV
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
</file>

<file path="src/app/obzvoni/monitor/page.tsx">
'use client'

import React, { useState, useMemo } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft,
  Filter,
  Download,
  Eye,
  Calendar,
  TrendingUp,
  TrendingDown,
  Bot,
  Settings2,
  ChevronDown,
  Check,
  X,
  GitBranch
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Checkbox } from '@/components/ui/checkbox'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem
} from '@/components/ui/dropdown-menu'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import { DateFilter } from '@/components/ui/date-filter'

interface CompanyMonitor {
  id: string
  companyId: string
  name: string
  status: 'active' | 'paused' | 'completed' | 'draft'
  // Основные метрики
  totalTransferred: number  // Передано (от нас клиенту)
  totalReceived: number  // Получено (принято клиентом)
  totalProcessed: number  // Обработано
  totalInProgress: number  // В работе
  completionPercent: number  // % выполнения
  // Категории результатов
  successCount: number  // Успешные
  refusalCount: number  // Отказы
  noAnswerCount: number  // Недозвоны
  voicemailCount: number  // Автоответчики (отдельная категория)
  // A/B тестирование
  hasABTest: boolean  // Есть ли активный A/B тест
  abTestVariants?: {
    A: { agent: string; calls: number; conversions: number }
    B: { agent: string; calls: number; conversions: number }
  }
  // Дополнительные данные
  lastActivity: Date
  agent: string
}

// Моковые данные
const mockCompanies: CompanyMonitor[] = [
  {
    id: 'obz-1',
    companyId: 'CMP-1A2B3C4D',
    name: 'Новогодняя акция 2025',
    status: 'active',
    totalTransferred: 2500,
    totalReceived: 2487,
    totalProcessed: 1847,
    totalInProgress: 640,
    completionPercent: 74.26,
    successCount: 1234,
    refusalCount: 312,
    noAnswerCount: 189,
    voicemailCount: 112,
    hasABTest: true,
    abTestVariants: {
      A: { agent: 'Анна', calls: 924, conversions: 617 },
      B: { agent: 'Елена', calls: 923, conversions: 617 }
    },
    lastActivity: new Date(Date.now() - 5 * 60 * 1000),
    agent: 'Анна'
  },
  {
    id: 'obz-2',
    companyId: 'CMP-5E6F7G8H',
    name: 'Реактивация клиентов',
    status: 'paused',
    totalTransferred: 1800,
    totalReceived: 1795,
    totalProcessed: 456,
    totalInProgress: 1339,
    completionPercent: 25.40,
    successCount: 234,
    refusalCount: 89,
    noAnswerCount: 78,
    voicemailCount: 55,
    hasABTest: false,
    lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000),
    agent: 'Михаил'
  },
  {
    id: 'obz-3',
    companyId: 'CMP-9I0J1K2L',
    name: 'Холодная база январь',
    status: 'completed',
    totalTransferred: 850,
    totalReceived: 850,
    totalProcessed: 850,
    totalInProgress: 0,
    completionPercent: 100,
    successCount: 445,
    refusalCount: 178,
    noAnswerCount: 156,
    voicemailCount: 71,
    hasABTest: true,
    abTestVariants: {
      A: { agent: 'Елена', calls: 425, conversions: 213 },
      B: { agent: 'Ольга', calls: 425, conversions: 232 }
    },
    lastActivity: new Date(Date.now() - 24 * 60 * 60 * 1000),
    agent: 'Елена'
  },
  {
    id: 'obz-4',
    companyId: 'CMP-3M4N5O6P',
    name: 'VIP клиенты',
    status: 'active',
    totalTransferred: 450,
    totalReceived: 448,
    totalProcessed: 380,
    totalInProgress: 68,
    completionPercent: 84.82,
    successCount: 312,
    refusalCount: 23,
    noAnswerCount: 28,
    voicemailCount: 17,
    hasABTest: false,
    lastActivity: new Date(Date.now() - 15 * 60 * 1000),
    agent: 'Дмитрий'
  },
  {
    id: 'obz-5',
    companyId: 'CMP-7Q8R9S0T',
    name: 'Повторные продажи',
    status: 'draft',
    totalTransferred: 1200,
    totalReceived: 0,
    totalProcessed: 0,
    totalInProgress: 0,
    completionPercent: 0,
    successCount: 0,
    refusalCount: 0,
    noAnswerCount: 0,
    voicemailCount: 0,
    hasABTest: false,
    lastActivity: new Date(Date.now() - 48 * 60 * 60 * 1000),
    agent: 'Анна'
  }
]

// Определяем все возможные колонки
const allColumns = [
  { id: 'select', label: '', fixed: true },
  { id: 'company', label: 'Кампания', fixed: true },
  { id: 'status', label: 'Статус', default: true },
  { id: 'abTest', label: 'A/B тест', default: true },
  { id: 'transferred', label: 'Передано', default: true },
  { id: 'received', label: 'Получено', default: true },
  { id: 'processed', label: 'Обработано', default: true },
  { id: 'inProgress', label: 'В работе', default: true },
  { id: 'completion', label: '% выполнения', default: true },
  { id: 'success', label: 'Успешные', default: false },
  { id: 'refusals', label: 'Отказы', default: false },
  { id: 'noAnswer', label: 'Недозвоны', default: false },
  { id: 'conversion', label: 'Конверсия', default: true },
  { id: 'voicemail', label: 'Автоответчики', default: true },
  { id: 'lastActivity', label: 'Последняя активность', default: true },
  { id: 'agent', label: 'Агент', default: false },
  { id: 'actions', label: 'Действия', fixed: true }
]

export default function ObzvoniMonitorPage() {
  const router = useRouter()
  const [companies] = useState<CompanyMonitor[]>(mockCompanies)
  const [selectedCompanies, setSelectedCompanies] = useState<string[]>([])
  const [searchQuery, setSearchQuery] = useState('')
  
  // Состояние для настройки колонок
  const [visibleColumns, setVisibleColumns] = useState<string[]>(
    allColumns.filter(col => col.fixed || col.default).map(col => col.id)
  )
  
  // Состояния для графика
  const [selectedMetric, setSelectedMetric] = useState<'transferred' | 'received' | 'processed' | 'success' | 'voicemail'>('transferred')
  const [chartDateFilter, setChartDateFilter] = useState('today')
  const [chartDateIntervalStart, setChartDateIntervalStart] = useState('')
  const [chartDateIntervalEnd, setChartDateIntervalEnd] = useState('')

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активна</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершена</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  const formatLastActivity = (date: Date) => {
    const now = new Date()
    const diff = now.getTime() - date.getTime()
    const minutes = Math.floor(diff / 60000)
    const hours = Math.floor(diff / 3600000)
    const days = Math.floor(diff / 86400000)

    if (minutes < 60) return `${minutes} мин назад`
    if (hours < 24) return `${hours} ч назад`
    return `${days} дн назад`
  }

  const getConversionRate = (company: CompanyMonitor) => {
    if (company.totalProcessed === 0) return 0
    return Math.round((company.successCount / company.totalProcessed) * 100)
  }

  // Фильтрация компаний только по поиску (не по выбранным чекбоксам)
  const filteredCompanies = useMemo(() => {
    let filtered = companies

    // Фильтр по поиску
    if (searchQuery) {
      filtered = filtered.filter(c => 
        c.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        c.companyId.toLowerCase().includes(searchQuery.toLowerCase())
      )
    }

    return filtered
  }, [companies, searchQuery])

  // Фильтрация только выбранных компаний для графика и метрик
  const selectedFilteredCompanies = useMemo(() => {
    if (selectedCompanies.length === 0) {
      return filteredCompanies // Если ничего не выбрано, показываем все
    }
    return filteredCompanies.filter(c => selectedCompanies.includes(c.id))
  }, [filteredCompanies, selectedCompanies])

  // Подсчет агрегированных метрик с учетом выбранных кампаний
  const totalMetrics = useMemo(() => ({
    transferred: selectedFilteredCompanies.reduce((sum, c) => sum + c.totalTransferred, 0),
    received: selectedFilteredCompanies.reduce((sum, c) => sum + c.totalReceived, 0),
    processed: selectedFilteredCompanies.reduce((sum, c) => sum + c.totalProcessed, 0),
    inProgress: selectedFilteredCompanies.reduce((sum, c) => sum + c.totalInProgress, 0),
    success: selectedFilteredCompanies.reduce((sum, c) => sum + c.successCount, 0),
    voicemail: selectedFilteredCompanies.reduce((sum, c) => sum + c.voicemailCount, 0)
  }), [selectedFilteredCompanies])

  // Обработчик выбора всех
  const handleSelectAll = () => {
    if (selectedCompanies.length === filteredCompanies.length) {
      setSelectedCompanies([])
    } else {
      setSelectedCompanies(filteredCompanies.map(c => c.id))
    }
  }

  // Обработчик выбора одной кампании
  const handleSelectCompany = (companyId: string) => {
    setSelectedCompanies(prev => 
      prev.includes(companyId)
        ? prev.filter(id => id !== companyId)
        : [...prev, companyId]
    )
  }

  // Обработчик изменения видимости колонки
  const toggleColumnVisibility = (columnId: string) => {
    const column = allColumns.find(col => col.id === columnId)
    if (column?.fixed) return // Не позволяем скрывать фиксированные колонки
    
    setVisibleColumns(prev =>
      prev.includes(columnId)
        ? prev.filter(id => id !== columnId)
        : [...prev, columnId]
    )
  }

  // Экспорт с учетом фильтров
  const handleExport = () => {
    const dataToExport = filteredCompanies.map(company => ({
      'Кампания': company.name,
      'ID': company.companyId,
      'Статус': company.status,
      'Передано': company.totalTransferred,
      'Получено': company.totalReceived,
      'Обработано': company.totalProcessed,
      'В работе': company.totalInProgress,
      '% выполнения': company.completionPercent,
      'Успешные': company.successCount,
      'Отказы': company.refusalCount,
      'Недозвоны': company.noAnswerCount,
      'Автоответчики': company.voicemailCount,
      'Конверсия %': getConversionRate(company),
      'Агент': company.agent
    }))
    
    // Здесь логика экспорта в CSV/Excel
    console.log('Экспорт данных:', dataToExport)
    alert(`Экспортировано ${dataToExport.length} кампаний`)
  }

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Мониторинг кампаний
            </h1>
            <p className="text-gray-600">
              Обзор состояния и метрик всех кампаний (только просмотр)
            </p>
          </div>
        </div>
        
        <Button variant="outline" onClick={handleExport}>
          <Download className="h-4 w-4 mr-2" />
          Экспорт ({selectedCompanies.length || filteredCompanies.length})
        </Button>
      </div>

      {/* Фильтры */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <Label className="text-sm">Фильтры:</Label>
            </div>
            
            {/* Мультивыбор кампаний */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-48">
                  <span className="truncate">
                    {selectedCompanies.length === 0 
                      ? 'Все кампании'
                      : `Выбрано: ${selectedCompanies.length}`
                    }
                  </span>
                  <ChevronDown className="h-4 w-4 ml-2" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent className="w-64">
                <DropdownMenuLabel className="flex items-center justify-between">
                  <span>Выбор кампаний</span>
                  <Button 
                    size="sm" 
                    variant="ghost"
                    onClick={(e) => {
                      e.preventDefault()
                      setSelectedCompanies([])
                    }}
                    className="h-auto p-1 text-xs"
                  >
                    Сбросить
                  </Button>
                </DropdownMenuLabel>
                <DropdownMenuSeparator />
                {companies.map(company => (
                  <DropdownMenuCheckboxItem
                    key={company.id}
                    checked={selectedCompanies.includes(company.id)}
                    onCheckedChange={() => handleSelectCompany(company.id)}
                    onSelect={(e) => e.preventDefault()}
                  >
                    {company.name}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <Input
              placeholder="Поиск по названию или ID..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-64"
            />

            <div className="flex-1" />

            <div className="text-sm text-gray-600">
              Найдено: <span className="font-medium">{filteredCompanies.length}</span> кампаний
              {selectedCompanies.length > 0 && (
                <span className="ml-2">
                  (выбрано: {selectedCompanies.length})
                </span>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Сводная статистика (реагирует на фильтры) */}
      <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">Передано</p>
            <p className="text-2xl font-bold">{totalMetrics.transferred.toLocaleString()}</p>
            <p className="text-xs text-gray-500 mt-1">от нас клиенту</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">Получено</p>
            <p className="text-2xl font-bold text-green-600">{totalMetrics.received.toLocaleString()}</p>
            <p className="text-xs text-gray-500 mt-1">принято клиентом</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">Обработано</p>
            <p className="text-2xl font-bold text-blue-600">{totalMetrics.processed.toLocaleString()}</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">В работе</p>
            <p className="text-2xl font-bold text-orange-600">{totalMetrics.inProgress.toLocaleString()}</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">Успешные</p>
            <p className="text-2xl font-bold text-green-600">{totalMetrics.success.toLocaleString()}</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <p className="text-sm text-gray-600">Автоответчики</p>
            <p className="text-2xl font-bold text-purple-600">{totalMetrics.voicemail.toLocaleString()}</p>
          </CardContent>
        </Card>
      </div>

      {/* График динамики метрик */}
      {selectedFilteredCompanies.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Динамика метрик</CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  График показателей выбранных кампаний
                </p>
              </div>
              <div className="flex items-center space-x-4">
                {/* Фильтр показателей */}
                <div className="flex items-center space-x-2">
                  <Button
                    size="sm"
                    variant={selectedMetric === 'transferred' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('transferred')}
                    className={selectedMetric === 'transferred' ? 'bg-blue-600 hover:bg-blue-700' : ''}
                  >
                    Передано
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'received' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('received')}
                    className={selectedMetric === 'received' ? 'bg-green-600 hover:bg-green-700' : ''}
                  >
                    Получено
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'processed' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('processed')}
                    className={selectedMetric === 'processed' ? 'bg-indigo-600 hover:bg-indigo-700' : ''}
                  >
                    Обработано
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'success' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('success')}
                    className={selectedMetric === 'success' ? 'bg-emerald-600 hover:bg-emerald-700' : ''}
                  >
                    Успешные
                  </Button>
                  <Button
                    size="sm"
                    variant={selectedMetric === 'voicemail' ? 'default' : 'ghost'}
                    onClick={() => setSelectedMetric('voicemail')}
                    className={selectedMetric === 'voicemail' ? 'bg-purple-600 hover:bg-purple-700' : ''}
                  >
                    Автоответчики
                  </Button>
                </div>
                
                {/* Фильтр времени */}
                <DateFilter
                  value={chartDateFilter}
                  onValueChange={setChartDateFilter}
                  intervalStart={chartDateIntervalStart}
                  intervalEnd={chartDateIntervalEnd}
                  onIntervalChange={(start, end) => {
                    setChartDateIntervalStart(start)
                    setChartDateIntervalEnd(end)
                  }}
                  label="Период:"
                  className="w-40"
                />
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* Область графика */}
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="relative h-64">
                  {chartDateFilter === 'interval' ? (
                    /* Линейный график для периода */
                    <div className="absolute inset-0 flex flex-col">
                      {/* Сетка Y-оси */}
                      <div className="absolute inset-0 flex flex-col justify-between">
                        {[100, 75, 50, 25, 0].map((value) => (
                          <div key={value} className="flex items-center">
                            <span className="text-xs text-gray-400 -ml-10 w-8 text-right">{value}%</span>
                            <div className="flex-1 border-b border-gray-200 ml-2"></div>
                          </div>
                        ))}
                      </div>
                      
                      {/* SVG с линейным графиком */}
                      <svg className="absolute inset-0 w-full h-full" style={{ marginLeft: '0px' }}>
                        {selectedFilteredCompanies.slice(0, 5).map((company, companyIndex) => {
                          const colors = ['#3b82f6', '#10b981', '#f97316', '#8b5cf6', '#ef4444']
                          const color = colors[companyIndex % colors.length]
                          
                          // Генерируем точки для линии на основе выбранной метрики
                          const getMetricValue = (company: CompanyMonitor, metric: string) => {
                            switch (metric) {
                              case 'transferred': return company.totalTransferred
                              case 'received': return company.totalReceived
                              case 'processed': return company.totalProcessed
                              case 'success': return company.successCount
                              case 'voicemail': return company.voicemailCount
                              default: return 0
                            }
                          }
                          
                          const maxValue = Math.max(...selectedFilteredCompanies.slice(0, 5).map(c => getMetricValue(c, selectedMetric)))
                          const normalizedValue = maxValue > 0 ? (getMetricValue(company, selectedMetric) / maxValue) * 160 : 0
                          const yOffset = 200 - normalizedValue
                          
                          // Создаем точки для недели
                          const points = Array.from({ length: 7 }, (_, i) => {
                            const x = 10 + (i * 120)
                            const variation = Math.random() * 20 - 10 // Случайная вариация ±10px
                            const y = Math.max(40, Math.min(200, yOffset + variation))
                            return `${x},${y}`
                          }).join(' ')
                          
                          return (
                            <polyline
                              key={company.id}
                              points={points}
                              fill="none"
                              stroke={color}
                              strokeWidth="3"
                              opacity="0.8"
                            />
                          )
                        })}
                      </svg>
                    </div>
                  ) : (
                    /* Столбчатая диаграмма для сегодня */
                    <div className="absolute inset-0 flex items-end justify-between gap-2">
                      {Array.from({ length: 12 }, (_, index) => {
                        // Рассчитываем среднее значение выбранной метрики
                        const getAverageMetric = () => {
                          if (selectedFilteredCompanies.length === 0) return 0
                          const sum = selectedFilteredCompanies.reduce((acc, company) => {
                            switch (selectedMetric) {
                              case 'transferred': return acc + company.totalTransferred
                              case 'received': return acc + company.totalReceived
                              case 'processed': return acc + company.totalProcessed
                              case 'success': return acc + company.successCount
                              case 'voicemail': return acc + company.voicemailCount
                              default: return acc
                            }
                          }, 0)
                          return Math.round(sum / selectedFilteredCompanies.length)
                        }
                        
                        const avgValue = getAverageMetric()
                        const maxPossible = Math.max(...selectedFilteredCompanies.map(c => {
                          switch (selectedMetric) {
                            case 'transferred': return c.totalTransferred
                            case 'received': return c.totalReceived
                            case 'processed': return c.totalProcessed
                            case 'success': return c.successCount
                            case 'voicemail': return c.voicemailCount
                            default: return 0
                          }
                        }))
                        
                        const percentage = maxPossible > 0 ? Math.round((avgValue / maxPossible) * 100) : 0
                        const hourVariation = Math.round(percentage + (Math.random() * 20 - 10))
                        const normalizedValue = Math.max(5, Math.min(100, hourVariation))
                        
                        const metricColors = {
                          transferred: 'bg-blue-500',
                          received: 'bg-green-500', 
                          processed: 'bg-indigo-500',
                          success: 'bg-emerald-500',
                          voicemail: 'bg-purple-500'
                        }
                        const color = metricColors[selectedMetric] || 'bg-gray-500'
                        
                        return (
                          <div key={index} className="flex-1 flex flex-col justify-end items-center relative">
                            <span className="text-xs text-gray-600 absolute -top-5">
                              {normalizedValue}
                            </span>
                            <div 
                              className={`w-full ${color} rounded-t transition-all duration-300`}
                              style={{ height: `${(normalizedValue / 100) * 160}px` }}
                            />
                          </div>
                        )
                      })}
                    </div>
                  )}
                </div>
                
                {/* Ось X */}
                <div className="flex justify-between mt-4 px-2 text-xs text-gray-500">
                  {chartDateFilter === 'today' ? (
                    ['00:00', '02:00', '04:00', '06:00', '08:00', '10:00', '12:00', '14:00', '16:00', '18:00', '20:00', '22:00'].map(time => (
                      <span key={time}>{time}</span>
                    ))
                  ) : (
                    ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map((day, i) => (
                      <span key={i}>{day}</span>
                    ))
                  )}
                </div>
              </div>
              
              {/* Легенда для кампаний (только для периода) */}
              {chartDateFilter === 'period' && selectedFilteredCompanies.length > 1 && (
                <div className="flex items-center justify-center space-x-6 text-sm">
                  {selectedFilteredCompanies.slice(0, 5).map((company, index) => {
                    const colors = ['#3b82f6', '#10b981', '#f97316', '#8b5cf6', '#ef4444']
                    const color = colors[index % colors.length]
                    return (
                      <div key={company.id} className="flex items-center">
                        <div className="w-3 h-3 rounded mr-2" style={{ backgroundColor: color }}></div>
                        <span className="truncate max-w-32">{company.name}</span>
                      </div>
                    )
                  })}
                  {selectedFilteredCompanies.length > 5 && (
                    <div className="flex items-center">
                      <div className="w-3 h-3 bg-gray-400 rounded mr-2"></div>
                      <span>+{selectedFilteredCompanies.length - 5} ещё</span>
                    </div>
                  )}
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Таблица кампаний с горизонтальным скроллом */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Список кампаний</CardTitle>
            
            {/* Настройка видимости колонок */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm">
                  <Settings2 className="h-4 w-4 mr-2" />
                  Колонки
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>Видимость колонок</DropdownMenuLabel>
                <DropdownMenuSeparator />
                {allColumns.filter(col => !col.fixed).map((column) => (
                  <DropdownMenuCheckboxItem
                    key={column.id}
                    checked={visibleColumns.includes(column.id)}
                    onCheckedChange={() => toggleColumnVisibility(column.id)}
                  >
                    {column.label}
                  </DropdownMenuCheckboxItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full min-w-[1200px]">
              <thead className="bg-gray-50 border-b sticky top-0">
                <tr>
                  {/* Чекбокс для выбора всех */}
                  {visibleColumns.includes('select') && (
                    <th className="px-4 py-3 w-12">
                      <Checkbox
                        checked={selectedCompanies.length === filteredCompanies.length && filteredCompanies.length > 0}
                        onCheckedChange={handleSelectAll}
                      />
                    </th>
                  )}
                  
                  {/* Остальные колонки */}
                  {visibleColumns.includes('company') && (
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase sticky left-0 bg-gray-50">
                      Кампания
                    </th>
                  )}
                  {visibleColumns.includes('status') && (
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                      Статус
                    </th>
                  )}
                  {visibleColumns.includes('abTest') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      A/B тест
                    </th>
                  )}
                  {visibleColumns.includes('transferred') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Передано
                    </th>
                  )}
                  {visibleColumns.includes('received') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Получено
                    </th>
                  )}
                  {visibleColumns.includes('processed') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Обработано
                    </th>
                  )}
                  {visibleColumns.includes('inProgress') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      В работе
                    </th>
                  )}
                  {visibleColumns.includes('completion') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      % выполнения
                    </th>
                  )}
                  {visibleColumns.includes('success') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Успешные
                    </th>
                  )}
                  {visibleColumns.includes('refusals') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Отказы
                    </th>
                  )}
                  {visibleColumns.includes('noAnswer') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Недозвоны
                    </th>
                  )}
                  {visibleColumns.includes('conversion') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Конверсия
                    </th>
                  )}
                  {visibleColumns.includes('voicemail') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase" title="Автоответчики">
                      <Bot className="h-4 w-4 mx-auto" />
                    </th>
                  )}
                  {visibleColumns.includes('lastActivity') && (
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                      Последняя активность
                    </th>
                  )}
                  {visibleColumns.includes('agent') && (
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                      Агент
                    </th>
                  )}
                  {visibleColumns.includes('actions') && (
                    <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                      Действия
                    </th>
                  )}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredCompanies.map((company) => {
                  const conversionRate = getConversionRate(company)
                  const isHighConversion = conversionRate > 60
                  const isLowConversion = conversionRate < 30
                  const isSelected = selectedCompanies.includes(company.id)

                  return (
                    <tr key={company.id} className={`hover:bg-gray-50 ${isSelected ? 'bg-blue-50' : ''}`}>
                      {/* Чекбокс */}
                      {visibleColumns.includes('select') && (
                        <td className="px-4 py-3">
                          <Checkbox
                            checked={isSelected}
                            onCheckedChange={() => handleSelectCompany(company.id)}
                          />
                        </td>
                      )}
                      
                      {/* Кампания */}
                      {visibleColumns.includes('company') && (
                        <td className="px-4 py-3 sticky left-0 bg-white">
                          <div>
                            <p className="font-medium text-gray-900">{company.name}</p>
                            <p className="text-xs text-gray-500">{company.companyId}</p>
                          </div>
                        </td>
                      )}
                      
                      {/* Статус */}
                      {visibleColumns.includes('status') && (
                        <td className="px-4 py-3">
                          {getStatusBadge(company.status)}
                        </td>
                      )}
                      
                      {/* A/B тест */}
                      {visibleColumns.includes('abTest') && (
                        <td className="px-4 py-3 text-center">
                          {company.hasABTest ? (
                            <div className="flex flex-col items-center space-y-1">
                              <div className="flex items-center space-x-2">
                                <GitBranch className="h-4 w-4 text-purple-600" />
                                <span className="text-xs font-medium text-purple-600">Активен</span>
                              </div>
                              {company.abTestVariants && (
                                <div className="flex space-x-1">
                                  <Badge variant="outline" className="text-xs px-1 py-0">
                                    A: {company.abTestVariants.A.agent.substring(0, 3)}
                                  </Badge>
                                  <Badge variant="outline" className="text-xs px-1 py-0">
                                    B: {company.abTestVariants.B.agent.substring(0, 3)}
                                  </Badge>
                                </div>
                              )}
                            </div>
                          ) : (
                            <span className="text-gray-400 text-xs">—</span>
                          )}
                        </td>
                      )}
                      
                      {/* Передано */}
                      {visibleColumns.includes('transferred') && (
                        <td className="px-4 py-3 text-center font-medium">
                          {company.totalTransferred.toLocaleString()}
                        </td>
                      )}
                      
                      {/* Получено */}
                      {visibleColumns.includes('received') && (
                        <td className="px-4 py-3 text-center">
                          <div>
                            <span className="font-medium text-green-600">
                              {company.totalReceived.toLocaleString()}
                            </span>
                            {company.totalTransferred !== company.totalReceived && (
                              <p className="text-xs text-red-500">
                                Δ {Math.abs(company.totalTransferred - company.totalReceived)}
                              </p>
                            )}
                          </div>
                        </td>
                      )}
                      
                      {/* Обработано */}
                      {visibleColumns.includes('processed') && (
                        <td className="px-4 py-3 text-center">
                          <span className="font-medium text-blue-600">
                            {company.totalProcessed.toLocaleString()}
                          </span>
                        </td>
                      )}
                      
                      {/* В работе */}
                      {visibleColumns.includes('inProgress') && (
                        <td className="px-4 py-3 text-center">
                          <span className="font-medium text-orange-600">
                            {company.totalInProgress.toLocaleString()}
                          </span>
                        </td>
                      )}
                      
                      {/* % выполнения */}
                      {visibleColumns.includes('completion') && (
                        <td className="px-4 py-3">
                          <div className="flex items-center space-x-2">
                            <Progress value={company.completionPercent} className="flex-1 max-w-[100px]" />
                            <span className="text-sm font-medium min-w-[3rem] text-right">
                              {company.completionPercent.toFixed(1)}%
                            </span>
                          </div>
                        </td>
                      )}
                      
                      {/* Успешные */}
                      {visibleColumns.includes('success') && (
                        <td className="px-4 py-3 text-center">
                          <span className="font-medium text-green-600">
                            {company.successCount.toLocaleString()}
                          </span>
                        </td>
                      )}
                      
                      {/* Отказы */}
                      {visibleColumns.includes('refusals') && (
                        <td className="px-4 py-3 text-center">
                          <span className="font-medium text-red-600">
                            {company.refusalCount.toLocaleString()}
                          </span>
                        </td>
                      )}
                      
                      {/* Недозвоны */}
                      {visibleColumns.includes('noAnswer') && (
                        <td className="px-4 py-3 text-center">
                          <span className="font-medium text-gray-600">
                            {company.noAnswerCount.toLocaleString()}
                          </span>
                        </td>
                      )}
                      
                      {/* Конверсия */}
                      {visibleColumns.includes('conversion') && (
                        <td className="px-4 py-3 text-center">
                          <div className="flex items-center justify-center space-x-1">
                            {isHighConversion && <TrendingUp className="h-4 w-4 text-green-600" />}
                            {isLowConversion && <TrendingDown className="h-4 w-4 text-red-600" />}
                            <span className={`font-medium ${
                              isHighConversion ? 'text-green-600' : 
                              isLowConversion ? 'text-red-600' : 
                              'text-gray-900'
                            }`}>
                              {conversionRate}%
                            </span>
                          </div>
                        </td>
                      )}
                      
                      {/* Автоответчики */}
                      {visibleColumns.includes('voicemail') && (
                        <td className="px-4 py-3 text-center">
                          {company.voicemailCount > 0 ? (
                            <Badge className="bg-purple-100 text-purple-800">
                              {company.voicemailCount}
                            </Badge>
                          ) : (
                            <span className="text-gray-400">0</span>
                          )}
                        </td>
                      )}
                      
                      {/* Последняя активность */}
                      {visibleColumns.includes('lastActivity') && (
                        <td className="px-4 py-3 text-sm text-gray-600">
                          <div className="flex items-center">
                            <Calendar className="h-3 w-3 mr-1 text-gray-400" />
                            {formatLastActivity(company.lastActivity)}
                          </div>
                        </td>
                      )}
                      
                      {/* Агент */}
                      {visibleColumns.includes('agent') && (
                        <td className="px-4 py-3 text-sm">
                          {company.agent}
                        </td>
                      )}
                      
                      {/* Действия (только просмотр) */}
                      {visibleColumns.includes('actions') && (
                        <td className="px-4 py-3">
                          <div className="flex items-center justify-center">
                            <Button 
                              size="sm" 
                              variant="ghost"
                              onClick={() => router.push(`/obzvoni/${company.id}`)}
                              title="Подробнее"
                            >
                              <Eye className="h-4 w-4" />
                            </Button>
                          </div>
                        </td>
                      )}
                    </tr>
                  )
                })}
              </tbody>
            </table>
            
            {filteredCompanies.length === 0 && (
              <div className="text-center py-12">
                <p className="text-gray-500">Кампании не найдены</p>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/app/obzvoni/page.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Plus, 
  Play, 
  Pause, 
  Square, 
  Filter, 
  RefreshCw,
  Monitor,
  Users,
  Phone,
  Clock,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Search,
  Calendar,
  User,
  Settings,
  TrendingUp,
  Activity,
  MessageSquare,
  Volume2
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { maskPhoneNumber, formatCallDuration } from '@/lib/utils'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Input } from '@/components/ui/input'
import { DateFilter } from '@/components/ui/date-filter'
import { mockCampaigns } from '@/lib/mock-data'
import { Campaign, CampaignState } from '@/lib/types'
import { getStatusColor, getStatusText, calculatePercentage } from '@/lib/utils'

interface ObzvonCampaign {
  id: string
  name: string
  agent: string
  agentStage?: string
  database: string
  script: string
  status: 'active' | 'paused' | 'completed' | 'draft'
  totalNumbers: number
  calledNumbers: number
  successfulConnections: number
  transferredSuccessfully: number
  transfers: number
  retries: number
  startTime?: Date
  endTime?: Date
  progress: number
}

const mockObzvonCampaigns: ObzvonCampaign[] = [
  {
    id: 'obz-1',
    name: 'Тестовый обзвон 2',
    agent: 'Анна (голос 1)',
    agentStage: 'Приветствие',
    database: 'Тестовая база №3413 (1,250 номеров)',
    script: 'Тестовый скрипт обзвона',
    status: 'active',
    totalNumbers: 1250,
    calledNumbers: 847,
    successfulConnections: 623,
    transferredSuccessfully: 445,
    transfers: 89,
    retries: 156,
    startTime: new Date(Date.now() - 3 * 60 * 60 * 1000), // 3 часа назад
    progress: 68
  },
  {
    id: 'obz-2',
    name: 'Реактивация неактивных',
    agent: 'Михаил (голос 2)',
    agentStage: 'Напоминание',
    database: 'Неактивные 90 дней (2,100 номеров)',
    script: 'Возвращение с бонусом',
    status: 'paused',
    totalNumbers: 2100,
    calledNumbers: 456,
    successfulConnections: 298,
    transferredSuccessfully: 156,
    transfers: 34,
    retries: 89,
    startTime: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 часов назад
    progress: 22
  },
  {
    id: 'obz-3',
    name: 'Холодная база январь',
    agent: 'Елена (голос 3)',
    agentStage: 'Холодный звонок',
    database: 'Новые лиды (850 номеров)',
    script: 'Знакомство с продуктом',
    status: 'draft',
    totalNumbers: 850,
    calledNumbers: 0,
    successfulConnections: 0,
    transferredSuccessfully: 0,
    transfers: 0,
    retries: 0,
    progress: 0
  }
]

export default function ObzvoniPage() {
  const router = useRouter()
  const [campaigns, setCampaigns] = useState<ObzvonCampaign[]>(mockObzvonCampaigns)
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [filterAgent, setFilterAgent] = useState<string>('all')
  const [filterDate, setFilterDate] = useState<string>('all')
  const [filterDateIntervalStart, setFilterDateIntervalStart] = useState('')
  const [filterDateIntervalEnd, setFilterDateIntervalEnd] = useState('')
  const [searchQuery, setSearchQuery] = useState<string>('')
  const [isLoading, setIsLoading] = useState(false)

  // Статистика в реальном времени
  const totalActive = campaigns.filter(c => c.status === 'active').length
  const totalCalls = campaigns.reduce((sum, c) => sum + c.calledNumbers, 0)
  const totalSuccess = campaigns.reduce((sum, c) => sum + c.successfulConnections, 0)
  const totalTransferredSuccessfully = campaigns.reduce((sum, c) => sum + c.transferredSuccessfully, 0)

  const handleRefresh = async () => {
    setIsLoading(true)
    // Имитация обновления данных
    setTimeout(() => {
      setIsLoading(false)
    }, 1000)
  }

  const handleCampaignAction = (campaignId: string, action: 'start' | 'pause' | 'stop') => {
    setCampaigns(prev => prev.map(campaign => {
      if (campaign.id === campaignId) {
        switch (action) {
          case 'start':
            return { ...campaign, status: 'active' as const }
          case 'pause':
            return { ...campaign, status: 'paused' as const }
          case 'stop':
            return { ...campaign, status: 'completed' as const }
          default:
            return campaign
        }
      }
      return campaign
    }))
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-green-100 text-green-800">Активна</Badge>
      case 'paused':
        return <Badge className="bg-yellow-100 text-yellow-800">Пауза</Badge>
      case 'completed':
        return <Badge className="bg-blue-100 text-blue-800">Завершена</Badge>
      case 'draft':
        return <Badge className="bg-gray-100 text-gray-800">Черновик</Badge>
      default:
        return <Badge>Неизвестно</Badge>
    }
  }

  // Получение уникальных агентов для фильтра
  const uniqueAgents = Array.from(new Set(campaigns.map(c => c.agent)))

  const filteredCampaigns = campaigns.filter(campaign => {
    const matchesStatus = filterStatus === 'all' || campaign.status === filterStatus
    const matchesAgent = filterAgent === 'all' || campaign.agent === filterAgent
    const matchesSearch = searchQuery === '' || 
      campaign.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      campaign.database.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesDate = (() => {
      if (filterDate === 'all') return true
      if (!campaign.startTime) return false
      
      const now = new Date()
      now.setHours(0, 0, 0, 0)
      const campaignDate = new Date(campaign.startTime)
      campaignDate.setHours(0, 0, 0, 0)
      
      switch (filterDate) {
        case 'today':
          return campaignDate.getTime() === now.getTime()
        case 'week':
          const weekAgo = new Date(now)
          weekAgo.setDate(weekAgo.getDate() - 7)
          return campaignDate >= weekAgo
        case 'month':
          const monthAgo = new Date(now)
          monthAgo.setMonth(monthAgo.getMonth() - 1)
          return campaignDate >= monthAgo
        case 'interval':
          if (!filterDateIntervalStart || !filterDateIntervalEnd) return true
          const start = new Date(filterDateIntervalStart)
          const end = new Date(filterDateIntervalEnd)
          end.setHours(23, 59, 59, 999)
          return campaignDate >= start && campaignDate <= end
        default:
          return true
      }
    })()

    return matchesStatus && matchesAgent && matchesSearch && matchesDate
  })

  return (
    <div className="space-y-6">
      {/* Заголовок */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">
            Обзвоны
          </h1>
          <p className="text-gray-600">
            Управление кампаниями автоматических обзвонов
          </p>
        </div>
        
        <div className="flex space-x-3">
          <Button variant="outline" onClick={handleRefresh} disabled={isLoading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            Обновить
          </Button>
          
          <Button variant="outline" onClick={() => router.push('/obzvoni/ab-tests')}>
            <TrendingUp className="h-4 w-4 mr-2" />
            A/B тесты
          </Button>
          
          <Button onClick={() => router.push('/obzvoni/new')}>
            <Plus className="h-4 w-4 mr-2" />
            Создать кампанию
          </Button>
        </div>
      </div>

      {/* Статистика в реальном времени */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Play className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Активные кампании</p>
                <p className="text-2xl font-bold text-gray-900">{totalActive}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Phone className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Всего звонков</p>
                <p className="text-2xl font-bold text-gray-900">{totalCalls.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <CheckCircle className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Успешные соединения</p>
                <p className="text-2xl font-bold text-gray-900">{totalSuccess.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <Users className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Передано успешно</p>
                <p className="text-2xl font-bold text-gray-900">{totalTransferredSuccessfully.toLocaleString()}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Фильтры и поиск */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col space-y-4">
            <div className="flex items-center space-x-2">
              <Filter className="h-4 w-4 text-gray-500" />
              <span className="text-sm font-medium text-gray-700">Фильтры и поиск:</span>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              {/* Поиск */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <Input
                  placeholder="Поиск по названию или базе..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>

              {/* Фильтр по статусу */}
              <Select value={filterStatus} onValueChange={setFilterStatus}>
                <SelectTrigger>
                  <SelectValue placeholder="Все статусы" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все статусы</SelectItem>
                  <SelectItem value="active">Активные</SelectItem>
                  <SelectItem value="paused">На паузе</SelectItem>
                  <SelectItem value="completed">Завершённые</SelectItem>
                  <SelectItem value="draft">Черновики</SelectItem>
                </SelectContent>
              </Select>

              {/* Фильтр по агенту */}
              <Select value={filterAgent} onValueChange={setFilterAgent}>
                <SelectTrigger>
                  <User className="h-4 w-4 mr-2" />
                  <SelectValue placeholder="Все агенты" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Все агенты</SelectItem>
                  {uniqueAgents.map((agent) => (
                    <SelectItem key={agent} value={agent}>
                      {agent}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              {/* Фильтр по дате */}
              <DateFilter
                value={filterDate}
                onValueChange={setFilterDate}
                intervalStart={filterDateIntervalStart}
                intervalEnd={filterDateIntervalEnd}
                onIntervalChange={(start, end) => {
                  setFilterDateIntervalStart(start)
                  setFilterDateIntervalEnd(end)
                }}
                label=""
                className="w-full"
              />

              {/* Кнопка сброса фильтров */}
              <Button 
                variant="outline" 
                onClick={() => {
                  setFilterStatus('all')
                  setFilterAgent('all')
                  setFilterDate('all')
                  setSearchQuery('')
                }}
                className="whitespace-nowrap"
              >
                Сбросить
              </Button>
            </div>

            {/* Индикатор активных фильтров */}
            {(filterStatus !== 'all' || filterAgent !== 'all' || filterDate !== 'all' || searchQuery !== '') && (
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <span>Активные фильтры:</span>
                {filterStatus !== 'all' && (
                  <Badge variant="outline">Статус: {filterStatus}</Badge>
                )}
                {filterAgent !== 'all' && (
                  <Badge variant="outline">Агент: {filterAgent}</Badge>
                )}
                {filterDate !== 'all' && (
                  <Badge variant="outline">
                    Период: {filterDate === 'interval' && filterDateIntervalStart && filterDateIntervalEnd 
                      ? `${new Date(filterDateIntervalStart).toLocaleDateString()} - ${new Date(filterDateIntervalEnd).toLocaleDateString()}`
                      : filterDate === 'today' ? 'День'
                      : filterDate === 'week' ? 'Неделя'
                      : filterDate === 'month' ? 'Месяц'
                      : filterDate}
                  </Badge>
                )}
                {searchQuery !== '' && (
                  <Badge variant="outline">Поиск: &quot;{searchQuery}&quot;</Badge>
                )}
                <span className="text-gray-500">
                  Показано: {filteredCampaigns.length} из {campaigns.length}
                </span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Таблица кампаний */}
      <Card>
        <CardHeader>
          <CardTitle>Кампании ({filteredCampaigns.length})</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Название
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    База номеров
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Размер базы
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Статус
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    % выполнения
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Этап/Агент
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Действия
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredCampaigns.map((campaign) => (
                  <tr key={campaign.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {campaign.name}
                        </div>
                        <div className="text-sm text-gray-500">
                          Агент: {campaign.agent}
                          {campaign.agentStage && (
                            <span className="ml-2 text-xs text-gray-400">• Этап: {campaign.agentStage}</span>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{campaign.database}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {campaign.totalNumbers.toLocaleString()}
                      </div>
                      <div className="text-xs text-gray-500">% исполнения: {campaign.progress}%</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(campaign.status)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{campaign.agent}</div>
                      {campaign.agentStage && (
                        <div className="text-xs text-gray-500">Этап: {campaign.agentStage}</div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2">
                        {campaign.status === 'draft' && (
                          <Button
                            size="sm"
                            onClick={() => handleCampaignAction(campaign.id, 'start')}
                            title="Запустить"
                          >
                            <Play className="h-4 w-4" />
                          </Button>
                        )}
                        {campaign.status === 'active' && (
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => handleCampaignAction(campaign.id, 'pause')}
                            title="Пауза"
                          >
                            <Pause className="h-4 w-4" />
                          </Button>
                        )}
                        {campaign.status === 'paused' && (
                          <Button
                            size="sm"
                            onClick={() => handleCampaignAction(campaign.id, 'start')}
                            title="Продолжить"
                          >
                            <Play className="h-4 w-4" />
                          </Button>
                        )}
                        {(campaign.status === 'active' || campaign.status === 'paused') && (
                          <Button
                            size="sm"
                            variant="destructive"
                            onClick={() => handleCampaignAction(campaign.id, 'stop')}
                            title="Завершить"
                          >
                            <Square className="h-4 w-4" />
                          </Button>
                        )}
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => router.push(`/obzvoni/${campaign.id}`)}
                          title="Открыть детали"
                        >
                          <Monitor className="h-4 w-4" />
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      {filteredCampaigns.length === 0 && (
        <Card>
          <CardContent className="py-12">
            <div className="text-center">
              <p className="text-gray-500 mb-4">
                Нет кампаний, соответствующих выбранному фильтру
              </p>
              <Button onClick={() => router.push('/obzvoni/new')}>
                <Plus className="h-4 w-4 mr-2" />
                Создать первую кампанию
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Мониторинг (вставлен с /obzvoni/monitor) */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Мониторинг обзвонов</CardTitle>
            <div className="flex items-center space-x-2">
              <Button variant="outline" onClick={() => router.push('/obzvoni/monitor')}>Открыть полноэкранно</Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Общие метрики */}
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-green-100 rounded-lg">
                    <Phone className="h-6 w-6 text-green-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Активные звонки</p>
                    <p className="text-2xl font-bold text-gray-900">{mockCampaigns.length > 0 ? 3 : 0}</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-100 rounded-lg">
                    <Users className="h-6 w-6 text-blue-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">В очереди</p>
                    <p className="text-2xl font-bold text-gray-900">1,240</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <Activity className="h-6 w-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Обработано</p>
                    <p className="text-2xl font-bold text-gray-900">1,303</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-orange-100 rounded-lg">
                    <CheckCircle className="h-6 w-6 text-orange-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Успешность</p>
                    <p className="text-2xl font-bold text-gray-900">46.8%</p>
                  </div>
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardContent className="p-6">
                <div className="flex items-center">
                  <div className="p-2 bg-purple-100 rounded-lg">
                    <MessageSquare className="h-6 w-6 text-purple-600" />
                  </div>
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-600">Автоответчики</p>
                    <p className="text-2xl font-bold text-gray-900">38</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Активные звонки (таблица) - легкая версия */}
          <div className="space-y-2">
            <h3 className="text-lg font-semibold">Активные звонки в реальном времени</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Статус</th>
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Номер</th>
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Кампания</th>
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Агент</th>
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Этап</th>
                    <th className="text-left py-2 px-3 text-sm text-gray-600">Длительность</th>
                  </tr>
                </thead>
                <tbody>
                  {[
                    { status: 'talking', number: '+7 (999) 123-**-**', campaign: 'Тестовый обзвон базы', agent: 'Анна', step: 'Презентация предложения', duration: 120 },
                    { status: 'voicemail', number: '+7 (999) 234-**-**', campaign: 'Реактивация неактивных', agent: 'Михаил', step: 'Автоответчик', duration: 90 },
                    { status: 'connecting', number: '+7 (999) 345-**-**', campaign: 'Тестовый обзвон базы', agent: 'Елена', step: 'Соединение', duration: 30 },
                  ].map((row, idx) => (
                    <tr key={idx} className="border-b">
                      <td className="py-2 px-3 text-sm">
                        <div className="flex items-center space-x-2">
                          {row.status === 'talking' ? <Volume2 className="h-4 w-4 text-green-600" /> : row.status === 'voicemail' ? <MessageSquare className="h-4 w-4 text-purple-600" /> : <Phone className="h-4 w-4 text-blue-600" />}
                          <span className="text-gray-700">
                            {row.status === 'talking' ? 'Разговор' : row.status === 'voicemail' ? 'Автоответчик' : 'Соединение'}
                          </span>
                        </div>
                      </td>
                      <td className="py-2 px-3 text-sm font-mono">{row.number}</td>
                      <td className="py-2 px-3 text-sm">{row.campaign}</td>
                      <td className="py-2 px-3 text-sm">{row.agent}</td>
                      <td className="py-2 px-3 text-sm">{row.step}</td>
                      <td className="py-2 px-3 text-sm font-medium">{formatCallDuration(row.duration)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
</file>

<file path="src/components/layout/main-layout.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { 
  BarChart3,
  Bell,
  User,
  Users,
  LogOut,
  Shield,
  Settings,
  Phone,
  Lock,
  CheckCircle,
  XCircle
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select'
import { 
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Badge } from '@/components/ui/badge'
import { cn } from '@/lib/utils'
import { UserRole } from '@/lib/types'
import { rolePermissions } from '@/lib/mock-data'
import { storage } from '@/lib/utils'

interface MainLayoutProps {
  children: React.ReactNode
}

const navigation = [
  {
    name: 'Компании',
    href: '/companies',
    icon: Phone,
    permissions: ['campaigns.view']
  },
  {
    name: 'Мониторинг',
    href: '/obzvoni/monitor',
    icon: BarChart3,
    permissions: ['campaigns.view']
  },
  {
    name: 'Агенты',
    href: '/agents',
    icon: Users,
    permissions: ['campaigns.view']
  },
  {
    name: 'Настройки',
    href: '/settings',
    icon: Settings,
    permissions: ['campaigns.view']
  }
]

const roleLabels: Record<UserRole, string> = {
  admin: 'Администратор',
  marketer: 'Маркетолог',
  supervisor: 'Супервайзер',
  manager: 'Менеджер'
}

export function MainLayout({ children }: MainLayoutProps) {
  const pathname = usePathname()
  const [currentRole, setCurrentRole] = useState<UserRole>('admin')

  // Загрузка настроек из localStorage при монтировании
  useEffect(() => {
    const savedRole = storage.get<UserRole>('currentRole', 'admin')
    setCurrentRole(savedRole)
  }, [])

  // Сохранение настроек в localStorage
  const handleRoleChange = (role: UserRole) => {
    setCurrentRole(role)
    storage.set('currentRole', role)
  }

  // Получение текущих прав доступа
  const currentPermissions = rolePermissions[currentRole]

  // Проверка доступа к пункту меню
  const hasAccess = (permissions: string[]) => {
    if (permissions.length === 0) return true
    
    return permissions.some(permission => {
      const [resource, action] = permission.split('.')
      const resourcePerms = currentPermissions.permissions[resource as keyof typeof currentPermissions.permissions] as any
      return resourcePerms?.[action]
    })
  }

  // Фильтрация навигации по правам доступа
  const filteredNavigation = navigation.filter(item => hasAccess(item.permissions))

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200">
        <div className="mx-auto px-6">
          <div className="flex justify-between items-center py-4">
            {/* Logo */}
            <div className="flex items-center space-x-4">
              <div className="flex items-center">
                <div className="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center">
                  <div className="w-4 h-4 bg-white rounded-full relative">
                    <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-1 h-3 bg-red-600 rounded-full"></div>
                  </div>
                </div>
              </div>
            </div>

            {/* Right side controls */}
            <div className="flex items-center space-x-4">
              {/* Role Selector */}
              <div className="flex items-center space-x-2">
                <Shield className="h-4 w-4 text-gray-500" />
                <Select value={currentRole} onValueChange={handleRoleChange}>
                  <SelectTrigger className="w-40">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {Object.entries(roleLabels).map(([role, label]) => (
                      <SelectItem key={role} value={role}>
                        {label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>



              {/* Notifications */}
              <Button variant="ghost" size="icon" className="relative">
                <Bell className="h-5 w-5" />
                <Badge 
                  variant="destructive" 
                  className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs"
                >
                  3
                </Badge>
              </Button>

              {/* User Menu */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="relative h-10 w-10 rounded-full">
                    <Avatar className="h-10 w-10">
                      <AvatarImage src="/avatars/01.png" alt="Пользователь" />
                      <AvatarFallback>
                        <User className="h-5 w-5" />
                      </AvatarFallback>
                    </Avatar>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-80" align="end" forceMount>
                  <DropdownMenuLabel className="font-normal">
                    <div className="flex flex-col space-y-2">
                      <div className="flex items-center space-x-2">
                        <Shield className="h-5 w-5 text-blue-600" />
                        <div>
                          <p className="text-sm font-medium leading-none">
                            {roleLabels[currentRole]}
                          </p>
                          <p className="text-xs leading-none text-muted-foreground mt-1">
                            user@example.com
                          </p>
                        </div>
                      </div>
                    </div>
                  </DropdownMenuLabel>
                  
                  <DropdownMenuSeparator />
                  
                  {/* Роль и права доступа */}
                  <div className="px-2 py-3">
                    <div className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <Lock className="h-4 w-4 text-gray-500" />
                        <p className="text-xs font-medium text-gray-700">Права доступа:</p>
                      </div>
                      
                      {currentRole === 'admin' ? (
                        <div className="ml-6 space-y-1">
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Полный доступ ко всем функциям</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Создание и редактирование агентов</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Запуск и управление кампаниями</span>
                          </div>
                        </div>
                      ) : currentRole === 'marketer' ? (
                        <div className="ml-6 space-y-1">
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Запуск и управление кампаниями</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <XCircle className="h-3 w-3 text-red-600" />
                            <span className="text-xs text-gray-600">Создание/правка агентов недоступна</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Lock className="h-3 w-3 text-orange-600" />
                            <span className="text-xs text-gray-600">Промпты агентов только для чтения</span>
                          </div>
                        </div>
                      ) : currentRole === 'supervisor' ? (
                        <div className="ml-6 space-y-1">
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Создание и настройка агентов</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Редактирование промптов</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <XCircle className="h-3 w-3 text-red-600" />
                            <span className="text-xs text-gray-600">Запуск кампаний недоступен</span>
                          </div>
                        </div>
                      ) : (
                        <div className="ml-6 space-y-1">
                          <div className="flex items-center space-x-2">
                            <CheckCircle className="h-3 w-3 text-green-600" />
                            <span className="text-xs text-gray-600">Просмотр кампаний и статистики</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <XCircle className="h-3 w-3 text-red-600" />
                            <span className="text-xs text-gray-600">Редактирование недоступно</span>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    {(currentRole === 'marketer' || currentRole === 'supervisor') && (
                      <div className="mt-3 p-2 bg-blue-50 rounded-md">
                        <p className="text-xs text-blue-700">
                          {currentRole === 'marketer' 
                            ? 'Роль «Запускает кампании»: фокус на управлении и мониторинге обзвонов'
                            : 'Роль «Настраивает агентов»: фокус на создании и оптимизации AI-агентов'
                          }
                        </p>
                      </div>
                    )}
                  </div>
                  
                  <DropdownMenuSeparator />
                  
                  <DropdownMenuItem>
                    <User className="mr-2 h-4 w-4" />
                    <span>Профиль</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Settings className="mr-2 h-4 w-4" />
                    <span>Настройки</span>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem>
                    <LogOut className="mr-2 h-4 w-4" />
                    <span>Выйти</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        <nav className="w-16 bg-white min-h-screen border-r border-gray-200 flex flex-col">
          <div className="flex-1 py-4">
            <div className="space-y-2">
              {filteredNavigation.map((item) => {
                const isActive = pathname === item.href
                return (
                  <Link
                    key={item.name}
                    href={item.href}
                    className={cn(
                      'flex items-center justify-center w-12 h-12 mx-2 rounded-lg transition-colors relative group',
                      isActive
                        ? 'bg-red-50 text-red-600'
                        : 'text-gray-400 hover:bg-gray-50 hover:text-gray-600'
                    )}
                    title={item.name}
                  >
                    <item.icon className="h-5 w-5" />
                    {/* Tooltip */}
                    <div className="absolute left-full ml-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-50">
                      {item.name}
                    </div>
                  </Link>
                )
              })}
            </div>
          </div>

          {/* Version info at bottom */}
          <div className="p-2 border-t border-gray-200">
            <div className="text-xs text-gray-400 text-center">
              <div>Версия</div>
              <div>01.08.08</div>
            </div>
          </div>
        </nav>

        {/* Main content */}
        <main className="flex-1 p-6">
          {children}
        </main>
      </div>
    </div>
  )
}
</file>

<file path="src/app/companies/new/page.tsx">
'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  ArrowLeft, 
  Mic, 
  FileText, 
  Settings, 
  Copy,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  Save,
  Play,
  Check,
  Users,
  User,
  Clock,
  Upload,
  CheckSquare,
  Phone,
  Headphones,
  FlaskConical,
  Plus,
  Eye,
  Pause,
  X,
  Edit,
  MessageSquare,
  Shield,
  Volume2,
  UserCheck
} from 'lucide-react'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Switch } from '@/components/ui/switch'
import { BaseType } from '@/lib/types'
import { CallTestModal } from '@/components/call-test-modal'

interface ABTest {
  id: string
  name: string
  description: string
  status: 'active' | 'draft'
  variantA: string
  variantB: string
  splitRatio: number
  callsCount?: number
}

interface CampaignForm {
  name: string
  description: string
  companyId: string
  baseType: BaseType | ''
  agent: string
  voice: string
  knowledgeDoc?: File
  serviceReady: boolean
  balanceOk: boolean
  telephonyOk: boolean
  serviceAvailable: boolean
  testPhone: string
  isTestCalling: boolean
  // A/B тестирование
  isABTestEnabled: boolean
  agentA: string
  agentB: string
  trafficSplit: number
  // Время и повторы
  callWindow: {
    start: string
    end: string
  }
  retryPolicy: {
    maxAttempts: number
    delayMinutes: number
  }
  // Создание агента инлайн
  createNewAgent: boolean
  newAgentName: string
  newAgentDescription: string
  newAgentPrompt: string
  // Результат теста агента
  agentTestStatus: 'idle' | 'testing' | 'passed' | 'failed'
  agentTestFeedback: string
  // Поля для структурированного промтинга
  agentRole?: string
  agentLanguage?: string
  agentScript?: string
  introTemplate?: string
  customIntro?: string
  conversationGoals?: string[]
  objectionHandling?: string
  maxAttempts?: number
  forbiddenTopics?: string
  consentRecording?: string
  dataProcessing?: string
  disclaimerText?: string
  // Исходящий номер
  outgoingNumber: string
}

const mockAgents = [
  { 
    id: 'anna-1', 
    name: 'Анна', 
    description: 'Продажи и консультации', 
    baseType: 'registration' as BaseType,
    prompt: `Ты - менеджер по продажам Анна. Твоя задача - консультировать клиентов по продуктам компании и помогать им с регистрацией.

Основные правила:
- Будь дружелюбной и вежливой
- Внимательно слушай клиента
- Предлагай решения, подходящие под их потребности
- Если клиент сомневается, приведи примеры успешных кейсов
- Всегда уточняй контактные данные для обратной связи`
  },
  { 
    id: 'mikhail-2', 
    name: 'Михаил', 
    description: 'Поддержка и помощь', 
    baseType: 'no_answer' as BaseType,
    prompt: `Ты - специалист технической поддержки Михаил. Твоя задача - помогать клиентам решать технические вопросы.

Основные правила:
- Будь терпеливым и понимающим
- Объясняй решения простым языком
- Предлагай пошаговые инструкции
- При сложных проблемах предложи эскалацию к специалисту
- Обязательно уточни, решена ли проблема`
  },
  { 
    id: 'elena-3', 
    name: 'Елена', 
    description: 'Опросы и исследования', 
    baseType: 'refusals' as BaseType,
    prompt: `Ты - специалист по исследованиям Елена. Твоя задача - проводить опросы и собирать обратную связь.

Основные правила:
- Представься и объясни цель опроса
- Задавай вопросы последовательно
- Не перебивай респондента
- Благодари за каждый ответ
- В конце опроса предложи бонус за участие`
  },
  { 
    id: 'dmitry-4', 
    name: 'Дмитрий', 
    description: 'Информирование', 
    baseType: 'reactivation' as BaseType,
    prompt: `Ты - менеджер по работе с клиентами Дмитрий. Твоя задача - информировать о новых предложениях и акциях.

Основные правила:
- Кратко представь актуальное предложение
- Подчеркни выгоды для клиента
- Ответь на вопросы о условиях
- Предложи оформить заявку прямо сейчас
- Если клиент не готов - предложи отправить информацию на email`
  },
  { 
    id: 'olga-5', 
    name: 'Ольга', 
    description: 'Регистрация новых клиентов', 
    baseType: 'registration' as BaseType,
    prompt: `Ты - специалист по регистрации Ольга. Твоя задача - помочь новым клиентам зарегистрироваться в системе.

Основные правила:
- Приветствуй тепло и дружелюбно
- Пошагово проведи через процесс регистрации
- Запрашивай данные по одному
- Подтверждай каждый введенный параметр
- В конце подтверди успешную регистрацию и расскажи о следующих шагах`
  },
  { 
    id: 'ivan-6', 
    name: 'Иван', 
    description: 'Работа с недозвонами', 
    baseType: 'no_answer' as BaseType,
    prompt: `Ты - менеджер Иван. Твоя задача - обработать пропущенные звонки и выяснить потребности клиента.

Основные правила:
- Извинись за пропущенный звонок
- Уточни, по какому вопросу звонил клиент
- Предложи помощь прямо сейчас
- Если вопрос решен - уточни, нужна ли дополнительная помощь
- Предложи удобное время для повторного звонка при необходимости`
  }
]

const mockOutgoingNumbers = [
  { id: 'num-1', number: '+7 (495) 123-45-67', description: 'Основной номер', status: 'active' },
  { id: 'num-2', number: '+7 (499) 987-65-43', description: 'Дополнительный номер', status: 'active' },
  { id: 'num-3', number: '+7 (800) 555-35-35', description: 'Бесплатная линия', status: 'active' },
  { id: 'num-4', number: '+7 (495) 777-77-77', description: 'Корпоративный', status: 'inactive' },
  { id: 'num-5', number: '+7 (499) 111-22-33', description: 'Тестовый номер', status: 'active' }
]

const mockVoices = [
  { id: 'voice-1', name: 'Женский дружелюбный', description: 'Теплый, располагающий' },
  { id: 'voice-2', name: 'Мужской деловой', description: 'Уверенный, профессиональный' },
  { id: 'voice-3', name: 'Женский энергичный', description: 'Активный, позитивный' },
  { id: 'voice-4', name: 'Мужской спокойный', description: 'Размеренный, вдумчивый' }
]

const mockABTests: ABTest[] = [
  {
    id: 'ab-1',
    name: 'Тест приветствия v2',
    description: 'Сравнение стандартного и персонализированного приветствия',
    status: 'active',
    variantA: 'Стандартное приветствие',
    variantB: 'Персонализированное приветствие',
    splitRatio: 50,
    callsCount: 1234
  },
  {
    id: 'ab-2',
    name: 'Тест длительности разговора',
    description: 'Короткий vs развернутый сценарий',
    status: 'active',
    variantA: 'Короткий сценарий',
    variantB: 'Развернутый сценарий',
    splitRatio: 50,
    callsCount: 567
  },
  {
    id: 'ab-3',
    name: 'Тест голосов агентов',
    description: 'Сравнение мужского и женского голоса для целевой аудитории',
    status: 'draft',
    variantA: 'Мужской голос',
    variantB: 'Женский голос',
    splitRatio: 50
  },
  {
    id: 'ab-4',
    name: 'Тест времени звонка',
    description: 'Оптимальное время для звонков: утро vs вечер',
    status: 'draft',
    variantA: 'Утренние звонки',
    variantB: 'Вечерние звонки',
    splitRatio: 50
  }
]

export default function NewCompanyPage() {
  const router = useRouter()
  const [form, setForm] = useState<CampaignForm>({
    name: '',
    description: '',
    companyId: `CMP-${Date.now().toString(36).toUpperCase()}`,
    baseType: '',
    agent: '',
    voice: '',
    serviceReady: false,
    balanceOk: false,
    telephonyOk: false,
    serviceAvailable: false,
    testPhone: '',
    isTestCalling: false,
    // A/B тестирование
    isABTestEnabled: false,
    agentA: '',
    agentB: '',
    trafficSplit: 50,
    callWindow: {
      start: '09:00',
      end: '20:00'
    },
    retryPolicy: {
      maxAttempts: 3,
      delayMinutes: 60
    },
    createNewAgent: false,
    newAgentName: '',
    newAgentDescription: '',
    newAgentPrompt: '',
    agentTestStatus: 'idle',
    agentTestFeedback: '',
    outgoingNumber: ''
  })

  const [isLoading, setIsLoading] = useState(false)
  const [isCopied, setIsCopied] = useState(false)
  const [isCheckingService, setIsCheckingService] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const [isRecording, setIsRecording] = useState(false)
  const [testCallStatus, setTestCallStatus] = useState<'idle' | 'calling' | 'connected' | 'ended'>('idle')
  const [showABTests, setShowABTests] = useState(false)
  const [isCallModalOpen, setIsCallModalOpen] = useState(false)
  const [showCreateABTest, setShowCreateABTest] = useState(false)
  const [showCreateAgent, setShowCreateAgent] = useState(false)
  const [showABTestSelection, setShowABTestSelection] = useState(false)
  const [showABTestCreation, setShowABTestCreation] = useState(false)
  const [newABTest, setNewABTest] = useState({
    name: '',
    description: '',
    variantA: '',
    variantB: '',
    splitRatio: 50
  })

  const handleInputChange = (field: keyof CampaignForm, value: any) => {
    setForm(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleCopyCompanyId = () => {
    navigator.clipboard.writeText(form.companyId)
    setIsCopied(true)
    setTimeout(() => setIsCopied(false), 2000)
  }

  const checkServiceReadiness = async () => {
    setIsCheckingService(true)
    // Имитация проверки готовности сервиса
    setTimeout(() => {
      const balanceOk = Math.random() > 0.3
      const telephonyOk = Math.random() > 0.2
      const serviceAvailable = Math.random() > 0.1
      
      setForm(prev => ({
        ...prev,
        balanceOk,
        telephonyOk,
        serviceAvailable,
        serviceReady: balanceOk && telephonyOk && serviceAvailable
      }))
      setIsCheckingService(false)
    }, 1500)
  }

  useEffect(() => {
    // Автоматическая проверка готовности при монтировании на резюме
    if (currentStep === 4) {
      checkServiceReadiness()
    }
  }, [currentStep])

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      handleInputChange('knowledgeDoc', file)
    }
  }

  const handleTestCall = () => {
    if (!form.testPhone) return
    
    setTestCallStatus('calling')
    handleInputChange('isTestCalling', true)
    
    // Симуляция звонка
    setTimeout(() => {
      setTestCallStatus('connected')
      
      // Завершение через 5 секунд
      setTimeout(() => {
        setTestCallStatus('ended')
        handleInputChange('isTestCalling', false)
        
        // Возврат к idle через 2 секунды
        setTimeout(() => {
          setTestCallStatus('idle')
        }, 2000)
      }, 5000)
    }, 2000)
  }

  const startVoiceCall = async () => {
    try {
      setIsRecording(true)
      
      // Здесь была бы интеграция с Web Audio API
      // Для демо просто симулируем
      setTimeout(() => {
        handleInputChange('testPhone', '+7 900 123-45-67')
        setIsRecording(false)
      }, 3000)
    } catch (error) {
      console.error('Ошибка записи:', error)
      setIsRecording(false)
    }
  }

  const handleRefreshStatus = async () => {
    setIsCheckingService(true)
    
    // Симуляция проверки статуса системы
    setTimeout(() => {
      // Случайное обновление статусов для демонстрации
      const newStatus = {
        telephonyOk: Math.random() > 0.2,
        balanceOk: Math.random() > 0.3,
        serviceAvailable: Math.random() > 0.1
      }
      
      setForm(prev => ({
        ...prev,
        ...newStatus
      }))
      
      setIsCheckingService(false)
    }, 1500)
  }


  const handleTestAgent = () => {
    // Открываем модальное окно вместо симуляции
    setIsCallModalOpen(true)
    handleInputChange('agentTestStatus', 'passed')
    handleInputChange('agentTestFeedback', 'Агент успешно протестирован. Все системы работают корректно.')
  }

  const handleCreateAgent = () => {
    // Сохраняем нового агента
    const newAgent = {
      id: `agent-${Date.now()}`,
      name: form.newAgentName,
      description: form.newAgentDescription,
      baseType: form.baseType as BaseType,
      prompt: form.newAgentPrompt || 'Настройки агента не указаны.'
    }
    mockAgents.push(newAgent)
    handleInputChange('agent', newAgent.id)
    handleInputChange('createNewAgent', false)
    setShowCreateAgent(false)
  }

  const isStepCompleted = (step: number) => {
    switch (step) {
      case 1:
        return form.name.trim() !== ''
      case 2:
        return form.callWindow.start !== '' && form.callWindow.end !== '' && form.outgoingNumber !== ''
      case 3:
        return form.agent !== '' && 
               form.voice !== '' && 
               form.serviceReady
      case 4:
        return true // Все обязательные поля уже заполнены на предыдущих шагах
      default:
        return false
    }
  }

  const isFormValid = () => {
    return isStepCompleted(1) && isStepCompleted(2) && isStepCompleted(3) && isStepCompleted(4)
  }

  const handleSave = async () => {
    setIsLoading(true)
    
    // Имитация сохранения
    setTimeout(() => {
      setIsLoading(false)
      router.push('/companies')
    }, 1500)
  }

  const steps = [
    { id: 1, name: 'Название и настройки', icon: Settings },
    { id: 2, name: 'Настройки звонков', icon: Clock },
    { id: 3, name: 'Настройка Агента', icon: Mic },
    { id: 4, name: 'Резюме', icon: CheckCircle }
  ]

  return (
    <>
      <div className="space-y-6">
        {/* Заголовок */}
        <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Назад
          </Button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">
              Создание компании
            </h1>
            <p className="text-gray-600">
              Настройте параметры новой компании обзвона
            </p>
          </div>
        </div>
      </div>

      {/* Шаги */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            {steps.map((step, index) => (
              <div key={step.id} className="flex items-center">
                <div 
                  className={`flex items-center justify-center w-10 h-10 rounded-full cursor-pointer ${
                    currentStep === step.id 
                      ? 'bg-blue-600 text-white' 
                      : isStepCompleted(step.id)
                      ? 'bg-green-600 text-white'
                      : 'bg-gray-200 text-gray-600'
                  }`}
                  onClick={() => setCurrentStep(step.id)}
                >
                  <step.icon className="h-5 w-5" />
                </div>
                <div className="ml-3">
                  <p className={`text-sm font-medium ${
                    currentStep === step.id ? 'text-blue-600' : 'text-gray-600'
                  }`}>
                    {step.name}
                  </p>
                </div>
                {index < steps.length - 1 && (
                  <div className={`w-20 h-0.5 mx-4 ${
                    isStepCompleted(step.id) ? 'bg-green-600' : 'bg-gray-200'
                  }`} />
                )}
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Содержимое шагов */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          {/* Шаг 1: Название компании и A/B тест */}
          {currentStep === 1 && (
            <Card>
              <CardHeader>
                <CardTitle>Название кампании и настройки</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label htmlFor="name">Название компании *</Label>
                  <Input
                    id="name"
                    placeholder="Например: Новогодняя акция 2025"
                    value={form.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    className="mt-1"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Введите понятное название для идентификации компании
                  </p>
                </div>
                
                <div>
                  <Label htmlFor="description">Описание кампании *</Label>
                  <Textarea
                    id="description"
                    placeholder="Опишите цель и задачи кампании обзвона..."
                    value={form.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    className="mt-1 min-h-[100px]"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Введите описание кампании для лучшего понимания ее целей
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 2: Время и повторы */}
          {currentStep === 2 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Clock className="h-5 w-5 mr-2" />
                  Настройки звонков
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div>
                  <Label>Окно дозвона</Label>
                  <div className="grid grid-cols-2 gap-4 mt-2">
                    <div>
                      <Label htmlFor="start-time" className="text-sm text-gray-600">Начало</Label>
                      <Input
                        id="start-time"
                        type="time"
                        value={form.callWindow.start}
                        onChange={(e) => handleInputChange('callWindow', { ...form.callWindow, start: e.target.value })}
                        className="mt-1"
                      />
                    </div>
                    <div>
                      <Label htmlFor="end-time" className="text-sm text-gray-600">Окончание</Label>
                      <Input
                        id="end-time"
                        type="time"
                        value={form.callWindow.end}
                        onChange={(e) => handleInputChange('callWindow', { ...form.callWindow, end: e.target.value })}
                        className="mt-1"
                      />
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Укажите временной промежуток для совершения звонков
                  </p>
                </div>

                <Separator />

                <div>
                  <Label>Политика повторов</Label>
                  <div className="space-y-4 mt-2">
                    <div>
                      <Label htmlFor="max-attempts" className="text-sm text-gray-600">
                        Максимальное количество попыток
                      </Label>
                      <Select 
                        value={form.retryPolicy.maxAttempts.toString()} 
                        onValueChange={(value) => handleInputChange('retryPolicy', { ...form.retryPolicy, maxAttempts: parseInt(value) })}
                      >
                        <SelectTrigger className="mt-1">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="1">1 попытка</SelectItem>
                          <SelectItem value="2">2 попытки</SelectItem>
                          <SelectItem value="3">3 попытки</SelectItem>
                          <SelectItem value="4">4 попытки</SelectItem>
                          <SelectItem value="5">5 попыток</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="retry-delay" className="text-sm text-gray-600">
                        Задержка между попытками (минуты)
                      </Label>
                      <Select 
                        value={form.retryPolicy.delayMinutes.toString()} 
                        onValueChange={(value) => handleInputChange('retryPolicy', { ...form.retryPolicy, delayMinutes: parseInt(value) })}
                      >
                        <SelectTrigger className="mt-1">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="30">30 минут</SelectItem>
                          <SelectItem value="60">1 час</SelectItem>
                          <SelectItem value="120">2 часа</SelectItem>
                          <SelectItem value="240">4 часа</SelectItem>
                          <SelectItem value="1440">24 часа</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Настройте, сколько раз и с какими интервалами повторять звонки при недозвоне
                  </p>
                </div>

                <Separator />

                {/* Исходящий номер */}
                <div>
                  <Label htmlFor="outgoing-number">Исходящий номер *</Label>
                  <Select 
                    value={form.outgoingNumber} 
                    onValueChange={(value) => handleInputChange('outgoingNumber', value)}
                  >
                    <SelectTrigger id="outgoing-number" className="mt-2">
                      <SelectValue placeholder="Выберите номер для исходящих звонков" />
                    </SelectTrigger>
                    <SelectContent>
                      {mockOutgoingNumbers
                        .filter(num => num.status === 'active')
                        .map((num) => (
                          <SelectItem key={num.id} value={num.id}>
                            <div className="flex items-center justify-between w-full">
                              <span className="font-medium">{num.number}</span>
                              <span className="text-xs text-gray-500 ml-2">{num.description}</span>
                            </div>
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-gray-500 mt-2">
                    Номер Asterisk, с которого будут совершаться исходящие звонки
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Шаг 3: Настройка Агента */}
          {currentStep === 3 && (
            <>
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Mic className="h-5 w-5 mr-2" />
                  Настройка агента
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Переключатель режима кампании */}
                <div className="space-y-4">
                  <Label>Режим кампании</Label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      type="button"
                      onClick={() => handleInputChange('isABTestEnabled', false)}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        !form.isABTestEnabled 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 hover:border-gray-300 text-gray-600'
                      }`}
                    >
                      <UserCheck className="h-5 w-5 mx-auto mb-2" />
                      <div className="font-medium">1 кампания</div>
                      <div className="text-xs mt-1">Один агент для всех звонков</div>
                    </button>
                    
                    <button
                      type="button"
                      onClick={() => handleInputChange('isABTestEnabled', true)}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        form.isABTestEnabled 
                          ? 'border-teal-500 bg-teal-50 text-teal-700' 
                          : 'border-gray-200 hover:border-gray-300 text-gray-600'
                      }`}
                    >
                      <FlaskConical className="h-5 w-5 mx-auto mb-2" />
                      <div className="font-medium">А/Б тест</div>
                      <div className="text-xs mt-1">Сравнение двух агентов</div>
                    </button>
                  </div>
                </div>

                <Separator />
                
                {/* Интерфейс для одной кампании */}
                {!form.isABTestEnabled && (
                  <div className="space-y-4">
                    <div>
                      <Label>Выберите агента *</Label>
                      <Select value={form.agent} onValueChange={(value) => handleInputChange('agent', value)}>
                        <SelectTrigger className="mt-1">
                          <SelectValue placeholder="Выберите агента для звонков" />
                        </SelectTrigger>
                        <SelectContent>
                          {mockAgents
                            .map((agent) => (
                              <SelectItem key={agent.id} value={agent.id}>
                                <div>
                                  <div className="font-medium">{agent.name}</div>
                                  <div className="text-xs text-gray-500">{agent.description}</div>
                                </div>
                              </SelectItem>
                            ))}
                        </SelectContent>
                      </Select>
                      
                      {/* Описание выбранного агента */}
                      {form.agent && (
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="font-medium text-sm">{mockAgents.find(a => a.id === form.agent)?.name}</p>
                              <p className="text-xs text-gray-500 mt-1">
                                {mockAgents.find(a => a.id === form.agent)?.description}
                              </p>
                            </div>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {}}
                            >
                              <Volume2 className="h-4 w-4 mr-1" />
                              Прослушать
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
                
                {/* Интерфейс для A/B теста */}
                {form.isABTestEnabled && (
                    <div className="space-y-4 p-4 bg-teal-50 border border-teal-200 rounded-lg">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="agent-a">Агент A *</Label>
                          <Select value={form.agentA} onValueChange={(value) => handleInputChange('agentA', value)}>
                            <SelectTrigger id="agent-a" className="mt-1">
                              <SelectValue placeholder="Выберите агента A" />
                            </SelectTrigger>
                            <SelectContent>
                              {mockAgents
                                .filter(agent => agent.id !== form.agentB)
                                .map((agent) => (
                                  <SelectItem key={agent.id} value={agent.id}>
                                    <div>
                                      <div className="font-medium">{agent.name}</div>
                                      <div className="text-xs text-gray-500">{agent.description}</div>
                                    </div>
                                  </SelectItem>
                                ))}
                            </SelectContent>
                          </Select>
                        </div>
                        
                        <div>
                          <Label htmlFor="agent-b">Агент B *</Label>
                          <Select value={form.agentB} onValueChange={(value) => handleInputChange('agentB', value)}>
                            <SelectTrigger id="agent-b" className="mt-1">
                              <SelectValue placeholder="Выберите агента B" />
                            </SelectTrigger>
                            <SelectContent>
                              {mockAgents
                                .filter(agent => agent.id !== form.agentA)
                                .map((agent) => (
                                  <SelectItem key={agent.id} value={agent.id}>
                                    <div>
                                      <div className="font-medium">{agent.name}</div>
                                      <div className="text-xs text-gray-500">{agent.description}</div>
                                    </div>
                                  </SelectItem>
                                ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                      
                      <div>
                        <Label htmlFor="traffic-split">Распределение трафика</Label>
                        <div className="flex items-center space-x-4 mt-2">
                          <span className="text-sm font-medium">Агент A: {form.trafficSplit}%</span>
                          <input
                            id="traffic-split"
                            type="range"
                            min="0"
                            max="100"
                            step="5"
                            value={form.trafficSplit}
                            onChange={(e) => handleInputChange('trafficSplit', parseInt(e.target.value))}
                            className="flex-1"
                          />
                          <span className="text-sm font-medium">Агент B: {100 - form.trafficSplit}%</span>
                        </div>
                        <p className="text-xs text-gray-500 mt-2">
                          Укажите, какой процент звонков будет направлен на каждого агента
                        </p>
                      </div>
                      
                      {/* Описания выбранных агентов */}
                      {form.agentA && form.agentB && (
                        <div className="grid grid-cols-2 gap-4 mt-4">
                          <div className="p-3 bg-white rounded-lg border">
                            <h4 className="font-medium text-sm mb-1">
                              Агент A: {mockAgents.find(a => a.id === form.agentA)?.name}
                            </h4>
                            <p className="text-xs text-gray-600">
                              {mockAgents.find(a => a.id === form.agentA)?.description}
                            </p>
                          </div>
                          <div className="p-3 bg-white rounded-lg border">
                            <h4 className="font-medium text-sm mb-1">
                              Агент B: {mockAgents.find(a => a.id === form.agentB)?.name}
                            </h4>
                            <p className="text-xs text-gray-600">
                              {mockAgents.find(a => a.id === form.agentB)?.description}
                            </p>
                          </div>
                        </div>
                      )}
                    </div>
                  )}

                {/* Инлайн-тест агента */}
                <Separator />
                
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="font-medium flex items-center">
                      <Headphones className="h-4 w-4 mr-2" />
                      Тестирование агента
                    </h3>
                    {form.agentTestStatus === 'passed' && (
                      <Badge className="bg-green-100 text-green-800">
                        <CheckCircle className="h-3 w-3 mr-1" />
                        Пройдено
                      </Badge>
                    )}
                    {form.agentTestStatus === 'failed' && (
                      <Badge className="bg-red-100 text-red-800">
                        <XCircle className="h-3 w-3 mr-1" />
                        Есть замечания
                      </Badge>
                    )}
                  </div>
                  
                  <div className="space-y-4">
                    {/* Способы тестирования */}
                    <div className="grid grid-cols-2 gap-3">
                      {/* WebRTC звонок в браузер */}
                      <div className="p-4 border rounded-lg hover:bg-gray-50 cursor-pointer">
                        <div className="space-y-2">
                          <div className="flex items-center space-x-2">
                            <Volume2 className="h-5 w-5 text-blue-600" />
                            <span className="font-medium text-sm">Позвонить в браузер</span>
                          </div>
                          <p className="text-xs text-gray-500">
                            WebRTC звонок через микрофон
                          </p>
                          <Button
                            onClick={handleTestAgent}
                            disabled={!form.agent || form.agentTestStatus === 'testing'}
                            variant="outline"
                            size="sm"
                            className="w-full"
                          >
                            <Mic className="h-4 w-4 mr-2" />
                            Тестировать
                          </Button>
                        </div>
                      </div>
                      
                      {/* Звонок на номер телефона */}
                      <div className="p-4 border rounded-lg hover:bg-gray-50">
                        <div className="space-y-2">
                          <div className="flex items-center space-x-2">
                            <Phone className="h-5 w-5 text-green-600" />
                            <span className="font-medium text-sm">Позвонить на мой номер</span>
                          </div>
                          <p className="text-xs text-gray-500">
                            Звонок через Asterisk
                          </p>
                          <div className="flex space-x-2">
                            <Input
                              placeholder="+7 (999) 123-45-67"
                              value={form.testPhone}
                              onChange={(e) => handleInputChange('testPhone', e.target.value)}
                              className="flex-1 text-sm"
                              disabled={form.agentTestStatus === 'testing'}
                            />
                            <Button
                              onClick={handleTestCall}
                              disabled={!form.agent || !form.testPhone || form.agentTestStatus === 'testing'}
                              variant="outline"
                              size="sm"
                            >
                              <Phone className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    {form.agentTestFeedback && (
                      <div className={`p-3 rounded-lg border ${
                        form.agentTestStatus === 'passed' 
                          ? 'bg-green-50 border-green-200' 
                          : 'bg-red-50 border-red-200'
                      }`}>
                        <p className={`text-sm ${
                          form.agentTestStatus === 'passed' 
                            ? 'text-green-700' 
                            : 'text-red-700'
                        }`}>
                          {form.agentTestFeedback}
                        </p>
                        {form.agentTestStatus === 'failed' && (
                          <Button
                            variant="outline"
                            size="sm"
                            className="mt-3"
                            onClick={() => setCurrentStep(3)}
                          >
                            <ArrowLeft className="h-3 w-3 mr-1" />
                            Назад к настройке агента
                          </Button>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
            </>
          )}

          {/* Шаг 4: Резюме */}
          {currentStep === 4 && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <CheckCircle className="h-5 w-5 mr-2" />
                  Резюме компании
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Company ID */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <p className="text-sm text-gray-600 mb-1">Company ID</p>
                  <code className="text-xl font-mono font-bold text-gray-900">
                    {form.companyId}
                  </code>
                </div>

                {/* Основная информация */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Название компании</p>
                    <p className="font-medium">{form.name}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-600">Исходящий номер</p>
                    <p className="font-medium">
                      {mockOutgoingNumbers.find(n => n.id === form.outgoingNumber)?.number || 'Не выбран'}
                    </p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-600">Окно дозвона</p>
                    <p className="font-medium">{form.callWindow.start} - {form.callWindow.end}</p>
                  </div>
                  
                  <div>
                    <p className="text-sm text-gray-600">Попыток дозвона</p>
                    <p className="font-medium">{form.retryPolicy.maxAttempts} (через {form.retryPolicy.delayMinutes} мин)</p>
                  </div>
                </div>

                {/* Информация об агентах */}
                <div className="bg-gray-50 rounded-lg p-4">
                  <p className="text-sm text-gray-600 mb-2">Настройка агентов</p>
                  {form.isABTestEnabled ? (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-xs text-gray-500">Агент A ({form.trafficSplit}%)</p>
                        <p className="font-medium">
                          {mockAgents.find(a => a.id === form.agentA)?.name || 'Не выбран'}
                        </p>
                      </div>
                      <div>
                        <p className="text-xs text-gray-500">Агент B ({100 - form.trafficSplit}%)</p>
                        <p className="font-medium">
                          {mockAgents.find(a => a.id === form.agentB)?.name || 'Не выбран'}
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div>
                      <p className="font-medium">
                        {mockAgents.find(a => a.id === form.agent)?.name || 'Не выбран'}
                      </p>
                      <p className="text-xs text-gray-500 mt-1">
                        {mockAgents.find(a => a.id === form.agent)?.description || ''}
                      </p>
                    </div>
                  )}
                </div>

                {/* Статус готовности */}
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <p className="text-sm text-gray-600">Статус системы</p>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleRefreshStatus}
                      disabled={isCheckingService}
                    >
                      <RefreshCw className={`h-3 w-3 mr-1 ${isCheckingService ? 'animate-spin' : ''}`} />
                      Обновить
                    </Button>
                  </div>
                  <div className="grid grid-cols-3 gap-3">
                    <div className="flex items-center space-x-2">
                      {form.telephonyOk ? (
                        <CheckCircle className="h-4 w-4 text-green-600" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-600" />
                      )}
                      <span className="text-sm">Телефония</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      {form.balanceOk ? (
                        <CheckCircle className="h-4 w-4 text-green-600" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-600" />
                      )}
                      <span className="text-sm">Баланс</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      {form.serviceAvailable ? (
                        <CheckCircle className="h-4 w-4 text-green-600" />
                      ) : (
                        <AlertCircle className="h-4 w-4 text-yellow-600" />
                      )}
                      <span className="text-sm">API</span>
                    </div>
                  </div>
                </div>

                {/* Кнопка создания */}
                <div className="flex justify-center pt-4">
                  <Button 
                    onClick={handleSave} 
                    disabled={isLoading || !isFormValid()}
                    size="lg"
                    className="min-w-[200px]"
                  >
                    {isLoading ? (
                      <>
                        <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                        Создание...
                      </>
                    ) : (
                      <>
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Создать компанию
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Боковая панель */}
        <div className="space-y-4">
          {/* Прогресс */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Прогресс создания</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {steps.map((step) => (
                <div key={step.id} className="flex items-center justify-between">
                  <span className="text-sm">{step.name}</span>
                  {isStepCompleted(step.id) ? (
                    <Badge className="bg-green-100 text-green-800">✓</Badge>
                  ) : currentStep === step.id ? (
                    <Badge className="bg-blue-100 text-blue-800">...</Badge>
                  ) : (
                    <Badge variant="outline">—</Badge>
                  )}
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Навигация по шагам */}
          <Card>
            <CardContent className="p-4">
              <div className="flex flex-col space-y-2">
                <Button
                  variant={currentStep > 1 ? 'outline' : 'ghost'}
                  disabled={currentStep === 1}
                  onClick={() => setCurrentStep(currentStep - 1)}
                  className="w-full"
                >
                  Предыдущий шаг
                </Button>
                <Button
                  variant={currentStep < 4 ? 'default' : 'ghost'}
                  disabled={currentStep === 4}
                  onClick={() => setCurrentStep(currentStep + 1)}
                  className="w-full"
                >
                  Следующий шаг
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Подсказки */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Подсказка</CardTitle>
            </CardHeader>
            <CardContent>
              {currentStep === 1 && (
                <p className="text-sm text-gray-600">
                  Выберите понятное название для вашей кампании.
                </p>
              )}
              {currentStep === 2 && (
                <p className="text-sm text-gray-600">
                  Настройте время звонков, политику повторов и выберите исходящий номер для кампании.
                </p>
              )}
              {currentStep === 3 && (
                <p className="text-sm text-gray-600">
                  Выберите или создайте агента и протестируйте его перед запуском кампании.
                </p>
              )}
              {currentStep === 4 && (
                <p className="text-sm text-gray-600">
                  После создания компании передайте Company ID в вашу ERP систему для привязки контактов.
                </p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
      
      {/* Call Test Modal */}
      <CallTestModal 
        isOpen={isCallModalOpen}
        onClose={() => setIsCallModalOpen(false)}
        agentName={mockAgents.find(a => a.id === form.agent)?.name || 'AI Agent'}
      />
    </div>
    </>
  )
}
</file>

</files>
